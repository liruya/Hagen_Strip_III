

Microchip Technology PIC PRO Macro Assembler V1.40 build -251452761 
                                                                                               Sun Jan 15 22:10:29 2017

Microchip Technology Omniscient Code Generator v1.40 (PRO mode) build 201612010151
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text51,local,class=CODE,merge=1,delta=2
    18                           	psect	text54,local,class=CODE,merge=1,delta=2
    19                           	psect	text61,local,class=CODE,merge=1,delta=2
    20                           	psect	text62,local,class=CODE,merge=1,delta=2
    21                           	psect	pa_nodes,global,class=CODE,delta=2
    22                           	dabs	1,0x620,48
    23                           	dabs	1,0x5C9,39
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.40
    27                           ; Generated 01/12/2016 GMT
    28                           ; 
    29                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F18345 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  0007                     	;# 
    68  0008                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0097                     	;# 
   103  009B                     	;# 
   104  009B                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  0111                     	;# 
   113  0112                     	;# 
   114  0113                     	;# 
   115  0114                     	;# 
   116  0115                     	;# 
   117  0116                     	;# 
   118  0117                     	;# 
   119  0118                     	;# 
   120  0119                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  018E                     	;# 
   124  0197                     	;# 
   125  0199                     	;# 
   126  0199                     	;# 
   127  0199                     	;# 
   128  019A                     	;# 
   129  019A                     	;# 
   130  019A                     	;# 
   131  019B                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019B                     	;# 
   136  019C                     	;# 
   137  019C                     	;# 
   138  019C                     	;# 
   139  019D                     	;# 
   140  019D                     	;# 
   141  019D                     	;# 
   142  019E                     	;# 
   143  019E                     	;# 
   144  019E                     	;# 
   145  019F                     	;# 
   146  019F                     	;# 
   147  019F                     	;# 
   148  019F                     	;# 
   149  019F                     	;# 
   150  020C                     	;# 
   151  020D                     	;# 
   152  020E                     	;# 
   153  0211                     	;# 
   154  0211                     	;# 
   155  0212                     	;# 
   156  0212                     	;# 
   157  0213                     	;# 
   158  0213                     	;# 
   159  0214                     	;# 
   160  0214                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0216                     	;# 
   166  0216                     	;# 
   167  0217                     	;# 
   168  0217                     	;# 
   169  0219                     	;# 
   170  021A                     	;# 
   171  021B                     	;# 
   172  021C                     	;# 
   173  021D                     	;# 
   174  021D                     	;# 
   175  021E                     	;# 
   176  021F                     	;# 
   177  028C                     	;# 
   178  028D                     	;# 
   179  028E                     	;# 
   180  0291                     	;# 
   181  0291                     	;# 
   182  0292                     	;# 
   183  0293                     	;# 
   184  0294                     	;# 
   185  0295                     	;# 
   186  0295                     	;# 
   187  0296                     	;# 
   188  0297                     	;# 
   189  0298                     	;# 
   190  029F                     	;# 
   191  030C                     	;# 
   192  030D                     	;# 
   193  030E                     	;# 
   194  0311                     	;# 
   195  0311                     	;# 
   196  0312                     	;# 
   197  0313                     	;# 
   198  0314                     	;# 
   199  0315                     	;# 
   200  0315                     	;# 
   201  0316                     	;# 
   202  0317                     	;# 
   203  0318                     	;# 
   204  038C                     	;# 
   205  038D                     	;# 
   206  038E                     	;# 
   207  0391                     	;# 
   208  0392                     	;# 
   209  0393                     	;# 
   210  0394                     	;# 
   211  0395                     	;# 
   212  0396                     	;# 
   213  0397                     	;# 
   214  0398                     	;# 
   215  0399                     	;# 
   216  039A                     	;# 
   217  039C                     	;# 
   218  039D                     	;# 
   219  039E                     	;# 
   220  039F                     	;# 
   221  0411                     	;# 
   222  0411                     	;# 
   223  0412                     	;# 
   224  0413                     	;# 
   225  0414                     	;# 
   226  0415                     	;# 
   227  0416                     	;# 
   228  0417                     	;# 
   229  0418                     	;# 
   230  0418                     	;# 
   231  0419                     	;# 
   232  041A                     	;# 
   233  041B                     	;# 
   234  041C                     	;# 
   235  041D                     	;# 
   236  041E                     	;# 
   237  041F                     	;# 
   238  0498                     	;# 
   239  0498                     	;# 
   240  0499                     	;# 
   241  049A                     	;# 
   242  049B                     	;# 
   243  049B                     	;# 
   244  049C                     	;# 
   245  049D                     	;# 
   246  049E                     	;# 
   247  049F                     	;# 
   248  0617                     	;# 
   249  0618                     	;# 
   250  0619                     	;# 
   251  0619                     	;# 
   252  061A                     	;# 
   253  061B                     	;# 
   254  061C                     	;# 
   255  061C                     	;# 
   256  061F                     	;# 
   257  0691                     	;# 
   258  0692                     	;# 
   259  0693                     	;# 
   260  0694                     	;# 
   261  0695                     	;# 
   262  0696                     	;# 
   263  0697                     	;# 
   264  0698                     	;# 
   265  0699                     	;# 
   266  0711                     	;# 
   267  0712                     	;# 
   268  0713                     	;# 
   269  0714                     	;# 
   270  0715                     	;# 
   271  0716                     	;# 
   272  0717                     	;# 
   273  0718                     	;# 
   274  0719                     	;# 
   275  0891                     	;# 
   276  0891                     	;# 
   277  0891                     	;# 
   278  0891                     	;# 
   279  0891                     	;# 
   280  0891                     	;# 
   281  0892                     	;# 
   282  0892                     	;# 
   283  0892                     	;# 
   284  0893                     	;# 
   285  0893                     	;# 
   286  0893                     	;# 
   287  0893                     	;# 
   288  0893                     	;# 
   289  0893                     	;# 
   290  0894                     	;# 
   291  0894                     	;# 
   292  0894                     	;# 
   293  0895                     	;# 
   294  0895                     	;# 
   295  0895                     	;# 
   296  0896                     	;# 
   297  0896                     	;# 
   298  0896                     	;# 
   299  089B                     	;# 
   300  0911                     	;# 
   301  0912                     	;# 
   302  0913                     	;# 
   303  0914                     	;# 
   304  0915                     	;# 
   305  0916                     	;# 
   306  0918                     	;# 
   307  0919                     	;# 
   308  091A                     	;# 
   309  091B                     	;# 
   310  091C                     	;# 
   311  091D                     	;# 
   312  091E                     	;# 
   313  091F                     	;# 
   314  0E0F                     	;# 
   315  0E10                     	;# 
   316  0E11                     	;# 
   317  0E12                     	;# 
   318  0E13                     	;# 
   319  0E14                     	;# 
   320  0E15                     	;# 
   321  0E16                     	;# 
   322  0E17                     	;# 
   323  0E18                     	;# 
   324  0E19                     	;# 
   325  0E1A                     	;# 
   326  0E1B                     	;# 
   327  0E1C                     	;# 
   328  0E1D                     	;# 
   329  0E1E                     	;# 
   330  0E1F                     	;# 
   331  0E20                     	;# 
   332  0E21                     	;# 
   333  0E22                     	;# 
   334  0E24                     	;# 
   335  0E25                     	;# 
   336  0E28                     	;# 
   337  0E29                     	;# 
   338  0E2A                     	;# 
   339  0E2B                     	;# 
   340  0E2C                     	;# 
   341  0E2D                     	;# 
   342  0E2E                     	;# 
   343  0E2F                     	;# 
   344  0E90                     	;# 
   345  0E91                     	;# 
   346  0E92                     	;# 
   347  0E94                     	;# 
   348  0E95                     	;# 
   349  0E9C                     	;# 
   350  0E9D                     	;# 
   351  0E9E                     	;# 
   352  0E9F                     	;# 
   353  0EA0                     	;# 
   354  0EA1                     	;# 
   355  0EA2                     	;# 
   356  0EA3                     	;# 
   357  0EA4                     	;# 
   358  0EA5                     	;# 
   359  0EA6                     	;# 
   360  0EA7                     	;# 
   361  0F0F                     	;# 
   362  0F10                     	;# 
   363  0F11                     	;# 
   364  0F12                     	;# 
   365  0F13                     	;# 
   366  0F14                     	;# 
   367  0F15                     	;# 
   368  0F16                     	;# 
   369  0F17                     	;# 
   370  0F18                     	;# 
   371  0F19                     	;# 
   372  0F1A                     	;# 
   373  0F1B                     	;# 
   374  0F1C                     	;# 
   375  0F1D                     	;# 
   376  0F1E                     	;# 
   377  0F1F                     	;# 
   378  0F20                     	;# 
   379  0F21                     	;# 
   380  0F22                     	;# 
   381  0F23                     	;# 
   382  0F24                     	;# 
   383  0F25                     	;# 
   384  0F26                     	;# 
   385  0F27                     	;# 
   386  0F28                     	;# 
   387  0F29                     	;# 
   388  0F2A                     	;# 
   389  0F2B                     	;# 
   390  0F2C                     	;# 
   391  0F2D                     	;# 
   392  0F2E                     	;# 
   393  0F2F                     	;# 
   394  0F30                     	;# 
   395  0F31                     	;# 
   396  0F32                     	;# 
   397  0F33                     	;# 
   398  0F34                     	;# 
   399  0F35                     	;# 
   400  0F36                     	;# 
   401  0F37                     	;# 
   402  0FE4                     	;# 
   403  0FE5                     	;# 
   404  0FE6                     	;# 
   405  0FE7                     	;# 
   406  0FE8                     	;# 
   407  0FE9                     	;# 
   408  0FEA                     	;# 
   409  0FEB                     	;# 
   410  0FED                     	;# 
   411  0FEE                     	;# 
   412  0FEF                     	;# 
   413  0000                     	;# 
   414  0001                     	;# 
   415  0002                     	;# 
   416  0003                     	;# 
   417  0004                     	;# 
   418  0005                     	;# 
   419  0006                     	;# 
   420  0007                     	;# 
   421  0008                     	;# 
   422  0009                     	;# 
   423  000A                     	;# 
   424  000B                     	;# 
   425  000C                     	;# 
   426  000D                     	;# 
   427  000E                     	;# 
   428  0010                     	;# 
   429  0011                     	;# 
   430  0012                     	;# 
   431  0013                     	;# 
   432  0014                     	;# 
   433  0015                     	;# 
   434  0015                     	;# 
   435  0016                     	;# 
   436  0016                     	;# 
   437  0017                     	;# 
   438  0018                     	;# 
   439  0019                     	;# 
   440  0019                     	;# 
   441  001A                     	;# 
   442  001B                     	;# 
   443  001C                     	;# 
   444  001D                     	;# 
   445  001E                     	;# 
   446  001F                     	;# 
   447  008C                     	;# 
   448  008D                     	;# 
   449  008E                     	;# 
   450  0090                     	;# 
   451  0091                     	;# 
   452  0092                     	;# 
   453  0093                     	;# 
   454  0094                     	;# 
   455  0097                     	;# 
   456  009B                     	;# 
   457  009B                     	;# 
   458  009C                     	;# 
   459  009D                     	;# 
   460  009E                     	;# 
   461  009F                     	;# 
   462  010C                     	;# 
   463  010D                     	;# 
   464  010E                     	;# 
   465  0111                     	;# 
   466  0112                     	;# 
   467  0113                     	;# 
   468  0114                     	;# 
   469  0115                     	;# 
   470  0116                     	;# 
   471  0117                     	;# 
   472  0118                     	;# 
   473  0119                     	;# 
   474  018C                     	;# 
   475  018D                     	;# 
   476  018E                     	;# 
   477  0197                     	;# 
   478  0199                     	;# 
   479  0199                     	;# 
   480  0199                     	;# 
   481  019A                     	;# 
   482  019A                     	;# 
   483  019A                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019C                     	;# 
   490  019C                     	;# 
   491  019C                     	;# 
   492  019D                     	;# 
   493  019D                     	;# 
   494  019D                     	;# 
   495  019E                     	;# 
   496  019E                     	;# 
   497  019E                     	;# 
   498  019F                     	;# 
   499  019F                     	;# 
   500  019F                     	;# 
   501  019F                     	;# 
   502  019F                     	;# 
   503  020C                     	;# 
   504  020D                     	;# 
   505  020E                     	;# 
   506  0211                     	;# 
   507  0211                     	;# 
   508  0212                     	;# 
   509  0212                     	;# 
   510  0213                     	;# 
   511  0213                     	;# 
   512  0214                     	;# 
   513  0214                     	;# 
   514  0215                     	;# 
   515  0215                     	;# 
   516  0215                     	;# 
   517  0215                     	;# 
   518  0216                     	;# 
   519  0216                     	;# 
   520  0217                     	;# 
   521  0217                     	;# 
   522  0219                     	;# 
   523  021A                     	;# 
   524  021B                     	;# 
   525  021C                     	;# 
   526  021D                     	;# 
   527  021D                     	;# 
   528  021E                     	;# 
   529  021F                     	;# 
   530  028C                     	;# 
   531  028D                     	;# 
   532  028E                     	;# 
   533  0291                     	;# 
   534  0291                     	;# 
   535  0292                     	;# 
   536  0293                     	;# 
   537  0294                     	;# 
   538  0295                     	;# 
   539  0295                     	;# 
   540  0296                     	;# 
   541  0297                     	;# 
   542  0298                     	;# 
   543  029F                     	;# 
   544  030C                     	;# 
   545  030D                     	;# 
   546  030E                     	;# 
   547  0311                     	;# 
   548  0311                     	;# 
   549  0312                     	;# 
   550  0313                     	;# 
   551  0314                     	;# 
   552  0315                     	;# 
   553  0315                     	;# 
   554  0316                     	;# 
   555  0317                     	;# 
   556  0318                     	;# 
   557  038C                     	;# 
   558  038D                     	;# 
   559  038E                     	;# 
   560  0391                     	;# 
   561  0392                     	;# 
   562  0393                     	;# 
   563  0394                     	;# 
   564  0395                     	;# 
   565  0396                     	;# 
   566  0397                     	;# 
   567  0398                     	;# 
   568  0399                     	;# 
   569  039A                     	;# 
   570  039C                     	;# 
   571  039D                     	;# 
   572  039E                     	;# 
   573  039F                     	;# 
   574  0411                     	;# 
   575  0411                     	;# 
   576  0412                     	;# 
   577  0413                     	;# 
   578  0414                     	;# 
   579  0415                     	;# 
   580  0416                     	;# 
   581  0417                     	;# 
   582  0418                     	;# 
   583  0418                     	;# 
   584  0419                     	;# 
   585  041A                     	;# 
   586  041B                     	;# 
   587  041C                     	;# 
   588  041D                     	;# 
   589  041E                     	;# 
   590  041F                     	;# 
   591  0498                     	;# 
   592  0498                     	;# 
   593  0499                     	;# 
   594  049A                     	;# 
   595  049B                     	;# 
   596  049B                     	;# 
   597  049C                     	;# 
   598  049D                     	;# 
   599  049E                     	;# 
   600  049F                     	;# 
   601  0617                     	;# 
   602  0618                     	;# 
   603  0619                     	;# 
   604  0619                     	;# 
   605  061A                     	;# 
   606  061B                     	;# 
   607  061C                     	;# 
   608  061C                     	;# 
   609  061F                     	;# 
   610  0691                     	;# 
   611  0692                     	;# 
   612  0693                     	;# 
   613  0694                     	;# 
   614  0695                     	;# 
   615  0696                     	;# 
   616  0697                     	;# 
   617  0698                     	;# 
   618  0699                     	;# 
   619  0711                     	;# 
   620  0712                     	;# 
   621  0713                     	;# 
   622  0714                     	;# 
   623  0715                     	;# 
   624  0716                     	;# 
   625  0717                     	;# 
   626  0718                     	;# 
   627  0719                     	;# 
   628  0891                     	;# 
   629  0891                     	;# 
   630  0891                     	;# 
   631  0891                     	;# 
   632  0891                     	;# 
   633  0891                     	;# 
   634  0892                     	;# 
   635  0892                     	;# 
   636  0892                     	;# 
   637  0893                     	;# 
   638  0893                     	;# 
   639  0893                     	;# 
   640  0893                     	;# 
   641  0893                     	;# 
   642  0893                     	;# 
   643  0894                     	;# 
   644  0894                     	;# 
   645  0894                     	;# 
   646  0895                     	;# 
   647  0895                     	;# 
   648  0895                     	;# 
   649  0896                     	;# 
   650  0896                     	;# 
   651  0896                     	;# 
   652  089B                     	;# 
   653  0911                     	;# 
   654  0912                     	;# 
   655  0913                     	;# 
   656  0914                     	;# 
   657  0915                     	;# 
   658  0916                     	;# 
   659  0918                     	;# 
   660  0919                     	;# 
   661  091A                     	;# 
   662  091B                     	;# 
   663  091C                     	;# 
   664  091D                     	;# 
   665  091E                     	;# 
   666  091F                     	;# 
   667  0E0F                     	;# 
   668  0E10                     	;# 
   669  0E11                     	;# 
   670  0E12                     	;# 
   671  0E13                     	;# 
   672  0E14                     	;# 
   673  0E15                     	;# 
   674  0E16                     	;# 
   675  0E17                     	;# 
   676  0E18                     	;# 
   677  0E19                     	;# 
   678  0E1A                     	;# 
   679  0E1B                     	;# 
   680  0E1C                     	;# 
   681  0E1D                     	;# 
   682  0E1E                     	;# 
   683  0E1F                     	;# 
   684  0E20                     	;# 
   685  0E21                     	;# 
   686  0E22                     	;# 
   687  0E24                     	;# 
   688  0E25                     	;# 
   689  0E28                     	;# 
   690  0E29                     	;# 
   691  0E2A                     	;# 
   692  0E2B                     	;# 
   693  0E2C                     	;# 
   694  0E2D                     	;# 
   695  0E2E                     	;# 
   696  0E2F                     	;# 
   697  0E90                     	;# 
   698  0E91                     	;# 
   699  0E92                     	;# 
   700  0E94                     	;# 
   701  0E95                     	;# 
   702  0E9C                     	;# 
   703  0E9D                     	;# 
   704  0E9E                     	;# 
   705  0E9F                     	;# 
   706  0EA0                     	;# 
   707  0EA1                     	;# 
   708  0EA2                     	;# 
   709  0EA3                     	;# 
   710  0EA4                     	;# 
   711  0EA5                     	;# 
   712  0EA6                     	;# 
   713  0EA7                     	;# 
   714  0F0F                     	;# 
   715  0F10                     	;# 
   716  0F11                     	;# 
   717  0F12                     	;# 
   718  0F13                     	;# 
   719  0F14                     	;# 
   720  0F15                     	;# 
   721  0F16                     	;# 
   722  0F17                     	;# 
   723  0F18                     	;# 
   724  0F19                     	;# 
   725  0F1A                     	;# 
   726  0F1B                     	;# 
   727  0F1C                     	;# 
   728  0F1D                     	;# 
   729  0F1E                     	;# 
   730  0F1F                     	;# 
   731  0F20                     	;# 
   732  0F21                     	;# 
   733  0F22                     	;# 
   734  0F23                     	;# 
   735  0F24                     	;# 
   736  0F25                     	;# 
   737  0F26                     	;# 
   738  0F27                     	;# 
   739  0F28                     	;# 
   740  0F29                     	;# 
   741  0F2A                     	;# 
   742  0F2B                     	;# 
   743  0F2C                     	;# 
   744  0F2D                     	;# 
   745  0F2E                     	;# 
   746  0F2F                     	;# 
   747  0F30                     	;# 
   748  0F31                     	;# 
   749  0F32                     	;# 
   750  0F33                     	;# 
   751  0F34                     	;# 
   752  0F35                     	;# 
   753  0F36                     	;# 
   754  0F37                     	;# 
   755  0FE4                     	;# 
   756  0FE5                     	;# 
   757  0FE6                     	;# 
   758  0FE7                     	;# 
   759  0FE8                     	;# 
   760  0FE9                     	;# 
   761  0FEA                     	;# 
   762  0FEB                     	;# 
   763  0FED                     	;# 
   764  0FEE                     	;# 
   765  0FEF                     	;# 
   766  0000                     	;# 
   767  0001                     	;# 
   768  0002                     	;# 
   769  0003                     	;# 
   770  0004                     	;# 
   771  0005                     	;# 
   772  0006                     	;# 
   773  0007                     	;# 
   774  0008                     	;# 
   775  0009                     	;# 
   776  000A                     	;# 
   777  000B                     	;# 
   778  000C                     	;# 
   779  000D                     	;# 
   780  000E                     	;# 
   781  0010                     	;# 
   782  0011                     	;# 
   783  0012                     	;# 
   784  0013                     	;# 
   785  0014                     	;# 
   786  0015                     	;# 
   787  0015                     	;# 
   788  0016                     	;# 
   789  0016                     	;# 
   790  0017                     	;# 
   791  0018                     	;# 
   792  0019                     	;# 
   793  0019                     	;# 
   794  001A                     	;# 
   795  001B                     	;# 
   796  001C                     	;# 
   797  001D                     	;# 
   798  001E                     	;# 
   799  001F                     	;# 
   800  008C                     	;# 
   801  008D                     	;# 
   802  008E                     	;# 
   803  0090                     	;# 
   804  0091                     	;# 
   805  0092                     	;# 
   806  0093                     	;# 
   807  0094                     	;# 
   808  0097                     	;# 
   809  009B                     	;# 
   810  009B                     	;# 
   811  009C                     	;# 
   812  009D                     	;# 
   813  009E                     	;# 
   814  009F                     	;# 
   815  010C                     	;# 
   816  010D                     	;# 
   817  010E                     	;# 
   818  0111                     	;# 
   819  0112                     	;# 
   820  0113                     	;# 
   821  0114                     	;# 
   822  0115                     	;# 
   823  0116                     	;# 
   824  0117                     	;# 
   825  0118                     	;# 
   826  0119                     	;# 
   827  018C                     	;# 
   828  018D                     	;# 
   829  018E                     	;# 
   830  0197                     	;# 
   831  0199                     	;# 
   832  0199                     	;# 
   833  0199                     	;# 
   834  019A                     	;# 
   835  019A                     	;# 
   836  019A                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019C                     	;# 
   843  019C                     	;# 
   844  019C                     	;# 
   845  019D                     	;# 
   846  019D                     	;# 
   847  019D                     	;# 
   848  019E                     	;# 
   849  019E                     	;# 
   850  019E                     	;# 
   851  019F                     	;# 
   852  019F                     	;# 
   853  019F                     	;# 
   854  019F                     	;# 
   855  019F                     	;# 
   856  020C                     	;# 
   857  020D                     	;# 
   858  020E                     	;# 
   859  0211                     	;# 
   860  0211                     	;# 
   861  0212                     	;# 
   862  0212                     	;# 
   863  0213                     	;# 
   864  0213                     	;# 
   865  0214                     	;# 
   866  0214                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0215                     	;# 
   870  0215                     	;# 
   871  0216                     	;# 
   872  0216                     	;# 
   873  0217                     	;# 
   874  0217                     	;# 
   875  0219                     	;# 
   876  021A                     	;# 
   877  021B                     	;# 
   878  021C                     	;# 
   879  021D                     	;# 
   880  021D                     	;# 
   881  021E                     	;# 
   882  021F                     	;# 
   883  028C                     	;# 
   884  028D                     	;# 
   885  028E                     	;# 
   886  0291                     	;# 
   887  0291                     	;# 
   888  0292                     	;# 
   889  0293                     	;# 
   890  0294                     	;# 
   891  0295                     	;# 
   892  0295                     	;# 
   893  0296                     	;# 
   894  0297                     	;# 
   895  0298                     	;# 
   896  029F                     	;# 
   897  030C                     	;# 
   898  030D                     	;# 
   899  030E                     	;# 
   900  0311                     	;# 
   901  0311                     	;# 
   902  0312                     	;# 
   903  0313                     	;# 
   904  0314                     	;# 
   905  0315                     	;# 
   906  0315                     	;# 
   907  0316                     	;# 
   908  0317                     	;# 
   909  0318                     	;# 
   910  038C                     	;# 
   911  038D                     	;# 
   912  038E                     	;# 
   913  0391                     	;# 
   914  0392                     	;# 
   915  0393                     	;# 
   916  0394                     	;# 
   917  0395                     	;# 
   918  0396                     	;# 
   919  0397                     	;# 
   920  0398                     	;# 
   921  0399                     	;# 
   922  039A                     	;# 
   923  039C                     	;# 
   924  039D                     	;# 
   925  039E                     	;# 
   926  039F                     	;# 
   927  0411                     	;# 
   928  0411                     	;# 
   929  0412                     	;# 
   930  0413                     	;# 
   931  0414                     	;# 
   932  0415                     	;# 
   933  0416                     	;# 
   934  0417                     	;# 
   935  0418                     	;# 
   936  0418                     	;# 
   937  0419                     	;# 
   938  041A                     	;# 
   939  041B                     	;# 
   940  041C                     	;# 
   941  041D                     	;# 
   942  041E                     	;# 
   943  041F                     	;# 
   944  0498                     	;# 
   945  0498                     	;# 
   946  0499                     	;# 
   947  049A                     	;# 
   948  049B                     	;# 
   949  049B                     	;# 
   950  049C                     	;# 
   951  049D                     	;# 
   952  049E                     	;# 
   953  049F                     	;# 
   954  0617                     	;# 
   955  0618                     	;# 
   956  0619                     	;# 
   957  0619                     	;# 
   958  061A                     	;# 
   959  061B                     	;# 
   960  061C                     	;# 
   961  061C                     	;# 
   962  061F                     	;# 
   963  0691                     	;# 
   964  0692                     	;# 
   965  0693                     	;# 
   966  0694                     	;# 
   967  0695                     	;# 
   968  0696                     	;# 
   969  0697                     	;# 
   970  0698                     	;# 
   971  0699                     	;# 
   972  0711                     	;# 
   973  0712                     	;# 
   974  0713                     	;# 
   975  0714                     	;# 
   976  0715                     	;# 
   977  0716                     	;# 
   978  0717                     	;# 
   979  0718                     	;# 
   980  0719                     	;# 
   981  0891                     	;# 
   982  0891                     	;# 
   983  0891                     	;# 
   984  0891                     	;# 
   985  0891                     	;# 
   986  0891                     	;# 
   987  0892                     	;# 
   988  0892                     	;# 
   989  0892                     	;# 
   990  0893                     	;# 
   991  0893                     	;# 
   992  0893                     	;# 
   993  0893                     	;# 
   994  0893                     	;# 
   995  0893                     	;# 
   996  0894                     	;# 
   997  0894                     	;# 
   998  0894                     	;# 
   999  0895                     	;# 
  1000  0895                     	;# 
  1001  0895                     	;# 
  1002  0896                     	;# 
  1003  0896                     	;# 
  1004  0896                     	;# 
  1005  089B                     	;# 
  1006  0911                     	;# 
  1007  0912                     	;# 
  1008  0913                     	;# 
  1009  0914                     	;# 
  1010  0915                     	;# 
  1011  0916                     	;# 
  1012  0918                     	;# 
  1013  0919                     	;# 
  1014  091A                     	;# 
  1015  091B                     	;# 
  1016  091C                     	;# 
  1017  091D                     	;# 
  1018  091E                     	;# 
  1019  091F                     	;# 
  1020  0E0F                     	;# 
  1021  0E10                     	;# 
  1022  0E11                     	;# 
  1023  0E12                     	;# 
  1024  0E13                     	;# 
  1025  0E14                     	;# 
  1026  0E15                     	;# 
  1027  0E16                     	;# 
  1028  0E17                     	;# 
  1029  0E18                     	;# 
  1030  0E19                     	;# 
  1031  0E1A                     	;# 
  1032  0E1B                     	;# 
  1033  0E1C                     	;# 
  1034  0E1D                     	;# 
  1035  0E1E                     	;# 
  1036  0E1F                     	;# 
  1037  0E20                     	;# 
  1038  0E21                     	;# 
  1039  0E22                     	;# 
  1040  0E24                     	;# 
  1041  0E25                     	;# 
  1042  0E28                     	;# 
  1043  0E29                     	;# 
  1044  0E2A                     	;# 
  1045  0E2B                     	;# 
  1046  0E2C                     	;# 
  1047  0E2D                     	;# 
  1048  0E2E                     	;# 
  1049  0E2F                     	;# 
  1050  0E90                     	;# 
  1051  0E91                     	;# 
  1052  0E92                     	;# 
  1053  0E94                     	;# 
  1054  0E95                     	;# 
  1055  0E9C                     	;# 
  1056  0E9D                     	;# 
  1057  0E9E                     	;# 
  1058  0E9F                     	;# 
  1059  0EA0                     	;# 
  1060  0EA1                     	;# 
  1061  0EA2                     	;# 
  1062  0EA3                     	;# 
  1063  0EA4                     	;# 
  1064  0EA5                     	;# 
  1065  0EA6                     	;# 
  1066  0EA7                     	;# 
  1067  0F0F                     	;# 
  1068  0F10                     	;# 
  1069  0F11                     	;# 
  1070  0F12                     	;# 
  1071  0F13                     	;# 
  1072  0F14                     	;# 
  1073  0F15                     	;# 
  1074  0F16                     	;# 
  1075  0F17                     	;# 
  1076  0F18                     	;# 
  1077  0F19                     	;# 
  1078  0F1A                     	;# 
  1079  0F1B                     	;# 
  1080  0F1C                     	;# 
  1081  0F1D                     	;# 
  1082  0F1E                     	;# 
  1083  0F1F                     	;# 
  1084  0F20                     	;# 
  1085  0F21                     	;# 
  1086  0F22                     	;# 
  1087  0F23                     	;# 
  1088  0F24                     	;# 
  1089  0F25                     	;# 
  1090  0F26                     	;# 
  1091  0F27                     	;# 
  1092  0F28                     	;# 
  1093  0F29                     	;# 
  1094  0F2A                     	;# 
  1095  0F2B                     	;# 
  1096  0F2C                     	;# 
  1097  0F2D                     	;# 
  1098  0F2E                     	;# 
  1099  0F2F                     	;# 
  1100  0F30                     	;# 
  1101  0F31                     	;# 
  1102  0F32                     	;# 
  1103  0F33                     	;# 
  1104  0F34                     	;# 
  1105  0F35                     	;# 
  1106  0F36                     	;# 
  1107  0F37                     	;# 
  1108  0FE4                     	;# 
  1109  0FE5                     	;# 
  1110  0FE6                     	;# 
  1111  0FE7                     	;# 
  1112  0FE8                     	;# 
  1113  0FE9                     	;# 
  1114  0FEA                     	;# 
  1115  0FEB                     	;# 
  1116  0FED                     	;# 
  1117  0FEE                     	;# 
  1118  0FEF                     	;# 
  1119  0000                     	;# 
  1120  0001                     	;# 
  1121  0002                     	;# 
  1122  0003                     	;# 
  1123  0004                     	;# 
  1124  0005                     	;# 
  1125  0006                     	;# 
  1126  0007                     	;# 
  1127  0008                     	;# 
  1128  0009                     	;# 
  1129  000A                     	;# 
  1130  000B                     	;# 
  1131  000C                     	;# 
  1132  000D                     	;# 
  1133  000E                     	;# 
  1134  0010                     	;# 
  1135  0011                     	;# 
  1136  0012                     	;# 
  1137  0013                     	;# 
  1138  0014                     	;# 
  1139  0015                     	;# 
  1140  0015                     	;# 
  1141  0016                     	;# 
  1142  0016                     	;# 
  1143  0017                     	;# 
  1144  0018                     	;# 
  1145  0019                     	;# 
  1146  0019                     	;# 
  1147  001A                     	;# 
  1148  001B                     	;# 
  1149  001C                     	;# 
  1150  001D                     	;# 
  1151  001E                     	;# 
  1152  001F                     	;# 
  1153  008C                     	;# 
  1154  008D                     	;# 
  1155  008E                     	;# 
  1156  0090                     	;# 
  1157  0091                     	;# 
  1158  0092                     	;# 
  1159  0093                     	;# 
  1160  0094                     	;# 
  1161  0097                     	;# 
  1162  009B                     	;# 
  1163  009B                     	;# 
  1164  009C                     	;# 
  1165  009D                     	;# 
  1166  009E                     	;# 
  1167  009F                     	;# 
  1168  010C                     	;# 
  1169  010D                     	;# 
  1170  010E                     	;# 
  1171  0111                     	;# 
  1172  0112                     	;# 
  1173  0113                     	;# 
  1174  0114                     	;# 
  1175  0115                     	;# 
  1176  0116                     	;# 
  1177  0117                     	;# 
  1178  0118                     	;# 
  1179  0119                     	;# 
  1180  018C                     	;# 
  1181  018D                     	;# 
  1182  018E                     	;# 
  1183  0197                     	;# 
  1184  0199                     	;# 
  1185  0199                     	;# 
  1186  0199                     	;# 
  1187  019A                     	;# 
  1188  019A                     	;# 
  1189  019A                     	;# 
  1190  019B                     	;# 
  1191  019B                     	;# 
  1192  019B                     	;# 
  1193  019B                     	;# 
  1194  019B                     	;# 
  1195  019C                     	;# 
  1196  019C                     	;# 
  1197  019C                     	;# 
  1198  019D                     	;# 
  1199  019D                     	;# 
  1200  019D                     	;# 
  1201  019E                     	;# 
  1202  019E                     	;# 
  1203  019E                     	;# 
  1204  019F                     	;# 
  1205  019F                     	;# 
  1206  019F                     	;# 
  1207  019F                     	;# 
  1208  019F                     	;# 
  1209  020C                     	;# 
  1210  020D                     	;# 
  1211  020E                     	;# 
  1212  0211                     	;# 
  1213  0211                     	;# 
  1214  0212                     	;# 
  1215  0212                     	;# 
  1216  0213                     	;# 
  1217  0213                     	;# 
  1218  0214                     	;# 
  1219  0214                     	;# 
  1220  0215                     	;# 
  1221  0215                     	;# 
  1222  0215                     	;# 
  1223  0215                     	;# 
  1224  0216                     	;# 
  1225  0216                     	;# 
  1226  0217                     	;# 
  1227  0217                     	;# 
  1228  0219                     	;# 
  1229  021A                     	;# 
  1230  021B                     	;# 
  1231  021C                     	;# 
  1232  021D                     	;# 
  1233  021D                     	;# 
  1234  021E                     	;# 
  1235  021F                     	;# 
  1236  028C                     	;# 
  1237  028D                     	;# 
  1238  028E                     	;# 
  1239  0291                     	;# 
  1240  0291                     	;# 
  1241  0292                     	;# 
  1242  0293                     	;# 
  1243  0294                     	;# 
  1244  0295                     	;# 
  1245  0295                     	;# 
  1246  0296                     	;# 
  1247  0297                     	;# 
  1248  0298                     	;# 
  1249  029F                     	;# 
  1250  030C                     	;# 
  1251  030D                     	;# 
  1252  030E                     	;# 
  1253  0311                     	;# 
  1254  0311                     	;# 
  1255  0312                     	;# 
  1256  0313                     	;# 
  1257  0314                     	;# 
  1258  0315                     	;# 
  1259  0315                     	;# 
  1260  0316                     	;# 
  1261  0317                     	;# 
  1262  0318                     	;# 
  1263  038C                     	;# 
  1264  038D                     	;# 
  1265  038E                     	;# 
  1266  0391                     	;# 
  1267  0392                     	;# 
  1268  0393                     	;# 
  1269  0394                     	;# 
  1270  0395                     	;# 
  1271  0396                     	;# 
  1272  0397                     	;# 
  1273  0398                     	;# 
  1274  0399                     	;# 
  1275  039A                     	;# 
  1276  039C                     	;# 
  1277  039D                     	;# 
  1278  039E                     	;# 
  1279  039F                     	;# 
  1280  0411                     	;# 
  1281  0411                     	;# 
  1282  0412                     	;# 
  1283  0413                     	;# 
  1284  0414                     	;# 
  1285  0415                     	;# 
  1286  0416                     	;# 
  1287  0417                     	;# 
  1288  0418                     	;# 
  1289  0418                     	;# 
  1290  0419                     	;# 
  1291  041A                     	;# 
  1292  041B                     	;# 
  1293  041C                     	;# 
  1294  041D                     	;# 
  1295  041E                     	;# 
  1296  041F                     	;# 
  1297  0498                     	;# 
  1298  0498                     	;# 
  1299  0499                     	;# 
  1300  049A                     	;# 
  1301  049B                     	;# 
  1302  049B                     	;# 
  1303  049C                     	;# 
  1304  049D                     	;# 
  1305  049E                     	;# 
  1306  049F                     	;# 
  1307  0617                     	;# 
  1308  0618                     	;# 
  1309  0619                     	;# 
  1310  0619                     	;# 
  1311  061A                     	;# 
  1312  061B                     	;# 
  1313  061C                     	;# 
  1314  061C                     	;# 
  1315  061F                     	;# 
  1316  0691                     	;# 
  1317  0692                     	;# 
  1318  0693                     	;# 
  1319  0694                     	;# 
  1320  0695                     	;# 
  1321  0696                     	;# 
  1322  0697                     	;# 
  1323  0698                     	;# 
  1324  0699                     	;# 
  1325  0711                     	;# 
  1326  0712                     	;# 
  1327  0713                     	;# 
  1328  0714                     	;# 
  1329  0715                     	;# 
  1330  0716                     	;# 
  1331  0717                     	;# 
  1332  0718                     	;# 
  1333  0719                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0891                     	;# 
  1338  0891                     	;# 
  1339  0891                     	;# 
  1340  0892                     	;# 
  1341  0892                     	;# 
  1342  0892                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0893                     	;# 
  1347  0893                     	;# 
  1348  0893                     	;# 
  1349  0894                     	;# 
  1350  0894                     	;# 
  1351  0894                     	;# 
  1352  0895                     	;# 
  1353  0895                     	;# 
  1354  0895                     	;# 
  1355  0896                     	;# 
  1356  0896                     	;# 
  1357  0896                     	;# 
  1358  089B                     	;# 
  1359  0911                     	;# 
  1360  0912                     	;# 
  1361  0913                     	;# 
  1362  0914                     	;# 
  1363  0915                     	;# 
  1364  0916                     	;# 
  1365  0918                     	;# 
  1366  0919                     	;# 
  1367  091A                     	;# 
  1368  091B                     	;# 
  1369  091C                     	;# 
  1370  091D                     	;# 
  1371  091E                     	;# 
  1372  091F                     	;# 
  1373  0E0F                     	;# 
  1374  0E10                     	;# 
  1375  0E11                     	;# 
  1376  0E12                     	;# 
  1377  0E13                     	;# 
  1378  0E14                     	;# 
  1379  0E15                     	;# 
  1380  0E16                     	;# 
  1381  0E17                     	;# 
  1382  0E18                     	;# 
  1383  0E19                     	;# 
  1384  0E1A                     	;# 
  1385  0E1B                     	;# 
  1386  0E1C                     	;# 
  1387  0E1D                     	;# 
  1388  0E1E                     	;# 
  1389  0E1F                     	;# 
  1390  0E20                     	;# 
  1391  0E21                     	;# 
  1392  0E22                     	;# 
  1393  0E24                     	;# 
  1394  0E25                     	;# 
  1395  0E28                     	;# 
  1396  0E29                     	;# 
  1397  0E2A                     	;# 
  1398  0E2B                     	;# 
  1399  0E2C                     	;# 
  1400  0E2D                     	;# 
  1401  0E2E                     	;# 
  1402  0E2F                     	;# 
  1403  0E90                     	;# 
  1404  0E91                     	;# 
  1405  0E92                     	;# 
  1406  0E94                     	;# 
  1407  0E95                     	;# 
  1408  0E9C                     	;# 
  1409  0E9D                     	;# 
  1410  0E9E                     	;# 
  1411  0E9F                     	;# 
  1412  0EA0                     	;# 
  1413  0EA1                     	;# 
  1414  0EA2                     	;# 
  1415  0EA3                     	;# 
  1416  0EA4                     	;# 
  1417  0EA5                     	;# 
  1418  0EA6                     	;# 
  1419  0EA7                     	;# 
  1420  0F0F                     	;# 
  1421  0F10                     	;# 
  1422  0F11                     	;# 
  1423  0F12                     	;# 
  1424  0F13                     	;# 
  1425  0F14                     	;# 
  1426  0F15                     	;# 
  1427  0F16                     	;# 
  1428  0F17                     	;# 
  1429  0F18                     	;# 
  1430  0F19                     	;# 
  1431  0F1A                     	;# 
  1432  0F1B                     	;# 
  1433  0F1C                     	;# 
  1434  0F1D                     	;# 
  1435  0F1E                     	;# 
  1436  0F1F                     	;# 
  1437  0F20                     	;# 
  1438  0F21                     	;# 
  1439  0F22                     	;# 
  1440  0F23                     	;# 
  1441  0F24                     	;# 
  1442  0F25                     	;# 
  1443  0F26                     	;# 
  1444  0F27                     	;# 
  1445  0F28                     	;# 
  1446  0F29                     	;# 
  1447  0F2A                     	;# 
  1448  0F2B                     	;# 
  1449  0F2C                     	;# 
  1450  0F2D                     	;# 
  1451  0F2E                     	;# 
  1452  0F2F                     	;# 
  1453  0F30                     	;# 
  1454  0F31                     	;# 
  1455  0F32                     	;# 
  1456  0F33                     	;# 
  1457  0F34                     	;# 
  1458  0F35                     	;# 
  1459  0F36                     	;# 
  1460  0F37                     	;# 
  1461  0FE4                     	;# 
  1462  0FE5                     	;# 
  1463  0FE6                     	;# 
  1464  0FE7                     	;# 
  1465  0FE8                     	;# 
  1466  0FE9                     	;# 
  1467  0FEA                     	;# 
  1468  0FEB                     	;# 
  1469  0FED                     	;# 
  1470  0FEE                     	;# 
  1471  0FEF                     	;# 
  1472  0000                     	;# 
  1473  0001                     	;# 
  1474  0002                     	;# 
  1475  0003                     	;# 
  1476  0004                     	;# 
  1477  0005                     	;# 
  1478  0006                     	;# 
  1479  0007                     	;# 
  1480  0008                     	;# 
  1481  0009                     	;# 
  1482  000A                     	;# 
  1483  000B                     	;# 
  1484  000C                     	;# 
  1485  000D                     	;# 
  1486  000E                     	;# 
  1487  0010                     	;# 
  1488  0011                     	;# 
  1489  0012                     	;# 
  1490  0013                     	;# 
  1491  0014                     	;# 
  1492  0015                     	;# 
  1493  0015                     	;# 
  1494  0016                     	;# 
  1495  0016                     	;# 
  1496  0017                     	;# 
  1497  0018                     	;# 
  1498  0019                     	;# 
  1499  0019                     	;# 
  1500  001A                     	;# 
  1501  001B                     	;# 
  1502  001C                     	;# 
  1503  001D                     	;# 
  1504  001E                     	;# 
  1505  001F                     	;# 
  1506  008C                     	;# 
  1507  008D                     	;# 
  1508  008E                     	;# 
  1509  0090                     	;# 
  1510  0091                     	;# 
  1511  0092                     	;# 
  1512  0093                     	;# 
  1513  0094                     	;# 
  1514  0097                     	;# 
  1515  009B                     	;# 
  1516  009B                     	;# 
  1517  009C                     	;# 
  1518  009D                     	;# 
  1519  009E                     	;# 
  1520  009F                     	;# 
  1521  010C                     	;# 
  1522  010D                     	;# 
  1523  010E                     	;# 
  1524  0111                     	;# 
  1525  0112                     	;# 
  1526  0113                     	;# 
  1527  0114                     	;# 
  1528  0115                     	;# 
  1529  0116                     	;# 
  1530  0117                     	;# 
  1531  0118                     	;# 
  1532  0119                     	;# 
  1533  018C                     	;# 
  1534  018D                     	;# 
  1535  018E                     	;# 
  1536  0197                     	;# 
  1537  0199                     	;# 
  1538  0199                     	;# 
  1539  0199                     	;# 
  1540  019A                     	;# 
  1541  019A                     	;# 
  1542  019A                     	;# 
  1543  019B                     	;# 
  1544  019B                     	;# 
  1545  019B                     	;# 
  1546  019B                     	;# 
  1547  019B                     	;# 
  1548  019C                     	;# 
  1549  019C                     	;# 
  1550  019C                     	;# 
  1551  019D                     	;# 
  1552  019D                     	;# 
  1553  019D                     	;# 
  1554  019E                     	;# 
  1555  019E                     	;# 
  1556  019E                     	;# 
  1557  019F                     	;# 
  1558  019F                     	;# 
  1559  019F                     	;# 
  1560  019F                     	;# 
  1561  019F                     	;# 
  1562  020C                     	;# 
  1563  020D                     	;# 
  1564  020E                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0215                     	;# 
  1577  0216                     	;# 
  1578  0216                     	;# 
  1579  0217                     	;# 
  1580  0217                     	;# 
  1581  0219                     	;# 
  1582  021A                     	;# 
  1583  021B                     	;# 
  1584  021C                     	;# 
  1585  021D                     	;# 
  1586  021D                     	;# 
  1587  021E                     	;# 
  1588  021F                     	;# 
  1589  028C                     	;# 
  1590  028D                     	;# 
  1591  028E                     	;# 
  1592  0291                     	;# 
  1593  0291                     	;# 
  1594  0292                     	;# 
  1595  0293                     	;# 
  1596  0294                     	;# 
  1597  0295                     	;# 
  1598  0295                     	;# 
  1599  0296                     	;# 
  1600  0297                     	;# 
  1601  0298                     	;# 
  1602  029F                     	;# 
  1603  030C                     	;# 
  1604  030D                     	;# 
  1605  030E                     	;# 
  1606  0311                     	;# 
  1607  0311                     	;# 
  1608  0312                     	;# 
  1609  0313                     	;# 
  1610  0314                     	;# 
  1611  0315                     	;# 
  1612  0315                     	;# 
  1613  0316                     	;# 
  1614  0317                     	;# 
  1615  0318                     	;# 
  1616  038C                     	;# 
  1617  038D                     	;# 
  1618  038E                     	;# 
  1619  0391                     	;# 
  1620  0392                     	;# 
  1621  0393                     	;# 
  1622  0394                     	;# 
  1623  0395                     	;# 
  1624  0396                     	;# 
  1625  0397                     	;# 
  1626  0398                     	;# 
  1627  0399                     	;# 
  1628  039A                     	;# 
  1629  039C                     	;# 
  1630  039D                     	;# 
  1631  039E                     	;# 
  1632  039F                     	;# 
  1633  0411                     	;# 
  1634  0411                     	;# 
  1635  0412                     	;# 
  1636  0413                     	;# 
  1637  0414                     	;# 
  1638  0415                     	;# 
  1639  0416                     	;# 
  1640  0417                     	;# 
  1641  0418                     	;# 
  1642  0418                     	;# 
  1643  0419                     	;# 
  1644  041A                     	;# 
  1645  041B                     	;# 
  1646  041C                     	;# 
  1647  041D                     	;# 
  1648  041E                     	;# 
  1649  041F                     	;# 
  1650  0498                     	;# 
  1651  0498                     	;# 
  1652  0499                     	;# 
  1653  049A                     	;# 
  1654  049B                     	;# 
  1655  049B                     	;# 
  1656  049C                     	;# 
  1657  049D                     	;# 
  1658  049E                     	;# 
  1659  049F                     	;# 
  1660  0617                     	;# 
  1661  0618                     	;# 
  1662  0619                     	;# 
  1663  0619                     	;# 
  1664  061A                     	;# 
  1665  061B                     	;# 
  1666  061C                     	;# 
  1667  061C                     	;# 
  1668  061F                     	;# 
  1669  0691                     	;# 
  1670  0692                     	;# 
  1671  0693                     	;# 
  1672  0694                     	;# 
  1673  0695                     	;# 
  1674  0696                     	;# 
  1675  0697                     	;# 
  1676  0698                     	;# 
  1677  0699                     	;# 
  1678  0711                     	;# 
  1679  0712                     	;# 
  1680  0713                     	;# 
  1681  0714                     	;# 
  1682  0715                     	;# 
  1683  0716                     	;# 
  1684  0717                     	;# 
  1685  0718                     	;# 
  1686  0719                     	;# 
  1687  0891                     	;# 
  1688  0891                     	;# 
  1689  0891                     	;# 
  1690  0891                     	;# 
  1691  0891                     	;# 
  1692  0891                     	;# 
  1693  0892                     	;# 
  1694  0892                     	;# 
  1695  0892                     	;# 
  1696  0893                     	;# 
  1697  0893                     	;# 
  1698  0893                     	;# 
  1699  0893                     	;# 
  1700  0893                     	;# 
  1701  0893                     	;# 
  1702  0894                     	;# 
  1703  0894                     	;# 
  1704  0894                     	;# 
  1705  0895                     	;# 
  1706  0895                     	;# 
  1707  0895                     	;# 
  1708  0896                     	;# 
  1709  0896                     	;# 
  1710  0896                     	;# 
  1711  089B                     	;# 
  1712  0911                     	;# 
  1713  0912                     	;# 
  1714  0913                     	;# 
  1715  0914                     	;# 
  1716  0915                     	;# 
  1717  0916                     	;# 
  1718  0918                     	;# 
  1719  0919                     	;# 
  1720  091A                     	;# 
  1721  091B                     	;# 
  1722  091C                     	;# 
  1723  091D                     	;# 
  1724  091E                     	;# 
  1725  091F                     	;# 
  1726  0E0F                     	;# 
  1727  0E10                     	;# 
  1728  0E11                     	;# 
  1729  0E12                     	;# 
  1730  0E13                     	;# 
  1731  0E14                     	;# 
  1732  0E15                     	;# 
  1733  0E16                     	;# 
  1734  0E17                     	;# 
  1735  0E18                     	;# 
  1736  0E19                     	;# 
  1737  0E1A                     	;# 
  1738  0E1B                     	;# 
  1739  0E1C                     	;# 
  1740  0E1D                     	;# 
  1741  0E1E                     	;# 
  1742  0E1F                     	;# 
  1743  0E20                     	;# 
  1744  0E21                     	;# 
  1745  0E22                     	;# 
  1746  0E24                     	;# 
  1747  0E25                     	;# 
  1748  0E28                     	;# 
  1749  0E29                     	;# 
  1750  0E2A                     	;# 
  1751  0E2B                     	;# 
  1752  0E2C                     	;# 
  1753  0E2D                     	;# 
  1754  0E2E                     	;# 
  1755  0E2F                     	;# 
  1756  0E90                     	;# 
  1757  0E91                     	;# 
  1758  0E92                     	;# 
  1759  0E94                     	;# 
  1760  0E95                     	;# 
  1761  0E9C                     	;# 
  1762  0E9D                     	;# 
  1763  0E9E                     	;# 
  1764  0E9F                     	;# 
  1765  0EA0                     	;# 
  1766  0EA1                     	;# 
  1767  0EA2                     	;# 
  1768  0EA3                     	;# 
  1769  0EA4                     	;# 
  1770  0EA5                     	;# 
  1771  0EA6                     	;# 
  1772  0EA7                     	;# 
  1773  0F0F                     	;# 
  1774  0F10                     	;# 
  1775  0F11                     	;# 
  1776  0F12                     	;# 
  1777  0F13                     	;# 
  1778  0F14                     	;# 
  1779  0F15                     	;# 
  1780  0F16                     	;# 
  1781  0F17                     	;# 
  1782  0F18                     	;# 
  1783  0F19                     	;# 
  1784  0F1A                     	;# 
  1785  0F1B                     	;# 
  1786  0F1C                     	;# 
  1787  0F1D                     	;# 
  1788  0F1E                     	;# 
  1789  0F1F                     	;# 
  1790  0F20                     	;# 
  1791  0F21                     	;# 
  1792  0F22                     	;# 
  1793  0F23                     	;# 
  1794  0F24                     	;# 
  1795  0F25                     	;# 
  1796  0F26                     	;# 
  1797  0F27                     	;# 
  1798  0F28                     	;# 
  1799  0F29                     	;# 
  1800  0F2A                     	;# 
  1801  0F2B                     	;# 
  1802  0F2C                     	;# 
  1803  0F2D                     	;# 
  1804  0F2E                     	;# 
  1805  0F2F                     	;# 
  1806  0F30                     	;# 
  1807  0F31                     	;# 
  1808  0F32                     	;# 
  1809  0F33                     	;# 
  1810  0F34                     	;# 
  1811  0F35                     	;# 
  1812  0F36                     	;# 
  1813  0F37                     	;# 
  1814  0FE4                     	;# 
  1815  0FE5                     	;# 
  1816  0FE6                     	;# 
  1817  0FE7                     	;# 
  1818  0FE8                     	;# 
  1819  0FE9                     	;# 
  1820  0FEA                     	;# 
  1821  0FEB                     	;# 
  1822  0FED                     	;# 
  1823  0FEE                     	;# 
  1824  0FEF                     	;# 
  1825  0000                     	;# 
  1826  0001                     	;# 
  1827  0002                     	;# 
  1828  0003                     	;# 
  1829  0004                     	;# 
  1830  0005                     	;# 
  1831  0006                     	;# 
  1832  0007                     	;# 
  1833  0008                     	;# 
  1834  0009                     	;# 
  1835  000A                     	;# 
  1836  000B                     	;# 
  1837  000C                     	;# 
  1838  000D                     	;# 
  1839  000E                     	;# 
  1840  0010                     	;# 
  1841  0011                     	;# 
  1842  0012                     	;# 
  1843  0013                     	;# 
  1844  0014                     	;# 
  1845  0015                     	;# 
  1846  0015                     	;# 
  1847  0016                     	;# 
  1848  0016                     	;# 
  1849  0017                     	;# 
  1850  0018                     	;# 
  1851  0019                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  001D                     	;# 
  1857  001E                     	;# 
  1858  001F                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0093                     	;# 
  1866  0094                     	;# 
  1867  0097                     	;# 
  1868  009B                     	;# 
  1869  009B                     	;# 
  1870  009C                     	;# 
  1871  009D                     	;# 
  1872  009E                     	;# 
  1873  009F                     	;# 
  1874  010C                     	;# 
  1875  010D                     	;# 
  1876  010E                     	;# 
  1877  0111                     	;# 
  1878  0112                     	;# 
  1879  0113                     	;# 
  1880  0114                     	;# 
  1881  0115                     	;# 
  1882  0116                     	;# 
  1883  0117                     	;# 
  1884  0118                     	;# 
  1885  0119                     	;# 
  1886  018C                     	;# 
  1887  018D                     	;# 
  1888  018E                     	;# 
  1889  0197                     	;# 
  1890  0199                     	;# 
  1891  0199                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019A                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019B                     	;# 
  1901  019C                     	;# 
  1902  019C                     	;# 
  1903  019C                     	;# 
  1904  019D                     	;# 
  1905  019D                     	;# 
  1906  019D                     	;# 
  1907  019E                     	;# 
  1908  019E                     	;# 
  1909  019E                     	;# 
  1910  019F                     	;# 
  1911  019F                     	;# 
  1912  019F                     	;# 
  1913  019F                     	;# 
  1914  019F                     	;# 
  1915  020C                     	;# 
  1916  020D                     	;# 
  1917  020E                     	;# 
  1918  0211                     	;# 
  1919  0211                     	;# 
  1920  0212                     	;# 
  1921  0212                     	;# 
  1922  0213                     	;# 
  1923  0213                     	;# 
  1924  0214                     	;# 
  1925  0214                     	;# 
  1926  0215                     	;# 
  1927  0215                     	;# 
  1928  0215                     	;# 
  1929  0215                     	;# 
  1930  0216                     	;# 
  1931  0216                     	;# 
  1932  0217                     	;# 
  1933  0217                     	;# 
  1934  0219                     	;# 
  1935  021A                     	;# 
  1936  021B                     	;# 
  1937  021C                     	;# 
  1938  021D                     	;# 
  1939  021D                     	;# 
  1940  021E                     	;# 
  1941  021F                     	;# 
  1942  028C                     	;# 
  1943  028D                     	;# 
  1944  028E                     	;# 
  1945  0291                     	;# 
  1946  0291                     	;# 
  1947  0292                     	;# 
  1948  0293                     	;# 
  1949  0294                     	;# 
  1950  0295                     	;# 
  1951  0295                     	;# 
  1952  0296                     	;# 
  1953  0297                     	;# 
  1954  0298                     	;# 
  1955  029F                     	;# 
  1956  030C                     	;# 
  1957  030D                     	;# 
  1958  030E                     	;# 
  1959  0311                     	;# 
  1960  0311                     	;# 
  1961  0312                     	;# 
  1962  0313                     	;# 
  1963  0314                     	;# 
  1964  0315                     	;# 
  1965  0315                     	;# 
  1966  0316                     	;# 
  1967  0317                     	;# 
  1968  0318                     	;# 
  1969  038C                     	;# 
  1970  038D                     	;# 
  1971  038E                     	;# 
  1972  0391                     	;# 
  1973  0392                     	;# 
  1974  0393                     	;# 
  1975  0394                     	;# 
  1976  0395                     	;# 
  1977  0396                     	;# 
  1978  0397                     	;# 
  1979  0398                     	;# 
  1980  0399                     	;# 
  1981  039A                     	;# 
  1982  039C                     	;# 
  1983  039D                     	;# 
  1984  039E                     	;# 
  1985  039F                     	;# 
  1986  0411                     	;# 
  1987  0411                     	;# 
  1988  0412                     	;# 
  1989  0413                     	;# 
  1990  0414                     	;# 
  1991  0415                     	;# 
  1992  0416                     	;# 
  1993  0417                     	;# 
  1994  0418                     	;# 
  1995  0418                     	;# 
  1996  0419                     	;# 
  1997  041A                     	;# 
  1998  041B                     	;# 
  1999  041C                     	;# 
  2000  041D                     	;# 
  2001  041E                     	;# 
  2002  041F                     	;# 
  2003  0498                     	;# 
  2004  0498                     	;# 
  2005  0499                     	;# 
  2006  049A                     	;# 
  2007  049B                     	;# 
  2008  049B                     	;# 
  2009  049C                     	;# 
  2010  049D                     	;# 
  2011  049E                     	;# 
  2012  049F                     	;# 
  2013  0617                     	;# 
  2014  0618                     	;# 
  2015  0619                     	;# 
  2016  0619                     	;# 
  2017  061A                     	;# 
  2018  061B                     	;# 
  2019  061C                     	;# 
  2020  061C                     	;# 
  2021  061F                     	;# 
  2022  0691                     	;# 
  2023  0692                     	;# 
  2024  0693                     	;# 
  2025  0694                     	;# 
  2026  0695                     	;# 
  2027  0696                     	;# 
  2028  0697                     	;# 
  2029  0698                     	;# 
  2030  0699                     	;# 
  2031  0711                     	;# 
  2032  0712                     	;# 
  2033  0713                     	;# 
  2034  0714                     	;# 
  2035  0715                     	;# 
  2036  0716                     	;# 
  2037  0717                     	;# 
  2038  0718                     	;# 
  2039  0719                     	;# 
  2040  0891                     	;# 
  2041  0891                     	;# 
  2042  0891                     	;# 
  2043  0891                     	;# 
  2044  0891                     	;# 
  2045  0891                     	;# 
  2046  0892                     	;# 
  2047  0892                     	;# 
  2048  0892                     	;# 
  2049  0893                     	;# 
  2050  0893                     	;# 
  2051  0893                     	;# 
  2052  0893                     	;# 
  2053  0893                     	;# 
  2054  0893                     	;# 
  2055  0894                     	;# 
  2056  0894                     	;# 
  2057  0894                     	;# 
  2058  0895                     	;# 
  2059  0895                     	;# 
  2060  0895                     	;# 
  2061  0896                     	;# 
  2062  0896                     	;# 
  2063  0896                     	;# 
  2064  089B                     	;# 
  2065  0911                     	;# 
  2066  0912                     	;# 
  2067  0913                     	;# 
  2068  0914                     	;# 
  2069  0915                     	;# 
  2070  0916                     	;# 
  2071  0918                     	;# 
  2072  0919                     	;# 
  2073  091A                     	;# 
  2074  091B                     	;# 
  2075  091C                     	;# 
  2076  091D                     	;# 
  2077  091E                     	;# 
  2078  091F                     	;# 
  2079  0E0F                     	;# 
  2080  0E10                     	;# 
  2081  0E11                     	;# 
  2082  0E12                     	;# 
  2083  0E13                     	;# 
  2084  0E14                     	;# 
  2085  0E15                     	;# 
  2086  0E16                     	;# 
  2087  0E17                     	;# 
  2088  0E18                     	;# 
  2089  0E19                     	;# 
  2090  0E1A                     	;# 
  2091  0E1B                     	;# 
  2092  0E1C                     	;# 
  2093  0E1D                     	;# 
  2094  0E1E                     	;# 
  2095  0E1F                     	;# 
  2096  0E20                     	;# 
  2097  0E21                     	;# 
  2098  0E22                     	;# 
  2099  0E24                     	;# 
  2100  0E25                     	;# 
  2101  0E28                     	;# 
  2102  0E29                     	;# 
  2103  0E2A                     	;# 
  2104  0E2B                     	;# 
  2105  0E2C                     	;# 
  2106  0E2D                     	;# 
  2107  0E2E                     	;# 
  2108  0E2F                     	;# 
  2109  0E90                     	;# 
  2110  0E91                     	;# 
  2111  0E92                     	;# 
  2112  0E94                     	;# 
  2113  0E95                     	;# 
  2114  0E9C                     	;# 
  2115  0E9D                     	;# 
  2116  0E9E                     	;# 
  2117  0E9F                     	;# 
  2118  0EA0                     	;# 
  2119  0EA1                     	;# 
  2120  0EA2                     	;# 
  2121  0EA3                     	;# 
  2122  0EA4                     	;# 
  2123  0EA5                     	;# 
  2124  0EA6                     	;# 
  2125  0EA7                     	;# 
  2126  0F0F                     	;# 
  2127  0F10                     	;# 
  2128  0F11                     	;# 
  2129  0F12                     	;# 
  2130  0F13                     	;# 
  2131  0F14                     	;# 
  2132  0F15                     	;# 
  2133  0F16                     	;# 
  2134  0F17                     	;# 
  2135  0F18                     	;# 
  2136  0F19                     	;# 
  2137  0F1A                     	;# 
  2138  0F1B                     	;# 
  2139  0F1C                     	;# 
  2140  0F1D                     	;# 
  2141  0F1E                     	;# 
  2142  0F1F                     	;# 
  2143  0F20                     	;# 
  2144  0F21                     	;# 
  2145  0F22                     	;# 
  2146  0F23                     	;# 
  2147  0F24                     	;# 
  2148  0F25                     	;# 
  2149  0F26                     	;# 
  2150  0F27                     	;# 
  2151  0F28                     	;# 
  2152  0F29                     	;# 
  2153  0F2A                     	;# 
  2154  0F2B                     	;# 
  2155  0F2C                     	;# 
  2156  0F2D                     	;# 
  2157  0F2E                     	;# 
  2158  0F2F                     	;# 
  2159  0F30                     	;# 
  2160  0F31                     	;# 
  2161  0F32                     	;# 
  2162  0F33                     	;# 
  2163  0F34                     	;# 
  2164  0F35                     	;# 
  2165  0F36                     	;# 
  2166  0F37                     	;# 
  2167  0FE4                     	;# 
  2168  0FE5                     	;# 
  2169  0FE6                     	;# 
  2170  0FE7                     	;# 
  2171  0FE8                     	;# 
  2172  0FE9                     	;# 
  2173  0FEA                     	;# 
  2174  0FEB                     	;# 
  2175  0FED                     	;# 
  2176  0FEE                     	;# 
  2177  0FEF                     	;# 
  2178  0000                     	;# 
  2179  0001                     	;# 
  2180  0002                     	;# 
  2181  0003                     	;# 
  2182  0004                     	;# 
  2183  0005                     	;# 
  2184  0006                     	;# 
  2185  0007                     	;# 
  2186  0008                     	;# 
  2187  0009                     	;# 
  2188  000A                     	;# 
  2189  000B                     	;# 
  2190  000C                     	;# 
  2191  000D                     	;# 
  2192  000E                     	;# 
  2193  0010                     	;# 
  2194  0011                     	;# 
  2195  0012                     	;# 
  2196  0013                     	;# 
  2197  0014                     	;# 
  2198  0015                     	;# 
  2199  0015                     	;# 
  2200  0016                     	;# 
  2201  0016                     	;# 
  2202  0017                     	;# 
  2203  0018                     	;# 
  2204  0019                     	;# 
  2205  0019                     	;# 
  2206  001A                     	;# 
  2207  001B                     	;# 
  2208  001C                     	;# 
  2209  001D                     	;# 
  2210  001E                     	;# 
  2211  001F                     	;# 
  2212  008C                     	;# 
  2213  008D                     	;# 
  2214  008E                     	;# 
  2215  0090                     	;# 
  2216  0091                     	;# 
  2217  0092                     	;# 
  2218  0093                     	;# 
  2219  0094                     	;# 
  2220  0097                     	;# 
  2221  009B                     	;# 
  2222  009B                     	;# 
  2223  009C                     	;# 
  2224  009D                     	;# 
  2225  009E                     	;# 
  2226  009F                     	;# 
  2227  010C                     	;# 
  2228  010D                     	;# 
  2229  010E                     	;# 
  2230  0111                     	;# 
  2231  0112                     	;# 
  2232  0113                     	;# 
  2233  0114                     	;# 
  2234  0115                     	;# 
  2235  0116                     	;# 
  2236  0117                     	;# 
  2237  0118                     	;# 
  2238  0119                     	;# 
  2239  018C                     	;# 
  2240  018D                     	;# 
  2241  018E                     	;# 
  2242  0197                     	;# 
  2243  0199                     	;# 
  2244  0199                     	;# 
  2245  0199                     	;# 
  2246  019A                     	;# 
  2247  019A                     	;# 
  2248  019A                     	;# 
  2249  019B                     	;# 
  2250  019B                     	;# 
  2251  019B                     	;# 
  2252  019B                     	;# 
  2253  019B                     	;# 
  2254  019C                     	;# 
  2255  019C                     	;# 
  2256  019C                     	;# 
  2257  019D                     	;# 
  2258  019D                     	;# 
  2259  019D                     	;# 
  2260  019E                     	;# 
  2261  019E                     	;# 
  2262  019E                     	;# 
  2263  019F                     	;# 
  2264  019F                     	;# 
  2265  019F                     	;# 
  2266  019F                     	;# 
  2267  019F                     	;# 
  2268  020C                     	;# 
  2269  020D                     	;# 
  2270  020E                     	;# 
  2271  0211                     	;# 
  2272  0211                     	;# 
  2273  0212                     	;# 
  2274  0212                     	;# 
  2275  0213                     	;# 
  2276  0213                     	;# 
  2277  0214                     	;# 
  2278  0214                     	;# 
  2279  0215                     	;# 
  2280  0215                     	;# 
  2281  0215                     	;# 
  2282  0215                     	;# 
  2283  0216                     	;# 
  2284  0216                     	;# 
  2285  0217                     	;# 
  2286  0217                     	;# 
  2287  0219                     	;# 
  2288  021A                     	;# 
  2289  021B                     	;# 
  2290  021C                     	;# 
  2291  021D                     	;# 
  2292  021D                     	;# 
  2293  021E                     	;# 
  2294  021F                     	;# 
  2295  028C                     	;# 
  2296  028D                     	;# 
  2297  028E                     	;# 
  2298  0291                     	;# 
  2299  0291                     	;# 
  2300  0292                     	;# 
  2301  0293                     	;# 
  2302  0294                     	;# 
  2303  0295                     	;# 
  2304  0295                     	;# 
  2305  0296                     	;# 
  2306  0297                     	;# 
  2307  0298                     	;# 
  2308  029F                     	;# 
  2309  030C                     	;# 
  2310  030D                     	;# 
  2311  030E                     	;# 
  2312  0311                     	;# 
  2313  0311                     	;# 
  2314  0312                     	;# 
  2315  0313                     	;# 
  2316  0314                     	;# 
  2317  0315                     	;# 
  2318  0315                     	;# 
  2319  0316                     	;# 
  2320  0317                     	;# 
  2321  0318                     	;# 
  2322  038C                     	;# 
  2323  038D                     	;# 
  2324  038E                     	;# 
  2325  0391                     	;# 
  2326  0392                     	;# 
  2327  0393                     	;# 
  2328  0394                     	;# 
  2329  0395                     	;# 
  2330  0396                     	;# 
  2331  0397                     	;# 
  2332  0398                     	;# 
  2333  0399                     	;# 
  2334  039A                     	;# 
  2335  039C                     	;# 
  2336  039D                     	;# 
  2337  039E                     	;# 
  2338  039F                     	;# 
  2339  0411                     	;# 
  2340  0411                     	;# 
  2341  0412                     	;# 
  2342  0413                     	;# 
  2343  0414                     	;# 
  2344  0415                     	;# 
  2345  0416                     	;# 
  2346  0417                     	;# 
  2347  0418                     	;# 
  2348  0418                     	;# 
  2349  0419                     	;# 
  2350  041A                     	;# 
  2351  041B                     	;# 
  2352  041C                     	;# 
  2353  041D                     	;# 
  2354  041E                     	;# 
  2355  041F                     	;# 
  2356  0498                     	;# 
  2357  0498                     	;# 
  2358  0499                     	;# 
  2359  049A                     	;# 
  2360  049B                     	;# 
  2361  049B                     	;# 
  2362  049C                     	;# 
  2363  049D                     	;# 
  2364  049E                     	;# 
  2365  049F                     	;# 
  2366  0617                     	;# 
  2367  0618                     	;# 
  2368  0619                     	;# 
  2369  0619                     	;# 
  2370  061A                     	;# 
  2371  061B                     	;# 
  2372  061C                     	;# 
  2373  061C                     	;# 
  2374  061F                     	;# 
  2375  0691                     	;# 
  2376  0692                     	;# 
  2377  0693                     	;# 
  2378  0694                     	;# 
  2379  0695                     	;# 
  2380  0696                     	;# 
  2381  0697                     	;# 
  2382  0698                     	;# 
  2383  0699                     	;# 
  2384  0711                     	;# 
  2385  0712                     	;# 
  2386  0713                     	;# 
  2387  0714                     	;# 
  2388  0715                     	;# 
  2389  0716                     	;# 
  2390  0717                     	;# 
  2391  0718                     	;# 
  2392  0719                     	;# 
  2393  0891                     	;# 
  2394  0891                     	;# 
  2395  0891                     	;# 
  2396  0891                     	;# 
  2397  0891                     	;# 
  2398  0891                     	;# 
  2399  0892                     	;# 
  2400  0892                     	;# 
  2401  0892                     	;# 
  2402  0893                     	;# 
  2403  0893                     	;# 
  2404  0893                     	;# 
  2405  0893                     	;# 
  2406  0893                     	;# 
  2407  0893                     	;# 
  2408  0894                     	;# 
  2409  0894                     	;# 
  2410  0894                     	;# 
  2411  0895                     	;# 
  2412  0895                     	;# 
  2413  0895                     	;# 
  2414  0896                     	;# 
  2415  0896                     	;# 
  2416  0896                     	;# 
  2417  089B                     	;# 
  2418  0911                     	;# 
  2419  0912                     	;# 
  2420  0913                     	;# 
  2421  0914                     	;# 
  2422  0915                     	;# 
  2423  0916                     	;# 
  2424  0918                     	;# 
  2425  0919                     	;# 
  2426  091A                     	;# 
  2427  091B                     	;# 
  2428  091C                     	;# 
  2429  091D                     	;# 
  2430  091E                     	;# 
  2431  091F                     	;# 
  2432  0E0F                     	;# 
  2433  0E10                     	;# 
  2434  0E11                     	;# 
  2435  0E12                     	;# 
  2436  0E13                     	;# 
  2437  0E14                     	;# 
  2438  0E15                     	;# 
  2439  0E16                     	;# 
  2440  0E17                     	;# 
  2441  0E18                     	;# 
  2442  0E19                     	;# 
  2443  0E1A                     	;# 
  2444  0E1B                     	;# 
  2445  0E1C                     	;# 
  2446  0E1D                     	;# 
  2447  0E1E                     	;# 
  2448  0E1F                     	;# 
  2449  0E20                     	;# 
  2450  0E21                     	;# 
  2451  0E22                     	;# 
  2452  0E24                     	;# 
  2453  0E25                     	;# 
  2454  0E28                     	;# 
  2455  0E29                     	;# 
  2456  0E2A                     	;# 
  2457  0E2B                     	;# 
  2458  0E2C                     	;# 
  2459  0E2D                     	;# 
  2460  0E2E                     	;# 
  2461  0E2F                     	;# 
  2462  0E90                     	;# 
  2463  0E91                     	;# 
  2464  0E92                     	;# 
  2465  0E94                     	;# 
  2466  0E95                     	;# 
  2467  0E9C                     	;# 
  2468  0E9D                     	;# 
  2469  0E9E                     	;# 
  2470  0E9F                     	;# 
  2471  0EA0                     	;# 
  2472  0EA1                     	;# 
  2473  0EA2                     	;# 
  2474  0EA3                     	;# 
  2475  0EA4                     	;# 
  2476  0EA5                     	;# 
  2477  0EA6                     	;# 
  2478  0EA7                     	;# 
  2479  0F0F                     	;# 
  2480  0F10                     	;# 
  2481  0F11                     	;# 
  2482  0F12                     	;# 
  2483  0F13                     	;# 
  2484  0F14                     	;# 
  2485  0F15                     	;# 
  2486  0F16                     	;# 
  2487  0F17                     	;# 
  2488  0F18                     	;# 
  2489  0F19                     	;# 
  2490  0F1A                     	;# 
  2491  0F1B                     	;# 
  2492  0F1C                     	;# 
  2493  0F1D                     	;# 
  2494  0F1E                     	;# 
  2495  0F1F                     	;# 
  2496  0F20                     	;# 
  2497  0F21                     	;# 
  2498  0F22                     	;# 
  2499  0F23                     	;# 
  2500  0F24                     	;# 
  2501  0F25                     	;# 
  2502  0F26                     	;# 
  2503  0F27                     	;# 
  2504  0F28                     	;# 
  2505  0F29                     	;# 
  2506  0F2A                     	;# 
  2507  0F2B                     	;# 
  2508  0F2C                     	;# 
  2509  0F2D                     	;# 
  2510  0F2E                     	;# 
  2511  0F2F                     	;# 
  2512  0F30                     	;# 
  2513  0F31                     	;# 
  2514  0F32                     	;# 
  2515  0F33                     	;# 
  2516  0F34                     	;# 
  2517  0F35                     	;# 
  2518  0F36                     	;# 
  2519  0F37                     	;# 
  2520  0FE4                     	;# 
  2521  0FE5                     	;# 
  2522  0FE6                     	;# 
  2523  0FE7                     	;# 
  2524  0FE8                     	;# 
  2525  0FE9                     	;# 
  2526  0FEA                     	;# 
  2527  0FEB                     	;# 
  2528  0FED                     	;# 
  2529  0FEE                     	;# 
  2530  0FEF                     	;# 
  2531  0000                     	;# 
  2532  0001                     	;# 
  2533  0002                     	;# 
  2534  0003                     	;# 
  2535  0004                     	;# 
  2536  0005                     	;# 
  2537  0006                     	;# 
  2538  0007                     	;# 
  2539  0008                     	;# 
  2540  0009                     	;# 
  2541  000A                     	;# 
  2542  000B                     	;# 
  2543  000C                     	;# 
  2544  000D                     	;# 
  2545  000E                     	;# 
  2546  0010                     	;# 
  2547  0011                     	;# 
  2548  0012                     	;# 
  2549  0013                     	;# 
  2550  0014                     	;# 
  2551  0015                     	;# 
  2552  0015                     	;# 
  2553  0016                     	;# 
  2554  0016                     	;# 
  2555  0017                     	;# 
  2556  0018                     	;# 
  2557  0019                     	;# 
  2558  0019                     	;# 
  2559  001A                     	;# 
  2560  001B                     	;# 
  2561  001C                     	;# 
  2562  001D                     	;# 
  2563  001E                     	;# 
  2564  001F                     	;# 
  2565  008C                     	;# 
  2566  008D                     	;# 
  2567  008E                     	;# 
  2568  0090                     	;# 
  2569  0091                     	;# 
  2570  0092                     	;# 
  2571  0093                     	;# 
  2572  0094                     	;# 
  2573  0097                     	;# 
  2574  009B                     	;# 
  2575  009B                     	;# 
  2576  009C                     	;# 
  2577  009D                     	;# 
  2578  009E                     	;# 
  2579  009F                     	;# 
  2580  010C                     	;# 
  2581  010D                     	;# 
  2582  010E                     	;# 
  2583  0111                     	;# 
  2584  0112                     	;# 
  2585  0113                     	;# 
  2586  0114                     	;# 
  2587  0115                     	;# 
  2588  0116                     	;# 
  2589  0117                     	;# 
  2590  0118                     	;# 
  2591  0119                     	;# 
  2592  018C                     	;# 
  2593  018D                     	;# 
  2594  018E                     	;# 
  2595  0197                     	;# 
  2596  0199                     	;# 
  2597  0199                     	;# 
  2598  0199                     	;# 
  2599  019A                     	;# 
  2600  019A                     	;# 
  2601  019A                     	;# 
  2602  019B                     	;# 
  2603  019B                     	;# 
  2604  019B                     	;# 
  2605  019B                     	;# 
  2606  019B                     	;# 
  2607  019C                     	;# 
  2608  019C                     	;# 
  2609  019C                     	;# 
  2610  019D                     	;# 
  2611  019D                     	;# 
  2612  019D                     	;# 
  2613  019E                     	;# 
  2614  019E                     	;# 
  2615  019E                     	;# 
  2616  019F                     	;# 
  2617  019F                     	;# 
  2618  019F                     	;# 
  2619  019F                     	;# 
  2620  019F                     	;# 
  2621  020C                     	;# 
  2622  020D                     	;# 
  2623  020E                     	;# 
  2624  0211                     	;# 
  2625  0211                     	;# 
  2626  0212                     	;# 
  2627  0212                     	;# 
  2628  0213                     	;# 
  2629  0213                     	;# 
  2630  0214                     	;# 
  2631  0214                     	;# 
  2632  0215                     	;# 
  2633  0215                     	;# 
  2634  0215                     	;# 
  2635  0215                     	;# 
  2636  0216                     	;# 
  2637  0216                     	;# 
  2638  0217                     	;# 
  2639  0217                     	;# 
  2640  0219                     	;# 
  2641  021A                     	;# 
  2642  021B                     	;# 
  2643  021C                     	;# 
  2644  021D                     	;# 
  2645  021D                     	;# 
  2646  021E                     	;# 
  2647  021F                     	;# 
  2648  028C                     	;# 
  2649  028D                     	;# 
  2650  028E                     	;# 
  2651  0291                     	;# 
  2652  0291                     	;# 
  2653  0292                     	;# 
  2654  0293                     	;# 
  2655  0294                     	;# 
  2656  0295                     	;# 
  2657  0295                     	;# 
  2658  0296                     	;# 
  2659  0297                     	;# 
  2660  0298                     	;# 
  2661  029F                     	;# 
  2662  030C                     	;# 
  2663  030D                     	;# 
  2664  030E                     	;# 
  2665  0311                     	;# 
  2666  0311                     	;# 
  2667  0312                     	;# 
  2668  0313                     	;# 
  2669  0314                     	;# 
  2670  0315                     	;# 
  2671  0315                     	;# 
  2672  0316                     	;# 
  2673  0317                     	;# 
  2674  0318                     	;# 
  2675  038C                     	;# 
  2676  038D                     	;# 
  2677  038E                     	;# 
  2678  0391                     	;# 
  2679  0392                     	;# 
  2680  0393                     	;# 
  2681  0394                     	;# 
  2682  0395                     	;# 
  2683  0396                     	;# 
  2684  0397                     	;# 
  2685  0398                     	;# 
  2686  0399                     	;# 
  2687  039A                     	;# 
  2688  039C                     	;# 
  2689  039D                     	;# 
  2690  039E                     	;# 
  2691  039F                     	;# 
  2692  0411                     	;# 
  2693  0411                     	;# 
  2694  0412                     	;# 
  2695  0413                     	;# 
  2696  0414                     	;# 
  2697  0415                     	;# 
  2698  0416                     	;# 
  2699  0417                     	;# 
  2700  0418                     	;# 
  2701  0418                     	;# 
  2702  0419                     	;# 
  2703  041A                     	;# 
  2704  041B                     	;# 
  2705  041C                     	;# 
  2706  041D                     	;# 
  2707  041E                     	;# 
  2708  041F                     	;# 
  2709  0498                     	;# 
  2710  0498                     	;# 
  2711  0499                     	;# 
  2712  049A                     	;# 
  2713  049B                     	;# 
  2714  049B                     	;# 
  2715  049C                     	;# 
  2716  049D                     	;# 
  2717  049E                     	;# 
  2718  049F                     	;# 
  2719  0617                     	;# 
  2720  0618                     	;# 
  2721  0619                     	;# 
  2722  0619                     	;# 
  2723  061A                     	;# 
  2724  061B                     	;# 
  2725  061C                     	;# 
  2726  061C                     	;# 
  2727  061F                     	;# 
  2728  0691                     	;# 
  2729  0692                     	;# 
  2730  0693                     	;# 
  2731  0694                     	;# 
  2732  0695                     	;# 
  2733  0696                     	;# 
  2734  0697                     	;# 
  2735  0698                     	;# 
  2736  0699                     	;# 
  2737  0711                     	;# 
  2738  0712                     	;# 
  2739  0713                     	;# 
  2740  0714                     	;# 
  2741  0715                     	;# 
  2742  0716                     	;# 
  2743  0717                     	;# 
  2744  0718                     	;# 
  2745  0719                     	;# 
  2746  0891                     	;# 
  2747  0891                     	;# 
  2748  0891                     	;# 
  2749  0891                     	;# 
  2750  0891                     	;# 
  2751  0891                     	;# 
  2752  0892                     	;# 
  2753  0892                     	;# 
  2754  0892                     	;# 
  2755  0893                     	;# 
  2756  0893                     	;# 
  2757  0893                     	;# 
  2758  0893                     	;# 
  2759  0893                     	;# 
  2760  0893                     	;# 
  2761  0894                     	;# 
  2762  0894                     	;# 
  2763  0894                     	;# 
  2764  0895                     	;# 
  2765  0895                     	;# 
  2766  0895                     	;# 
  2767  0896                     	;# 
  2768  0896                     	;# 
  2769  0896                     	;# 
  2770  089B                     	;# 
  2771  0911                     	;# 
  2772  0912                     	;# 
  2773  0913                     	;# 
  2774  0914                     	;# 
  2775  0915                     	;# 
  2776  0916                     	;# 
  2777  0918                     	;# 
  2778  0919                     	;# 
  2779  091A                     	;# 
  2780  091B                     	;# 
  2781  091C                     	;# 
  2782  091D                     	;# 
  2783  091E                     	;# 
  2784  091F                     	;# 
  2785  0E0F                     	;# 
  2786  0E10                     	;# 
  2787  0E11                     	;# 
  2788  0E12                     	;# 
  2789  0E13                     	;# 
  2790  0E14                     	;# 
  2791  0E15                     	;# 
  2792  0E16                     	;# 
  2793  0E17                     	;# 
  2794  0E18                     	;# 
  2795  0E19                     	;# 
  2796  0E1A                     	;# 
  2797  0E1B                     	;# 
  2798  0E1C                     	;# 
  2799  0E1D                     	;# 
  2800  0E1E                     	;# 
  2801  0E1F                     	;# 
  2802  0E20                     	;# 
  2803  0E21                     	;# 
  2804  0E22                     	;# 
  2805  0E24                     	;# 
  2806  0E25                     	;# 
  2807  0E28                     	;# 
  2808  0E29                     	;# 
  2809  0E2A                     	;# 
  2810  0E2B                     	;# 
  2811  0E2C                     	;# 
  2812  0E2D                     	;# 
  2813  0E2E                     	;# 
  2814  0E2F                     	;# 
  2815  0E90                     	;# 
  2816  0E91                     	;# 
  2817  0E92                     	;# 
  2818  0E94                     	;# 
  2819  0E95                     	;# 
  2820  0E9C                     	;# 
  2821  0E9D                     	;# 
  2822  0E9E                     	;# 
  2823  0E9F                     	;# 
  2824  0EA0                     	;# 
  2825  0EA1                     	;# 
  2826  0EA2                     	;# 
  2827  0EA3                     	;# 
  2828  0EA4                     	;# 
  2829  0EA5                     	;# 
  2830  0EA6                     	;# 
  2831  0EA7                     	;# 
  2832  0F0F                     	;# 
  2833  0F10                     	;# 
  2834  0F11                     	;# 
  2835  0F12                     	;# 
  2836  0F13                     	;# 
  2837  0F14                     	;# 
  2838  0F15                     	;# 
  2839  0F16                     	;# 
  2840  0F17                     	;# 
  2841  0F18                     	;# 
  2842  0F19                     	;# 
  2843  0F1A                     	;# 
  2844  0F1B                     	;# 
  2845  0F1C                     	;# 
  2846  0F1D                     	;# 
  2847  0F1E                     	;# 
  2848  0F1F                     	;# 
  2849  0F20                     	;# 
  2850  0F21                     	;# 
  2851  0F22                     	;# 
  2852  0F23                     	;# 
  2853  0F24                     	;# 
  2854  0F25                     	;# 
  2855  0F26                     	;# 
  2856  0F27                     	;# 
  2857  0F28                     	;# 
  2858  0F29                     	;# 
  2859  0F2A                     	;# 
  2860  0F2B                     	;# 
  2861  0F2C                     	;# 
  2862  0F2D                     	;# 
  2863  0F2E                     	;# 
  2864  0F2F                     	;# 
  2865  0F30                     	;# 
  2866  0F31                     	;# 
  2867  0F32                     	;# 
  2868  0F33                     	;# 
  2869  0F34                     	;# 
  2870  0F35                     	;# 
  2871  0F36                     	;# 
  2872  0F37                     	;# 
  2873  0FE4                     	;# 
  2874  0FE5                     	;# 
  2875  0FE6                     	;# 
  2876  0FE7                     	;# 
  2877  0FE8                     	;# 
  2878  0FE9                     	;# 
  2879  0FEA                     	;# 
  2880  0FEB                     	;# 
  2881  0FED                     	;# 
  2882  0FEE                     	;# 
  2883  0FEF                     	;# 
  2884  0000                     	;# 
  2885  0001                     	;# 
  2886  0002                     	;# 
  2887  0003                     	;# 
  2888  0004                     	;# 
  2889  0005                     	;# 
  2890  0006                     	;# 
  2891  0007                     	;# 
  2892  0008                     	;# 
  2893  0009                     	;# 
  2894  000A                     	;# 
  2895  000B                     	;# 
  2896  000C                     	;# 
  2897  000D                     	;# 
  2898  000E                     	;# 
  2899  0010                     	;# 
  2900  0011                     	;# 
  2901  0012                     	;# 
  2902  0013                     	;# 
  2903  0014                     	;# 
  2904  0015                     	;# 
  2905  0015                     	;# 
  2906  0016                     	;# 
  2907  0016                     	;# 
  2908  0017                     	;# 
  2909  0018                     	;# 
  2910  0019                     	;# 
  2911  0019                     	;# 
  2912  001A                     	;# 
  2913  001B                     	;# 
  2914  001C                     	;# 
  2915  001D                     	;# 
  2916  001E                     	;# 
  2917  001F                     	;# 
  2918  008C                     	;# 
  2919  008D                     	;# 
  2920  008E                     	;# 
  2921  0090                     	;# 
  2922  0091                     	;# 
  2923  0092                     	;# 
  2924  0093                     	;# 
  2925  0094                     	;# 
  2926  0097                     	;# 
  2927  009B                     	;# 
  2928  009B                     	;# 
  2929  009C                     	;# 
  2930  009D                     	;# 
  2931  009E                     	;# 
  2932  009F                     	;# 
  2933  010C                     	;# 
  2934  010D                     	;# 
  2935  010E                     	;# 
  2936  0111                     	;# 
  2937  0112                     	;# 
  2938  0113                     	;# 
  2939  0114                     	;# 
  2940  0115                     	;# 
  2941  0116                     	;# 
  2942  0117                     	;# 
  2943  0118                     	;# 
  2944  0119                     	;# 
  2945  018C                     	;# 
  2946  018D                     	;# 
  2947  018E                     	;# 
  2948  0197                     	;# 
  2949  0199                     	;# 
  2950  0199                     	;# 
  2951  0199                     	;# 
  2952  019A                     	;# 
  2953  019A                     	;# 
  2954  019A                     	;# 
  2955  019B                     	;# 
  2956  019B                     	;# 
  2957  019B                     	;# 
  2958  019B                     	;# 
  2959  019B                     	;# 
  2960  019C                     	;# 
  2961  019C                     	;# 
  2962  019C                     	;# 
  2963  019D                     	;# 
  2964  019D                     	;# 
  2965  019D                     	;# 
  2966  019E                     	;# 
  2967  019E                     	;# 
  2968  019E                     	;# 
  2969  019F                     	;# 
  2970  019F                     	;# 
  2971  019F                     	;# 
  2972  019F                     	;# 
  2973  019F                     	;# 
  2974  020C                     	;# 
  2975  020D                     	;# 
  2976  020E                     	;# 
  2977  0211                     	;# 
  2978  0211                     	;# 
  2979  0212                     	;# 
  2980  0212                     	;# 
  2981  0213                     	;# 
  2982  0213                     	;# 
  2983  0214                     	;# 
  2984  0214                     	;# 
  2985  0215                     	;# 
  2986  0215                     	;# 
  2987  0215                     	;# 
  2988  0215                     	;# 
  2989  0216                     	;# 
  2990  0216                     	;# 
  2991  0217                     	;# 
  2992  0217                     	;# 
  2993  0219                     	;# 
  2994  021A                     	;# 
  2995  021B                     	;# 
  2996  021C                     	;# 
  2997  021D                     	;# 
  2998  021D                     	;# 
  2999  021E                     	;# 
  3000  021F                     	;# 
  3001  028C                     	;# 
  3002  028D                     	;# 
  3003  028E                     	;# 
  3004  0291                     	;# 
  3005  0291                     	;# 
  3006  0292                     	;# 
  3007  0293                     	;# 
  3008  0294                     	;# 
  3009  0295                     	;# 
  3010  0295                     	;# 
  3011  0296                     	;# 
  3012  0297                     	;# 
  3013  0298                     	;# 
  3014  029F                     	;# 
  3015  030C                     	;# 
  3016  030D                     	;# 
  3017  030E                     	;# 
  3018  0311                     	;# 
  3019  0311                     	;# 
  3020  0312                     	;# 
  3021  0313                     	;# 
  3022  0314                     	;# 
  3023  0315                     	;# 
  3024  0315                     	;# 
  3025  0316                     	;# 
  3026  0317                     	;# 
  3027  0318                     	;# 
  3028  038C                     	;# 
  3029  038D                     	;# 
  3030  038E                     	;# 
  3031  0391                     	;# 
  3032  0392                     	;# 
  3033  0393                     	;# 
  3034  0394                     	;# 
  3035  0395                     	;# 
  3036  0396                     	;# 
  3037  0397                     	;# 
  3038  0398                     	;# 
  3039  0399                     	;# 
  3040  039A                     	;# 
  3041  039C                     	;# 
  3042  039D                     	;# 
  3043  039E                     	;# 
  3044  039F                     	;# 
  3045  0411                     	;# 
  3046  0411                     	;# 
  3047  0412                     	;# 
  3048  0413                     	;# 
  3049  0414                     	;# 
  3050  0415                     	;# 
  3051  0416                     	;# 
  3052  0417                     	;# 
  3053  0418                     	;# 
  3054  0418                     	;# 
  3055  0419                     	;# 
  3056  041A                     	;# 
  3057  041B                     	;# 
  3058  041C                     	;# 
  3059  041D                     	;# 
  3060  041E                     	;# 
  3061  041F                     	;# 
  3062  0498                     	;# 
  3063  0498                     	;# 
  3064  0499                     	;# 
  3065  049A                     	;# 
  3066  049B                     	;# 
  3067  049B                     	;# 
  3068  049C                     	;# 
  3069  049D                     	;# 
  3070  049E                     	;# 
  3071  049F                     	;# 
  3072  0617                     	;# 
  3073  0618                     	;# 
  3074  0619                     	;# 
  3075  0619                     	;# 
  3076  061A                     	;# 
  3077  061B                     	;# 
  3078  061C                     	;# 
  3079  061C                     	;# 
  3080  061F                     	;# 
  3081  0691                     	;# 
  3082  0692                     	;# 
  3083  0693                     	;# 
  3084  0694                     	;# 
  3085  0695                     	;# 
  3086  0696                     	;# 
  3087  0697                     	;# 
  3088  0698                     	;# 
  3089  0699                     	;# 
  3090  0711                     	;# 
  3091  0712                     	;# 
  3092  0713                     	;# 
  3093  0714                     	;# 
  3094  0715                     	;# 
  3095  0716                     	;# 
  3096  0717                     	;# 
  3097  0718                     	;# 
  3098  0719                     	;# 
  3099  0891                     	;# 
  3100  0891                     	;# 
  3101  0891                     	;# 
  3102  0891                     	;# 
  3103  0891                     	;# 
  3104  0891                     	;# 
  3105  0892                     	;# 
  3106  0892                     	;# 
  3107  0892                     	;# 
  3108  0893                     	;# 
  3109  0893                     	;# 
  3110  0893                     	;# 
  3111  0893                     	;# 
  3112  0893                     	;# 
  3113  0893                     	;# 
  3114  0894                     	;# 
  3115  0894                     	;# 
  3116  0894                     	;# 
  3117  0895                     	;# 
  3118  0895                     	;# 
  3119  0895                     	;# 
  3120  0896                     	;# 
  3121  0896                     	;# 
  3122  0896                     	;# 
  3123  089B                     	;# 
  3124  0911                     	;# 
  3125  0912                     	;# 
  3126  0913                     	;# 
  3127  0914                     	;# 
  3128  0915                     	;# 
  3129  0916                     	;# 
  3130  0918                     	;# 
  3131  0919                     	;# 
  3132  091A                     	;# 
  3133  091B                     	;# 
  3134  091C                     	;# 
  3135  091D                     	;# 
  3136  091E                     	;# 
  3137  091F                     	;# 
  3138  0E0F                     	;# 
  3139  0E10                     	;# 
  3140  0E11                     	;# 
  3141  0E12                     	;# 
  3142  0E13                     	;# 
  3143  0E14                     	;# 
  3144  0E15                     	;# 
  3145  0E16                     	;# 
  3146  0E17                     	;# 
  3147  0E18                     	;# 
  3148  0E19                     	;# 
  3149  0E1A                     	;# 
  3150  0E1B                     	;# 
  3151  0E1C                     	;# 
  3152  0E1D                     	;# 
  3153  0E1E                     	;# 
  3154  0E1F                     	;# 
  3155  0E20                     	;# 
  3156  0E21                     	;# 
  3157  0E22                     	;# 
  3158  0E24                     	;# 
  3159  0E25                     	;# 
  3160  0E28                     	;# 
  3161  0E29                     	;# 
  3162  0E2A                     	;# 
  3163  0E2B                     	;# 
  3164  0E2C                     	;# 
  3165  0E2D                     	;# 
  3166  0E2E                     	;# 
  3167  0E2F                     	;# 
  3168  0E90                     	;# 
  3169  0E91                     	;# 
  3170  0E92                     	;# 
  3171  0E94                     	;# 
  3172  0E95                     	;# 
  3173  0E9C                     	;# 
  3174  0E9D                     	;# 
  3175  0E9E                     	;# 
  3176  0E9F                     	;# 
  3177  0EA0                     	;# 
  3178  0EA1                     	;# 
  3179  0EA2                     	;# 
  3180  0EA3                     	;# 
  3181  0EA4                     	;# 
  3182  0EA5                     	;# 
  3183  0EA6                     	;# 
  3184  0EA7                     	;# 
  3185  0F0F                     	;# 
  3186  0F10                     	;# 
  3187  0F11                     	;# 
  3188  0F12                     	;# 
  3189  0F13                     	;# 
  3190  0F14                     	;# 
  3191  0F15                     	;# 
  3192  0F16                     	;# 
  3193  0F17                     	;# 
  3194  0F18                     	;# 
  3195  0F19                     	;# 
  3196  0F1A                     	;# 
  3197  0F1B                     	;# 
  3198  0F1C                     	;# 
  3199  0F1D                     	;# 
  3200  0F1E                     	;# 
  3201  0F1F                     	;# 
  3202  0F20                     	;# 
  3203  0F21                     	;# 
  3204  0F22                     	;# 
  3205  0F23                     	;# 
  3206  0F24                     	;# 
  3207  0F25                     	;# 
  3208  0F26                     	;# 
  3209  0F27                     	;# 
  3210  0F28                     	;# 
  3211  0F29                     	;# 
  3212  0F2A                     	;# 
  3213  0F2B                     	;# 
  3214  0F2C                     	;# 
  3215  0F2D                     	;# 
  3216  0F2E                     	;# 
  3217  0F2F                     	;# 
  3218  0F30                     	;# 
  3219  0F31                     	;# 
  3220  0F32                     	;# 
  3221  0F33                     	;# 
  3222  0F34                     	;# 
  3223  0F35                     	;# 
  3224  0F36                     	;# 
  3225  0F37                     	;# 
  3226  0FE4                     	;# 
  3227  0FE5                     	;# 
  3228  0FE6                     	;# 
  3229  0FE7                     	;# 
  3230  0FE8                     	;# 
  3231  0FE9                     	;# 
  3232  0FEA                     	;# 
  3233  0FEB                     	;# 
  3234  0FED                     	;# 
  3235  0FEE                     	;# 
  3236  0FEF                     	;# 
  3237  0000                     	;# 
  3238  0001                     	;# 
  3239  0002                     	;# 
  3240  0003                     	;# 
  3241  0004                     	;# 
  3242  0005                     	;# 
  3243  0006                     	;# 
  3244  0007                     	;# 
  3245  0008                     	;# 
  3246  0009                     	;# 
  3247  000A                     	;# 
  3248  000B                     	;# 
  3249  000C                     	;# 
  3250  000D                     	;# 
  3251  000E                     	;# 
  3252  0010                     	;# 
  3253  0011                     	;# 
  3254  0012                     	;# 
  3255  0013                     	;# 
  3256  0014                     	;# 
  3257  0015                     	;# 
  3258  0015                     	;# 
  3259  0016                     	;# 
  3260  0016                     	;# 
  3261  0017                     	;# 
  3262  0018                     	;# 
  3263  0019                     	;# 
  3264  0019                     	;# 
  3265  001A                     	;# 
  3266  001B                     	;# 
  3267  001C                     	;# 
  3268  001D                     	;# 
  3269  001E                     	;# 
  3270  001F                     	;# 
  3271  008C                     	;# 
  3272  008D                     	;# 
  3273  008E                     	;# 
  3274  0090                     	;# 
  3275  0091                     	;# 
  3276  0092                     	;# 
  3277  0093                     	;# 
  3278  0094                     	;# 
  3279  0097                     	;# 
  3280  009B                     	;# 
  3281  009B                     	;# 
  3282  009C                     	;# 
  3283  009D                     	;# 
  3284  009E                     	;# 
  3285  009F                     	;# 
  3286  010C                     	;# 
  3287  010D                     	;# 
  3288  010E                     	;# 
  3289  0111                     	;# 
  3290  0112                     	;# 
  3291  0113                     	;# 
  3292  0114                     	;# 
  3293  0115                     	;# 
  3294  0116                     	;# 
  3295  0117                     	;# 
  3296  0118                     	;# 
  3297  0119                     	;# 
  3298  018C                     	;# 
  3299  018D                     	;# 
  3300  018E                     	;# 
  3301  0197                     	;# 
  3302  0199                     	;# 
  3303  0199                     	;# 
  3304  0199                     	;# 
  3305  019A                     	;# 
  3306  019A                     	;# 
  3307  019A                     	;# 
  3308  019B                     	;# 
  3309  019B                     	;# 
  3310  019B                     	;# 
  3311  019B                     	;# 
  3312  019B                     	;# 
  3313  019C                     	;# 
  3314  019C                     	;# 
  3315  019C                     	;# 
  3316  019D                     	;# 
  3317  019D                     	;# 
  3318  019D                     	;# 
  3319  019E                     	;# 
  3320  019E                     	;# 
  3321  019E                     	;# 
  3322  019F                     	;# 
  3323  019F                     	;# 
  3324  019F                     	;# 
  3325  019F                     	;# 
  3326  019F                     	;# 
  3327  020C                     	;# 
  3328  020D                     	;# 
  3329  020E                     	;# 
  3330  0211                     	;# 
  3331  0211                     	;# 
  3332  0212                     	;# 
  3333  0212                     	;# 
  3334  0213                     	;# 
  3335  0213                     	;# 
  3336  0214                     	;# 
  3337  0214                     	;# 
  3338  0215                     	;# 
  3339  0215                     	;# 
  3340  0215                     	;# 
  3341  0215                     	;# 
  3342  0216                     	;# 
  3343  0216                     	;# 
  3344  0217                     	;# 
  3345  0217                     	;# 
  3346  0219                     	;# 
  3347  021A                     	;# 
  3348  021B                     	;# 
  3349  021C                     	;# 
  3350  021D                     	;# 
  3351  021D                     	;# 
  3352  021E                     	;# 
  3353  021F                     	;# 
  3354  028C                     	;# 
  3355  028D                     	;# 
  3356  028E                     	;# 
  3357  0291                     	;# 
  3358  0291                     	;# 
  3359  0292                     	;# 
  3360  0293                     	;# 
  3361  0294                     	;# 
  3362  0295                     	;# 
  3363  0295                     	;# 
  3364  0296                     	;# 
  3365  0297                     	;# 
  3366  0298                     	;# 
  3367  029F                     	;# 
  3368  030C                     	;# 
  3369  030D                     	;# 
  3370  030E                     	;# 
  3371  0311                     	;# 
  3372  0311                     	;# 
  3373  0312                     	;# 
  3374  0313                     	;# 
  3375  0314                     	;# 
  3376  0315                     	;# 
  3377  0315                     	;# 
  3378  0316                     	;# 
  3379  0317                     	;# 
  3380  0318                     	;# 
  3381  038C                     	;# 
  3382  038D                     	;# 
  3383  038E                     	;# 
  3384  0391                     	;# 
  3385  0392                     	;# 
  3386  0393                     	;# 
  3387  0394                     	;# 
  3388  0395                     	;# 
  3389  0396                     	;# 
  3390  0397                     	;# 
  3391  0398                     	;# 
  3392  0399                     	;# 
  3393  039A                     	;# 
  3394  039C                     	;# 
  3395  039D                     	;# 
  3396  039E                     	;# 
  3397  039F                     	;# 
  3398  0411                     	;# 
  3399  0411                     	;# 
  3400  0412                     	;# 
  3401  0413                     	;# 
  3402  0414                     	;# 
  3403  0415                     	;# 
  3404  0416                     	;# 
  3405  0417                     	;# 
  3406  0418                     	;# 
  3407  0418                     	;# 
  3408  0419                     	;# 
  3409  041A                     	;# 
  3410  041B                     	;# 
  3411  041C                     	;# 
  3412  041D                     	;# 
  3413  041E                     	;# 
  3414  041F                     	;# 
  3415  0498                     	;# 
  3416  0498                     	;# 
  3417  0499                     	;# 
  3418  049A                     	;# 
  3419  049B                     	;# 
  3420  049B                     	;# 
  3421  049C                     	;# 
  3422  049D                     	;# 
  3423  049E                     	;# 
  3424  049F                     	;# 
  3425  0617                     	;# 
  3426  0618                     	;# 
  3427  0619                     	;# 
  3428  0619                     	;# 
  3429  061A                     	;# 
  3430  061B                     	;# 
  3431  061C                     	;# 
  3432  061C                     	;# 
  3433  061F                     	;# 
  3434  0691                     	;# 
  3435  0692                     	;# 
  3436  0693                     	;# 
  3437  0694                     	;# 
  3438  0695                     	;# 
  3439  0696                     	;# 
  3440  0697                     	;# 
  3441  0698                     	;# 
  3442  0699                     	;# 
  3443  0711                     	;# 
  3444  0712                     	;# 
  3445  0713                     	;# 
  3446  0714                     	;# 
  3447  0715                     	;# 
  3448  0716                     	;# 
  3449  0717                     	;# 
  3450  0718                     	;# 
  3451  0719                     	;# 
  3452  0891                     	;# 
  3453  0891                     	;# 
  3454  0891                     	;# 
  3455  0891                     	;# 
  3456  0891                     	;# 
  3457  0891                     	;# 
  3458  0892                     	;# 
  3459  0892                     	;# 
  3460  0892                     	;# 
  3461  0893                     	;# 
  3462  0893                     	;# 
  3463  0893                     	;# 
  3464  0893                     	;# 
  3465  0893                     	;# 
  3466  0893                     	;# 
  3467  0894                     	;# 
  3468  0894                     	;# 
  3469  0894                     	;# 
  3470  0895                     	;# 
  3471  0895                     	;# 
  3472  0895                     	;# 
  3473  0896                     	;# 
  3474  0896                     	;# 
  3475  0896                     	;# 
  3476  089B                     	;# 
  3477  0911                     	;# 
  3478  0912                     	;# 
  3479  0913                     	;# 
  3480  0914                     	;# 
  3481  0915                     	;# 
  3482  0916                     	;# 
  3483  0918                     	;# 
  3484  0919                     	;# 
  3485  091A                     	;# 
  3486  091B                     	;# 
  3487  091C                     	;# 
  3488  091D                     	;# 
  3489  091E                     	;# 
  3490  091F                     	;# 
  3491  0E0F                     	;# 
  3492  0E10                     	;# 
  3493  0E11                     	;# 
  3494  0E12                     	;# 
  3495  0E13                     	;# 
  3496  0E14                     	;# 
  3497  0E15                     	;# 
  3498  0E16                     	;# 
  3499  0E17                     	;# 
  3500  0E18                     	;# 
  3501  0E19                     	;# 
  3502  0E1A                     	;# 
  3503  0E1B                     	;# 
  3504  0E1C                     	;# 
  3505  0E1D                     	;# 
  3506  0E1E                     	;# 
  3507  0E1F                     	;# 
  3508  0E20                     	;# 
  3509  0E21                     	;# 
  3510  0E22                     	;# 
  3511  0E24                     	;# 
  3512  0E25                     	;# 
  3513  0E28                     	;# 
  3514  0E29                     	;# 
  3515  0E2A                     	;# 
  3516  0E2B                     	;# 
  3517  0E2C                     	;# 
  3518  0E2D                     	;# 
  3519  0E2E                     	;# 
  3520  0E2F                     	;# 
  3521  0E90                     	;# 
  3522  0E91                     	;# 
  3523  0E92                     	;# 
  3524  0E94                     	;# 
  3525  0E95                     	;# 
  3526  0E9C                     	;# 
  3527  0E9D                     	;# 
  3528  0E9E                     	;# 
  3529  0E9F                     	;# 
  3530  0EA0                     	;# 
  3531  0EA1                     	;# 
  3532  0EA2                     	;# 
  3533  0EA3                     	;# 
  3534  0EA4                     	;# 
  3535  0EA5                     	;# 
  3536  0EA6                     	;# 
  3537  0EA7                     	;# 
  3538  0F0F                     	;# 
  3539  0F10                     	;# 
  3540  0F11                     	;# 
  3541  0F12                     	;# 
  3542  0F13                     	;# 
  3543  0F14                     	;# 
  3544  0F15                     	;# 
  3545  0F16                     	;# 
  3546  0F17                     	;# 
  3547  0F18                     	;# 
  3548  0F19                     	;# 
  3549  0F1A                     	;# 
  3550  0F1B                     	;# 
  3551  0F1C                     	;# 
  3552  0F1D                     	;# 
  3553  0F1E                     	;# 
  3554  0F1F                     	;# 
  3555  0F20                     	;# 
  3556  0F21                     	;# 
  3557  0F22                     	;# 
  3558  0F23                     	;# 
  3559  0F24                     	;# 
  3560  0F25                     	;# 
  3561  0F26                     	;# 
  3562  0F27                     	;# 
  3563  0F28                     	;# 
  3564  0F29                     	;# 
  3565  0F2A                     	;# 
  3566  0F2B                     	;# 
  3567  0F2C                     	;# 
  3568  0F2D                     	;# 
  3569  0F2E                     	;# 
  3570  0F2F                     	;# 
  3571  0F30                     	;# 
  3572  0F31                     	;# 
  3573  0F32                     	;# 
  3574  0F33                     	;# 
  3575  0F34                     	;# 
  3576  0F35                     	;# 
  3577  0F36                     	;# 
  3578  0F37                     	;# 
  3579  0FE4                     	;# 
  3580  0FE5                     	;# 
  3581  0FE6                     	;# 
  3582  0FE7                     	;# 
  3583  0FE8                     	;# 
  3584  0FE9                     	;# 
  3585  0FEA                     	;# 
  3586  0FEB                     	;# 
  3587  0FED                     	;# 
  3588  0FEE                     	;# 
  3589  0FEF                     	;# 
  3590  0000                     	;# 
  3591  0001                     	;# 
  3592  0002                     	;# 
  3593  0003                     	;# 
  3594  0004                     	;# 
  3595  0005                     	;# 
  3596  0006                     	;# 
  3597  0007                     	;# 
  3598  0008                     	;# 
  3599  0009                     	;# 
  3600  000A                     	;# 
  3601  000B                     	;# 
  3602  000C                     	;# 
  3603  000D                     	;# 
  3604  000E                     	;# 
  3605  0010                     	;# 
  3606  0011                     	;# 
  3607  0012                     	;# 
  3608  0013                     	;# 
  3609  0014                     	;# 
  3610  0015                     	;# 
  3611  0015                     	;# 
  3612  0016                     	;# 
  3613  0016                     	;# 
  3614  0017                     	;# 
  3615  0018                     	;# 
  3616  0019                     	;# 
  3617  0019                     	;# 
  3618  001A                     	;# 
  3619  001B                     	;# 
  3620  001C                     	;# 
  3621  001D                     	;# 
  3622  001E                     	;# 
  3623  001F                     	;# 
  3624  008C                     	;# 
  3625  008D                     	;# 
  3626  008E                     	;# 
  3627  0090                     	;# 
  3628  0091                     	;# 
  3629  0092                     	;# 
  3630  0093                     	;# 
  3631  0094                     	;# 
  3632  0097                     	;# 
  3633  009B                     	;# 
  3634  009B                     	;# 
  3635  009C                     	;# 
  3636  009D                     	;# 
  3637  009E                     	;# 
  3638  009F                     	;# 
  3639  010C                     	;# 
  3640  010D                     	;# 
  3641  010E                     	;# 
  3642  0111                     	;# 
  3643  0112                     	;# 
  3644  0113                     	;# 
  3645  0114                     	;# 
  3646  0115                     	;# 
  3647  0116                     	;# 
  3648  0117                     	;# 
  3649  0118                     	;# 
  3650  0119                     	;# 
  3651  018C                     	;# 
  3652  018D                     	;# 
  3653  018E                     	;# 
  3654  0197                     	;# 
  3655  0199                     	;# 
  3656  0199                     	;# 
  3657  0199                     	;# 
  3658  019A                     	;# 
  3659  019A                     	;# 
  3660  019A                     	;# 
  3661  019B                     	;# 
  3662  019B                     	;# 
  3663  019B                     	;# 
  3664  019B                     	;# 
  3665  019B                     	;# 
  3666  019C                     	;# 
  3667  019C                     	;# 
  3668  019C                     	;# 
  3669  019D                     	;# 
  3670  019D                     	;# 
  3671  019D                     	;# 
  3672  019E                     	;# 
  3673  019E                     	;# 
  3674  019E                     	;# 
  3675  019F                     	;# 
  3676  019F                     	;# 
  3677  019F                     	;# 
  3678  019F                     	;# 
  3679  019F                     	;# 
  3680  020C                     	;# 
  3681  020D                     	;# 
  3682  020E                     	;# 
  3683  0211                     	;# 
  3684  0211                     	;# 
  3685  0212                     	;# 
  3686  0212                     	;# 
  3687  0213                     	;# 
  3688  0213                     	;# 
  3689  0214                     	;# 
  3690  0214                     	;# 
  3691  0215                     	;# 
  3692  0215                     	;# 
  3693  0215                     	;# 
  3694  0215                     	;# 
  3695  0216                     	;# 
  3696  0216                     	;# 
  3697  0217                     	;# 
  3698  0217                     	;# 
  3699  0219                     	;# 
  3700  021A                     	;# 
  3701  021B                     	;# 
  3702  021C                     	;# 
  3703  021D                     	;# 
  3704  021D                     	;# 
  3705  021E                     	;# 
  3706  021F                     	;# 
  3707  028C                     	;# 
  3708  028D                     	;# 
  3709  028E                     	;# 
  3710  0291                     	;# 
  3711  0291                     	;# 
  3712  0292                     	;# 
  3713  0293                     	;# 
  3714  0294                     	;# 
  3715  0295                     	;# 
  3716  0295                     	;# 
  3717  0296                     	;# 
  3718  0297                     	;# 
  3719  0298                     	;# 
  3720  029F                     	;# 
  3721  030C                     	;# 
  3722  030D                     	;# 
  3723  030E                     	;# 
  3724  0311                     	;# 
  3725  0311                     	;# 
  3726  0312                     	;# 
  3727  0313                     	;# 
  3728  0314                     	;# 
  3729  0315                     	;# 
  3730  0315                     	;# 
  3731  0316                     	;# 
  3732  0317                     	;# 
  3733  0318                     	;# 
  3734  038C                     	;# 
  3735  038D                     	;# 
  3736  038E                     	;# 
  3737  0391                     	;# 
  3738  0392                     	;# 
  3739  0393                     	;# 
  3740  0394                     	;# 
  3741  0395                     	;# 
  3742  0396                     	;# 
  3743  0397                     	;# 
  3744  0398                     	;# 
  3745  0399                     	;# 
  3746  039A                     	;# 
  3747  039C                     	;# 
  3748  039D                     	;# 
  3749  039E                     	;# 
  3750  039F                     	;# 
  3751  0411                     	;# 
  3752  0411                     	;# 
  3753  0412                     	;# 
  3754  0413                     	;# 
  3755  0414                     	;# 
  3756  0415                     	;# 
  3757  0416                     	;# 
  3758  0417                     	;# 
  3759  0418                     	;# 
  3760  0418                     	;# 
  3761  0419                     	;# 
  3762  041A                     	;# 
  3763  041B                     	;# 
  3764  041C                     	;# 
  3765  041D                     	;# 
  3766  041E                     	;# 
  3767  041F                     	;# 
  3768  0498                     	;# 
  3769  0498                     	;# 
  3770  0499                     	;# 
  3771  049A                     	;# 
  3772  049B                     	;# 
  3773  049B                     	;# 
  3774  049C                     	;# 
  3775  049D                     	;# 
  3776  049E                     	;# 
  3777  049F                     	;# 
  3778  0617                     	;# 
  3779  0618                     	;# 
  3780  0619                     	;# 
  3781  0619                     	;# 
  3782  061A                     	;# 
  3783  061B                     	;# 
  3784  061C                     	;# 
  3785  061C                     	;# 
  3786  061F                     	;# 
  3787  0691                     	;# 
  3788  0692                     	;# 
  3789  0693                     	;# 
  3790  0694                     	;# 
  3791  0695                     	;# 
  3792  0696                     	;# 
  3793  0697                     	;# 
  3794  0698                     	;# 
  3795  0699                     	;# 
  3796  0711                     	;# 
  3797  0712                     	;# 
  3798  0713                     	;# 
  3799  0714                     	;# 
  3800  0715                     	;# 
  3801  0716                     	;# 
  3802  0717                     	;# 
  3803  0718                     	;# 
  3804  0719                     	;# 
  3805  0891                     	;# 
  3806  0891                     	;# 
  3807  0891                     	;# 
  3808  0891                     	;# 
  3809  0891                     	;# 
  3810  0891                     	;# 
  3811  0892                     	;# 
  3812  0892                     	;# 
  3813  0892                     	;# 
  3814  0893                     	;# 
  3815  0893                     	;# 
  3816  0893                     	;# 
  3817  0893                     	;# 
  3818  0893                     	;# 
  3819  0893                     	;# 
  3820  0894                     	;# 
  3821  0894                     	;# 
  3822  0894                     	;# 
  3823  0895                     	;# 
  3824  0895                     	;# 
  3825  0895                     	;# 
  3826  0896                     	;# 
  3827  0896                     	;# 
  3828  0896                     	;# 
  3829  089B                     	;# 
  3830  0911                     	;# 
  3831  0912                     	;# 
  3832  0913                     	;# 
  3833  0914                     	;# 
  3834  0915                     	;# 
  3835  0916                     	;# 
  3836  0918                     	;# 
  3837  0919                     	;# 
  3838  091A                     	;# 
  3839  091B                     	;# 
  3840  091C                     	;# 
  3841  091D                     	;# 
  3842  091E                     	;# 
  3843  091F                     	;# 
  3844  0E0F                     	;# 
  3845  0E10                     	;# 
  3846  0E11                     	;# 
  3847  0E12                     	;# 
  3848  0E13                     	;# 
  3849  0E14                     	;# 
  3850  0E15                     	;# 
  3851  0E16                     	;# 
  3852  0E17                     	;# 
  3853  0E18                     	;# 
  3854  0E19                     	;# 
  3855  0E1A                     	;# 
  3856  0E1B                     	;# 
  3857  0E1C                     	;# 
  3858  0E1D                     	;# 
  3859  0E1E                     	;# 
  3860  0E1F                     	;# 
  3861  0E20                     	;# 
  3862  0E21                     	;# 
  3863  0E22                     	;# 
  3864  0E24                     	;# 
  3865  0E25                     	;# 
  3866  0E28                     	;# 
  3867  0E29                     	;# 
  3868  0E2A                     	;# 
  3869  0E2B                     	;# 
  3870  0E2C                     	;# 
  3871  0E2D                     	;# 
  3872  0E2E                     	;# 
  3873  0E2F                     	;# 
  3874  0E90                     	;# 
  3875  0E91                     	;# 
  3876  0E92                     	;# 
  3877  0E94                     	;# 
  3878  0E95                     	;# 
  3879  0E9C                     	;# 
  3880  0E9D                     	;# 
  3881  0E9E                     	;# 
  3882  0E9F                     	;# 
  3883  0EA0                     	;# 
  3884  0EA1                     	;# 
  3885  0EA2                     	;# 
  3886  0EA3                     	;# 
  3887  0EA4                     	;# 
  3888  0EA5                     	;# 
  3889  0EA6                     	;# 
  3890  0EA7                     	;# 
  3891  0F0F                     	;# 
  3892  0F10                     	;# 
  3893  0F11                     	;# 
  3894  0F12                     	;# 
  3895  0F13                     	;# 
  3896  0F14                     	;# 
  3897  0F15                     	;# 
  3898  0F16                     	;# 
  3899  0F17                     	;# 
  3900  0F18                     	;# 
  3901  0F19                     	;# 
  3902  0F1A                     	;# 
  3903  0F1B                     	;# 
  3904  0F1C                     	;# 
  3905  0F1D                     	;# 
  3906  0F1E                     	;# 
  3907  0F1F                     	;# 
  3908  0F20                     	;# 
  3909  0F21                     	;# 
  3910  0F22                     	;# 
  3911  0F23                     	;# 
  3912  0F24                     	;# 
  3913  0F25                     	;# 
  3914  0F26                     	;# 
  3915  0F27                     	;# 
  3916  0F28                     	;# 
  3917  0F29                     	;# 
  3918  0F2A                     	;# 
  3919  0F2B                     	;# 
  3920  0F2C                     	;# 
  3921  0F2D                     	;# 
  3922  0F2E                     	;# 
  3923  0F2F                     	;# 
  3924  0F30                     	;# 
  3925  0F31                     	;# 
  3926  0F32                     	;# 
  3927  0F33                     	;# 
  3928  0F34                     	;# 
  3929  0F35                     	;# 
  3930  0F36                     	;# 
  3931  0F37                     	;# 
  3932  0FE4                     	;# 
  3933  0FE5                     	;# 
  3934  0FE6                     	;# 
  3935  0FE7                     	;# 
  3936  0FE8                     	;# 
  3937  0FE9                     	;# 
  3938  0FEA                     	;# 
  3939  0FEB                     	;# 
  3940  0FED                     	;# 
  3941  0FEE                     	;# 
  3942  0FEF                     	;_gLedPara
  3943                           
  3944                           	psect	idataBANK1
  3945  0000                     __pidataBANK1:	
  3946  2399                     _gLedPara	set	9113
  3947  000B                     _INTCONbits	set	11
  3948  0010                     _PIR0bits	set	16
  3949  0011                     _PIR1bits	set	17
  3950  001E                     _PR2	set	30
  3951  0017                     _T0CON0	set	23
  3952  0017                     _T0CON0bits	set	23
  3953  0018                     _T0CON1	set	24
  3954  001F                     _T2CON	set	31
  3955  001F                     _T2CONbits	set	31
  3956  0016                     _TMR0H	set	22
  3957  0015                     _TMR0L	set	21
  3958  001D                     _TMR2	set	29
  3959  005F                     _GIE	set	95
  3960  0062                     _RA2	set	98
  3961  008C                     _TXIF	set	140
  3962  0090                     _PIE0bits	set	144
  3963  0091                     _PIE1bits	set	145
  3964  008C                     _TRISA	set	140
  3965  008D                     _TRISB	set	141
  3966  008E                     _TRISC	set	142
  3967  010C                     _LATA	set	268
  3968  010D                     _LATB	set	269
  3969  010E                     _LATC	set	270
  3970  086C                     _LATB4	set	2156
  3971  0870                     _LATC0	set	2160
  3972  018C                     _ANSELA	set	396
  3973  018D                     _ANSELB	set	397
  3974  018E                     _ANSELC	set	398
  3975  019F                     _BAUD1CON	set	415
  3976  019D                     _RC1STA	set	413
  3977  019D                     _RC1STAbits	set	413
  3978  0199                     _RCREG	set	409
  3979  019C                     _SP1BRGH	set	412
  3980  019B                     _SP1BRGL	set	411
  3981  019E                     _TX1STA	set	414
  3982  019A                     _TXREG	set	410
  3983  0CF1                     _TRMT	set	3313
  3984  020C                     _WPUA	set	524
  3985  020D                     _WPUB	set	525
  3986  020E                     _WPUC	set	526
  3987  0293                     _CCP1CON	set	659
  3988  0293                     _CCP1CONbits	set	659
  3989  0297                     _CCP2CON	set	663
  3990  0297                     _CCP2CONbits	set	663
  3991  0292                     _CCPR1H	set	658
  3992  0291                     _CCPR1L	set	657
  3993  0296                     _CCPR2H	set	662
  3994  0295                     _CCPR2L	set	661
  3995  029F                     _CCPTMRSbits	set	671
  3996  028C                     _ODCONA	set	652
  3997  028D                     _ODCONB	set	653
  3998  028E                     _ODCONC	set	654
  3999  0313                     _CCP3CON	set	787
  4000  0313                     _CCP3CONbits	set	787
  4001  0317                     _CCP4CON	set	791
  4002  0317                     _CCP4CONbits	set	791
  4003  0312                     _CCPR3H	set	786
  4004  0311                     _CCPR3L	set	785
  4005  0316                     _CCPR4H	set	790
  4006  0315                     _CCPR4L	set	789
  4007  0619                     _PWM5CON	set	1561
  4008  0618                     _PWM5DCH	set	1560
  4009  0617                     _PWM5DCL	set	1559
  4010  061F                     _PWMTMRSbits	set	1567
  4011  0892                     _NVMADRH	set	2194
  4012  0891                     _NVMADRL	set	2193
  4013  0895                     _NVMCON1bits	set	2197
  4014  0896                     _NVMCON2	set	2198
  4015  0893                     _NVMDATL	set	2195
  4016  0919                     _OSCCON1	set	2329
  4017  091B                     _OSCCON3	set	2331
  4018  091D                     _OSCEN	set	2333
  4019  091F                     _OSCFRQ	set	2335
  4020  091E                     _OSCTUNE	set	2334
  4021  0E0F                     _PPSLOCK	set	3599
  4022  0E0F                     _PPSLOCKbits	set	3599
  4023  0E24                     _RXPPSbits	set	3620
  4024  0EA2                     _RC2PPSbits	set	3746
  4025  0EA3                     _RC3PPSbits	set	3747
  4026  0EA4                     _RC4PPSbits	set	3748
  4027  0EA5                     _RC5PPSbits	set	3749
  4028  0EA6                     _RC6PPSbits	set	3750
  4029  0EA7                     _RC7PPSbits	set	3751
  4030                           
  4031                           	psect	stringtext
  4032  1000                     __pstringtext:	
  4033  1000                     STR_6:	
  4034  1000  3441               	retlw	65	;'A'
  4035  1001  3454               	retlw	84	;'T'
  4036  1002  342B               	retlw	43	;'+'
  4037  1003  3441               	retlw	65	;'A'
  4038  1004  3444               	retlw	68	;'D'
  4039  1005  3456               	retlw	86	;'V'
  4040  1006  345F               	retlw	95	;'_'
  4041  1007  344D               	retlw	77	;'M'
  4042  1008  3446               	retlw	70	;'F'
  4043  1009  3452               	retlw	82	;'R'
  4044  100A  345F               	retlw	95	;'_'
  4045  100B  3453               	retlw	83	;'S'
  4046  100C  3450               	retlw	80	;'P'
  4047  100D  3443               	retlw	67	;'C'
  4048  100E  343D               	retlw	61	;'='
  4049  100F  3433               	retlw	51	;'3'
  4050  1010  3430               	retlw	48	;'0'
  4051  1011  3433               	retlw	51	;'3'
  4052  1012  3431               	retlw	49	;'1'
  4053  1013  3433               	retlw	51	;'3'
  4054  1014  3431               	retlw	49	;'1'
  4055  1015  3433               	retlw	51	;'3'
  4056  1016  3431               	retlw	49	;'1'
  4057  1017  3433               	retlw	51	;'3'
  4058  1018  3430               	retlw	48	;'0'
  4059  1019  3433               	retlw	51	;'3'
  4060  101A  3431               	retlw	49	;'1'
  4061  101B  3433               	retlw	51	;'3'
  4062  101C  3430               	retlw	48	;'0'
  4063  101D  3433               	retlw	51	;'3'
  4064  101E  3431               	retlw	49	;'1'
  4065  101F  340D               	retlw	13
  4066  1020  340A               	retlw	10
  4067  1021  3400               	retlw	0
  4068  1022                     STR_5:	
  4069  1022  3441               	retlw	65	;'A'
  4070  1023  3454               	retlw	84	;'T'
  4071  1024  342B               	retlw	43	;'+'
  4072  1025  3441               	retlw	65	;'A'
  4073  1026  3444               	retlw	68	;'D'
  4074  1027  3456               	retlw	86	;'V'
  4075  1028  345F               	retlw	95	;'_'
  4076  1029  344D               	retlw	77	;'M'
  4077  102A  3446               	retlw	70	;'F'
  4078  102B  3452               	retlw	82	;'R'
  4079  102C  345F               	retlw	95	;'_'
  4080  102D  3453               	retlw	83	;'S'
  4081  102E  3450               	retlw	80	;'P'
  4082  102F  3443               	retlw	67	;'C'
  4083  1030  343D               	retlw	61	;'='
  4084  1031  343F               	retlw	63	;'?'
  4085  1032  340D               	retlw	13
  4086  1033  340A               	retlw	10
  4087  1034  3400               	retlw	0
  4088  1035                     STR_3:	
  4089  1035  3433               	retlw	51	;'3'
  4090  1036  3430               	retlw	48	;'0'
  4091  1037  3433               	retlw	51	;'3'
  4092  1038  3431               	retlw	49	;'1'
  4093  1039  3433               	retlw	51	;'3'
  4094  103A  3431               	retlw	49	;'1'
  4095  103B  3433               	retlw	51	;'3'
  4096  103C  3431               	retlw	49	;'1'
  4097  103D  3433               	retlw	51	;'3'
  4098  103E  3430               	retlw	48	;'0'
  4099  103F  3433               	retlw	51	;'3'
  4100  1040  3431               	retlw	49	;'1'
  4101  1041  3433               	retlw	51	;'3'
  4102  1042  3430               	retlw	48	;'0'
  4103  1043  3433               	retlw	51	;'3'
  4104  1044  3431               	retlw	49	;'1'
  4105  1045  3400               	retlw	0
  4106  1046                     STR_8:	
  4107  1046  3441               	retlw	65	;'A'
  4108  1047  3454               	retlw	84	;'T'
  4109  1048  342B               	retlw	43	;'+'
  4110  1049  344D               	retlw	77	;'M'
  4111  104A  344F               	retlw	79	;'O'
  4112  104B  3444               	retlw	68	;'D'
  4113  104C  3445               	retlw	69	;'E'
  4114  104D  343D               	retlw	61	;'='
  4115  104E  3444               	retlw	68	;'D'
  4116  104F  3441               	retlw	65	;'A'
  4117  1050  3454               	retlw	84	;'T'
  4118  1051  3441               	retlw	65	;'A'
  4119  1052  340D               	retlw	13
  4120  1053  340A               	retlw	10
  4121  1054  3400               	retlw	0
  4122  1055                     STR_7:	
  4123  1055  3441               	retlw	65	;'A'
  4124  1056  3454               	retlw	84	;'T'
  4125  1057  342B               	retlw	43	;'+'
  4126  1058  3453               	retlw	83	;'S'
  4127  1059  3445               	retlw	69	;'E'
  4128  105A  3454               	retlw	84	;'T'
  4129  105B  343D               	retlw	61	;'='
  4130  105C  3431               	retlw	49	;'1'
  4131  105D  340D               	retlw	13
  4132  105E  340A               	retlw	10
  4133  105F  3400               	retlw	0
  4134  1060                     STR_1:	
  4135  1060  3441               	retlw	65	;'A'
  4136  1061  3454               	retlw	84	;'T'
  4137  1062  342B               	retlw	43	;'+'
  4138  1063  344F               	retlw	79	;'O'
  4139  1064  344B               	retlw	75	;'K'
  4140  1065  340D               	retlw	13
  4141  1066  340A               	retlw	10
  4142  1067  3400               	retlw	0
  4143  1068                     STR_4:	
  4144  1068  3441               	retlw	65	;'A'
  4145  1069  3454               	retlw	84	;'T'
  4146  106A  340D               	retlw	13
  4147  106B  340A               	retlw	10
  4148  106C  3400               	retlw	0
  4149  1060                     
  4150                           ; #config settings
  4151  0000                     
  4152                           	psect	cinit
  4153  0033                     start_initialization:	
  4154  0033                     __initialization:	
  4155                           
  4156                           ; Initialize objects allocated to BANK1
  4157  0033  0021               	movlb	1	; select bank1
  4158                           
  4159                           ;initializer for _MONTH_DAY
  4160  0034  301F               	movlw	31
  4161  0035  00C7               	movwf	__pdataBANK1& (0+127)
  4162  0036  301C               	movlw	28
  4163  0037  00C8               	movwf	(__pdataBANK1+1)& (0+127)
  4164  0038  301F               	movlw	31
  4165  0039  00C9               	movwf	(__pdataBANK1+2)& (0+127)
  4166  003A  301E               	movlw	30
  4167  003B  00CA               	movwf	(__pdataBANK1+3)& (0+127)
  4168  003C  301F               	movlw	31
  4169  003D  00CB               	movwf	(__pdataBANK1+4)& (0+127)
  4170  003E  301E               	movlw	30
  4171  003F  00CC               	movwf	(__pdataBANK1+5)& (0+127)
  4172  0040  301F               	movlw	31
  4173  0041  00CD               	movwf	(__pdataBANK1+6)& (0+127)
  4174  0042  00CE               	movwf	(__pdataBANK1+7)& (0+127)
  4175  0043  301E               	movlw	30
  4176  0044  00CF               	movwf	(__pdataBANK1+8)& (0+127)
  4177  0045  301F               	movlw	31
  4178  0046  00D0               	movwf	(__pdataBANK1+9)& (0+127)
  4179  0047  301E               	movlw	30
  4180  0048  00D1               	movwf	(__pdataBANK1+10)& (0+127)
  4181  0049  301F               	movlw	31
  4182  004A  00D2               	movwf	(__pdataBANK1+11)& (0+127)
  4183  004B  3048               	movlw	low __pbssBANK0
  4184                           
  4185                           ; Clear objects allocated to COMMON
  4186  004C  01F9               	clrf	__pbssCOMMON& (0+127)
  4187  004D  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  4188                           
  4189                           ; Clear objects allocated to BANK0
  4190  004E  0084               	movwf	4
  4191  004F  3000               	movlw	high __pbssBANK0
  4192  0050  0085               	movwf	5
  4193  0051  3026               	movlw	38
  4194  0052  00FE               	movwf	126
  4195  0053  3000               	movlw	0
  4196  0054  00FF               	movwf	127
  4197  0055  3187  279E  3180   	fcall	clear_ram0
  4198                           
  4199                           ; Clear objects allocated to BANK1
  4200  0058  30A0               	movlw	low __pbssBANK1
  4201  0059  0084               	movwf	4
  4202  005A  3000               	movlw	high __pbssBANK1
  4203  005B  0085               	movwf	5
  4204  005C  3027               	movlw	39
  4205  005D  00FE               	movwf	126
  4206  005E  3000               	movlw	0
  4207  005F  00FF               	movwf	127
  4208  0060  3187  279E  3180   	fcall	clear_ram0
  4209                           
  4210                           ; Clear objects allocated to BANK2
  4211  0063  3020               	movlw	low __pbssBANK2
  4212  0064  0084               	movwf	4
  4213  0065  3001               	movlw	high __pbssBANK2
  4214  0066  0085               	movwf	5
  4215  0067  3020               	movlw	32
  4216  0068  00FE               	movwf	126
  4217  0069  3000               	movlw	0
  4218  006A  00FF               	movwf	127
  4219  006B  3187  279E  3180   	fcall	clear_ram0
  4220                           
  4221                           ; Clear objects allocated to BANK3
  4222  006E  30A0               	movlw	low __pbssBANK3
  4223  006F  0084               	movwf	4
  4224  0070  3001               	movlw	high __pbssBANK3
  4225  0071  0085               	movwf	5
  4226  0072  3050               	movlw	80
  4227  0073  00FE               	movwf	126
  4228  0074  3000               	movlw	0
  4229  0075  00FF               	movwf	127
  4230  0076  3187  279E  3180   	fcall	clear_ram0
  4231  0079                     end_of_initialization:	
  4232                           ;End of C runtime variable initialization code
  4233                           
  4234  0079                     __end_of__initialization:	
  4235  0079  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4236  007A  0020               	movlb	0
  4237  007B  287C               	ljmp	_main	;jump to C main() function
  4238  007C                     __pmaintext:	
  4239 ;;
  4240 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4241 ;;
  4242 ;; *************** function _main *****************
  4243 ;; Defined at:
  4244 ;;		line 58 in file "src/main.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;		None
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;		None
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : B1F/0
  4255 ;;		On exit  : 1F/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;Total ram usage:        1 bytes
  4263 ;; Hardware stack levels required when called:   11
  4264 ;; This function calls:
  4265 ;;		_DecodeDATA
  4266 ;;		_SYSTEM_Initialize
  4267 ;;		_TMR0_StartTimer
  4268 ;;		_TMR2_StartTimer
  4269 ;;		_autoRun
  4270 ;;		_findDeviceFlash
  4271 ;;		_initBLE
  4272 ;;		_initLed
  4273 ;;		_initRTC
  4274 ;;		_saveLedPara
  4275 ;; This function is called by:
  4276 ;;		Startup code after reset
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           
  4281                           ;psect for function _main
  4282  007C                     _main:	
  4283                           
  4284                           ;main.c: 61: SYSTEM_Initialize();
  4285                           
  4286                           ;incstack = 0
  4287                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4288  007C  20BE  3180         	fcall	_SYSTEM_Initialize
  4289                           
  4290                           ;main.c: 63: (INTCONbits.GIE = 1);
  4291  007E  178B               	bsf	11,7	;volatile
  4292                           
  4293                           ;main.c: 65: (INTCONbits.PEIE = 1);
  4294  007F  170B               	bsf	11,6	;volatile
  4295                           
  4296                           ;main.c: 68: initLed();
  4297  0080  21E5  3180         	fcall	_initLed
  4298                           
  4299                           ;main.c: 70: initRTC();
  4300  0082  21E6  3180         	fcall	_initRTC
  4301                           
  4302                           ;main.c: 71: TMR0_StartTimer();
  4303  0084  2157  3180         	fcall	_TMR0_StartTimer
  4304                           
  4305                           ;main.c: 74: TMR2_StartTimer();
  4306  0086  2159  3180         	fcall	_TMR2_StartTimer
  4307                           
  4308                           ;main.c: 76: initBLE();
  4309  0088  216B  3180         	fcall	_initBLE
  4310  008A                     l441:	
  4311                           ;main.c: 78: while (1)
  4312                           
  4313  008A  0064               	clrwdt	;# 
  4314                           
  4315                           ;main.c: 82: if(eusartRunPara.fMode)
  4316  008B  0020               	movlb	0	; select bank0
  4317  008C  1C5F               	btfss	_eusartRunPara,0	;volatile
  4318  008D  288A               	goto	l441
  4319                           
  4320                           ;main.c: 83: {
  4321                           ;main.c: 84: if((RA2 == 0) && LATC0)
  4322  008E  190C               	btfsc	12,2	;volatile
  4323  008F  28A0               	goto	l3223
  4324  0090  0022               	movlb	2	; select bank2
  4325  0091  1C0E               	btfss	14,0	;volatile
  4326  0092  28A0               	goto	l3223
  4327                           
  4328                           ;main.c: 85: {
  4329                           ;main.c: 86: eusartRunPara.nRcvIdx = 0;
  4330  0093  0020               	movlb	0	; select bank0
  4331  0094  01E3               	clrf	_eusartRunPara+4	;volatile
  4332                           
  4333                           ;main.c: 87: _delay((unsigned long)((800)*(16000000/4000000.0)));
  4334  0095  3005               	movlw	5
  4335  0096  0020               	movlb	0	; select bank0
  4336  0097  00C7               	movwf	??_main
  4337  0098  3026               	movlw	38
  4338  0099                     u3037:	
  4339  0099  0B89               	decfsz	9,f
  4340  009A  2899               	goto	u3037
  4341  009B  0BC7               	decfsz	??_main,f
  4342  009C  2899               	goto	u3037
  4343  009D  0000               	nop
  4344                           
  4345                           ;main.c: 88: LATC0 = 0;
  4346  009E  0022               	movlb	2	; select bank2
  4347  009F  100E               	bcf	14,0	;volatile
  4348  00A0                     l3223:	
  4349                           
  4350                           ;main.c: 89: }
  4351                           ;main.c: 90: if(RA2 && (LATC0 == 0))
  4352  00A0  0020               	movlb	0	; select bank0
  4353  00A1  1D0C               	btfss	12,2	;volatile
  4354  00A2  28AB               	goto	l3233
  4355  00A3  0022               	movlb	2	; select bank2
  4356  00A4  180E               	btfsc	14,0	;volatile
  4357  00A5  28AB               	goto	l3233
  4358                           
  4359                           ;main.c: 91: {
  4360                           ;main.c: 92: LATC0 = 1;
  4361  00A6  140E               	bsf	14,0	;volatile
  4362                           
  4363                           ;main.c: 93: DecodeDATA();
  4364  00A7  228F  3180         	fcall	_DecodeDATA
  4365                           
  4366                           ;main.c: 94: eusartRunPara.nRcvIdx = 0;
  4367  00A9  0020               	movlb	0	; select bank0
  4368  00AA  01E3               	clrf	_eusartRunPara+4	;volatile
  4369  00AB                     l3233:	
  4370                           
  4371                           ;main.c: 95: }
  4372                           ;main.c: 96: if (gLedRunPara.fMin)
  4373  00AB  0020               	movlb	0	; select bank0
  4374  00AC  1CC8               	btfss	_gLedRunPara,1	;volatile
  4375  00AD  28B1               	goto	l3239
  4376                           
  4377                           ;main.c: 97: {
  4378                           ;main.c: 98: gLedRunPara.fMin = 0;
  4379  00AE  10C8               	bcf	_gLedRunPara,1	;volatile
  4380                           
  4381                           ;main.c: 99: autoRun();
  4382  00AF  24E6  3180         	fcall	_autoRun
  4383  00B1                     l3239:	
  4384                           
  4385                           ;main.c: 100: }
  4386                           ;main.c: 103: if (gLedRunPara.fSec)
  4387  00B1  1C48               	btfss	_gLedRunPara,0	;volatile
  4388  00B2  288A               	goto	l441
  4389                           
  4390                           ;main.c: 104: {
  4391                           ;main.c: 105: gLedRunPara.fSec = 0;
  4392  00B3  1048               	bcf	_gLedRunPara,0	;volatile
  4393                           
  4394                           ;main.c: 107: if (gLedRunPara.find)
  4395  00B4  1DC8               	btfss	_gLedRunPara,3	;volatile
  4396  00B5  28B8               	goto	l3245
  4397                           
  4398                           ;main.c: 108: {
  4399                           ;main.c: 109: findDeviceFlash();
  4400  00B6  215B  3180         	fcall	_findDeviceFlash
  4401  00B8                     l3245:	
  4402                           
  4403                           ;main.c: 110: }
  4404                           ;main.c: 111: if (gLedRunPara.fSave)
  4405  00B8  0020               	movlb	0	; select bank0
  4406  00B9  1D48               	btfss	_gLedRunPara,2	;volatile
  4407  00BA  288A               	goto	l441
  4408                           
  4409                           ;main.c: 112: {
  4410                           ;main.c: 113: saveLedPara();
  4411  00BB  21EF  3180         	fcall	_saveLedPara
  4412  00BD  288A               	goto	l441
  4413  00BE                     __end_of_main:	
  4414  00BE                     __ptext28:	
  4415 ;; *************** function _SYSTEM_Initialize *****************
  4416 ;; Defined at:
  4417 ;;		line 59 in file "src/comman.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;		None
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;		None
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      void 
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0, pclath, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : B1F/0
  4428 ;;		On exit  : 1F/1
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4435 ;;Total ram usage:        0 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    6
  4438 ;; This function calls:
  4439 ;;		_EUSART_Initialize
  4440 ;;		_OSCILLATOR_Initialize
  4441 ;;		_PIN_MANAGER_Initialize
  4442 ;;		_PWM1_Initialize
  4443 ;;		_PWM2_Initialize
  4444 ;;		_PWM3_Initialize
  4445 ;;		_PWM4_Initialize
  4446 ;;		_PWM5_Initialize
  4447 ;;		_TMR0_Initialize
  4448 ;;		_TMR2_Initialize
  4449 ;; This function is called by:
  4450 ;;		_main
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           
  4455                           ;psect for function _SYSTEM_Initialize
  4456  00BE                     _SYSTEM_Initialize:	
  4457                           
  4458                           ;comman.c: 61: PIN_MANAGER_Initialize();
  4459                           
  4460                           ;incstack = 0
  4461                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4462  00BE  20DB  3180         	fcall	_PIN_MANAGER_Initialize
  4463                           
  4464                           ;comman.c: 62: OSCILLATOR_Initialize();
  4465  00C0  20D1  3180         	fcall	_OSCILLATOR_Initialize
  4466                           
  4467                           ;comman.c: 63: PWM1_Initialize();
  4468  00C2  2122  3180         	fcall	_PWM1_Initialize
  4469                           
  4470                           ;comman.c: 64: PWM2_Initialize();
  4471  00C4  2128  3180         	fcall	_PWM2_Initialize
  4472                           
  4473                           ;comman.c: 65: PWM3_Initialize();
  4474  00C6  2131  3180         	fcall	_PWM3_Initialize
  4475                           
  4476                           ;comman.c: 66: PWM4_Initialize();
  4477  00C8  213C  3180         	fcall	_PWM4_Initialize
  4478                           
  4479                           ;comman.c: 67: PWM5_Initialize();
  4480  00CA  2147  3180         	fcall	_PWM5_Initialize
  4481                           
  4482                           ;comman.c: 68: TMR2_Initialize();
  4483  00CC  214D  3180         	fcall	_TMR2_Initialize
  4484                           
  4485                           ;comman.c: 69: TMR0_Initialize();
  4486  00CE  2263  3180         	fcall	_TMR0_Initialize
  4487                           
  4488                           ;comman.c: 70: EUSART_Initialize();
  4489  00D0  2A53               	ljmp	l2741
  4490  00D1                     __end_of_SYSTEM_Initialize:	
  4491  00D1                     __ptext37:	
  4492 ;; *************** function _OSCILLATOR_Initialize *****************
  4493 ;; Defined at:
  4494 ;;		line 44 in file "src/comman.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;		None
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;		None
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  1    wreg      void 
  4501 ;; Registers used:
  4502 ;;		wreg, status,2
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 1F/12
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;Total ram usage:        0 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    5
  4515 ;; This function calls:
  4516 ;;		Nothing
  4517 ;; This function is called by:
  4518 ;;		_SYSTEM_Initialize
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           
  4523                           ;psect for function _OSCILLATOR_Initialize
  4524  00D1                     _OSCILLATOR_Initialize:	
  4525                           
  4526                           ;comman.c: 47: OSCCON1 = 0x60;
  4527                           
  4528                           ;incstack = 0
  4529                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4530  00D1  3060               	movlw	96
  4531  00D2  0032               	movlb	18	; select bank18
  4532  00D3  0099               	movwf	25	;volatile
  4533                           
  4534                           ;comman.c: 49: OSCCON3 = 0x00;
  4535  00D4  019B               	clrf	27	;volatile
  4536                           
  4537                           ;comman.c: 51: OSCEN = 0x48;
  4538  00D5  3048               	movlw	72
  4539  00D6  009D               	movwf	29	;volatile
  4540                           
  4541                           ;comman.c: 53: OSCFRQ = 0x06;
  4542  00D7  3006               	movlw	6
  4543  00D8  009F               	movwf	31	;volatile
  4544                           
  4545                           ;comman.c: 55: OSCTUNE = 0x00;
  4546  00D9  019E               	clrf	30	;volatile
  4547  00DA  0008               	return
  4548  00DB                     __end_of_OSCILLATOR_Initialize:	
  4549  00DB                     __ptext36:	
  4550 ;; *************** function _PIN_MANAGER_Initialize *****************
  4551 ;; Defined at:
  4552 ;;		line 3 in file "src/pin.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;		None
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;  state           1    0[BANK0 ] unsigned char 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  1    wreg      void 
  4559 ;; Registers used:
  4560 ;;		wreg, status,2, status,0
  4561 ;; Tracked objects:
  4562 ;;		On entry : B1F/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4569 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;Total ram usage:        1 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    5
  4573 ;; This function calls:
  4574 ;;		Nothing
  4575 ;; This function is called by:
  4576 ;;		_SYSTEM_Initialize
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           
  4581                           ;psect for function _PIN_MANAGER_Initialize
  4582  00DB                     _PIN_MANAGER_Initialize:	
  4583                           
  4584                           ;pin.c: 8: LATA = 0x00;
  4585                           
  4586                           ;incstack = 0
  4587                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  4588  00DB  0022               	movlb	2	; select bank2
  4589  00DC  018C               	clrf	12	;volatile
  4590                           
  4591                           ;pin.c: 9: LATB = 0x00;
  4592  00DD  018D               	clrf	13	;volatile
  4593                           
  4594                           ;pin.c: 10: LATC = 0x00;
  4595  00DE  018E               	clrf	14	;volatile
  4596                           
  4597                           ;pin.c: 15: TRISA = 0x34;
  4598  00DF  3034               	movlw	52
  4599  00E0  0021               	movlb	1	; select bank1
  4600  00E1  008C               	movwf	12	;volatile
  4601                           
  4602                           ;pin.c: 16: TRISB = 0x00;
  4603  00E2  018D               	clrf	13	;volatile
  4604                           
  4605                           ;pin.c: 17: TRISC = 0x02;
  4606  00E3  3002               	movlw	2
  4607  00E4  008E               	movwf	14	;volatile
  4608                           
  4609                           ;pin.c: 22: ANSELC = 0x00;
  4610  00E5  0023               	movlb	3	; select bank3
  4611  00E6  018E               	clrf	14	;volatile
  4612                           
  4613                           ;pin.c: 23: ANSELB = 0x00;
  4614  00E7  018D               	clrf	13	;volatile
  4615                           
  4616                           ;pin.c: 24: ANSELA = 0x00;
  4617  00E8  018C               	clrf	12	;volatile
  4618                           
  4619                           ;pin.c: 29: WPUB = 0x00;
  4620  00E9  0024               	movlb	4	; select bank4
  4621  00EA  018D               	clrf	13	;volatile
  4622                           
  4623                           ;pin.c: 30: WPUA = 0x06;
  4624  00EB  3006               	movlw	6
  4625  00EC  008C               	movwf	12	;volatile
  4626                           
  4627                           ;pin.c: 31: WPUC = 0x00;
  4628  00ED  018E               	clrf	14	;volatile
  4629                           
  4630                           ;pin.c: 36: ODCONA = 0x00;
  4631  00EE  0025               	movlb	5	; select bank5
  4632  00EF  018C               	clrf	12	;volatile
  4633                           
  4634                           ;pin.c: 37: ODCONB = 0x00;
  4635  00F0  018D               	clrf	13	;volatile
  4636                           
  4637                           ;pin.c: 38: ODCONC = 0x00;
  4638  00F1  018E               	clrf	14	;volatile
  4639                           
  4640                           ;pin.c: 40: unsigned char state = GIE;
  4641  00F2  3000               	movlw	0
  4642  00F3  1B8B               	btfsc	11,7	;volatile
  4643  00F4  3001               	movlw	1
  4644  00F5  0020               	movlb	0	; select bank0
  4645  00F6  00A0               	movwf	PIN_MANAGER_Initialize@state
  4646                           
  4647                           ;pin.c: 41: GIE = 0;
  4648  00F7  138B               	bcf	11,7	;volatile
  4649                           
  4650                           ;pin.c: 42: PPSLOCK = 0x55;
  4651                           
  4652                           ;pin.c: 43: PPSLOCK = 0xAA;
  4653  00F8  2779  3180         	fcall	PL30	;call to abstracted procedure
  4654                           
  4655                           ;pin.c: 44: PPSLOCKbits.PPSLOCKED = 0x00;
  4656  00FA  100F               	bcf	15,0	;volatile
  4657                           
  4658                           ;pin.c: 46: RXPPSbits.RXPPS = 0x11;
  4659  00FB  0824               	movf	36,w	;volatile
  4660  00FC  39E0               	andlw	-32
  4661  00FD  3811               	iorlw	17
  4662  00FE  00A4               	movwf	36	;volatile
  4663                           
  4664                           ;pin.c: 47: RC2PPSbits.RC2PPS = 0x14;
  4665  00FF  003D               	movlb	29	; select bank29
  4666  0100  0822               	movf	34,w	;volatile
  4667  0101  39E0               	andlw	-32
  4668  0102  3814               	iorlw	20
  4669  0103  00A2               	movwf	34	;volatile
  4670                           
  4671                           ;pin.c: 48: RC7PPSbits.RC7PPS = 0x0C;
  4672  0104  0827               	movf	39,w	;volatile
  4673  0105  39E0               	andlw	-32
  4674  0106  380C               	iorlw	12
  4675  0107  00A7               	movwf	39	;volatile
  4676                           
  4677                           ;pin.c: 49: RC6PPSbits.RC6PPS = 0x0D;
  4678  0108  0826               	movf	38,w	;volatile
  4679  0109  39E0               	andlw	-32
  4680  010A  380D               	iorlw	13
  4681  010B  00A6               	movwf	38	;volatile
  4682                           
  4683                           ;pin.c: 50: RC3PPSbits.RC3PPS = 0x0E;
  4684  010C  0823               	movf	35,w	;volatile
  4685  010D  39E0               	andlw	-32
  4686  010E  380E               	iorlw	14
  4687  010F  00A3               	movwf	35	;volatile
  4688                           
  4689                           ;pin.c: 51: RC4PPSbits.RC4PPS = 0x0F;
  4690  0110  0824               	movf	36,w	;volatile
  4691  0111  39E0               	andlw	-32
  4692  0112  380F               	iorlw	15
  4693  0113  00A4               	movwf	36	;volatile
  4694                           
  4695                           ;pin.c: 52: RC5PPSbits.RC5PPS = 0x02;
  4696  0114  0825               	movf	37,w	;volatile
  4697  0115  39E0               	andlw	-32
  4698  0116  3802               	iorlw	2
  4699  0117  00A5               	movwf	37	;volatile
  4700                           
  4701                           ;pin.c: 54: PPSLOCK = 0x55;
  4702                           
  4703                           ;pin.c: 55: PPSLOCK = 0xAA;
  4704  0118  2779  3180         	fcall	PL30	;call to abstracted procedure
  4705                           
  4706                           ;pin.c: 56: PPSLOCKbits.PPSLOCKED = 0x01;
  4707  011A  140F               	bsf	15,0	;volatile
  4708                           
  4709                           ;pin.c: 58: GIE = state;
  4710  011B  0020               	movlb	0	; select bank0
  4711  011C  1C20               	btfss	PIN_MANAGER_Initialize@state,0
  4712  011D  2920               	goto	u2090
  4713  011E  178B               	bsf	11,7	;volatile
  4714  011F  0008               	return
  4715  0120                     u2090:	
  4716  0120  138B               	bcf	11,7	;volatile
  4717  0121  0008               	return
  4718  0122                     __end_of_PIN_MANAGER_Initialize:	
  4719  0122                     __ptext35:	
  4720 ;; *************** function _PWM1_Initialize *****************
  4721 ;; Defined at:
  4722 ;;		line 4 in file "src/pwm.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;		None
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;		None
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      void 
  4729 ;; Registers used:
  4730 ;;		wreg, status,2, status,0
  4731 ;; Tracked objects:
  4732 ;;		On entry : 1F/12
  4733 ;;		On exit  : 1F/5
  4734 ;;		Unchanged: 0/0
  4735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;Total ram usage:        0 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:    5
  4743 ;; This function calls:
  4744 ;;		Nothing
  4745 ;; This function is called by:
  4746 ;;		_SYSTEM_Initialize
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function _PWM1_Initialize
  4752  0122                     _PWM1_Initialize:	
  4753                           
  4754                           ;pwm.c: 9: CCP1CON = 0x9F;
  4755                           
  4756                           ;incstack = 0
  4757                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
  4758  0122  309F               	movlw	159
  4759  0123  0025               	movlb	5	; select bank5
  4760  0124  0093               	movwf	19	;volatile
  4761                           
  4762                           ;pwm.c: 12: CCPR1H = 0x00;
  4763  0125  0192               	clrf	18	;volatile
  4764                           
  4765                           ;pwm.c: 15: CCPR1L = 0x00;
  4766  0126  0191               	clrf	17	;volatile
  4767                           
  4768                           ;pwm.c: 18: CCPTMRSbits.C1TSEL = 0x1;
  4769  0127  2F7F               	ljmp	PL34	;call to abstracted procedure
  4770  0128                     __end_of_PWM1_Initialize:	
  4771  0128                     __ptext34:	
  4772 ;; *************** function _PWM2_Initialize *****************
  4773 ;; Defined at:
  4774 ;;		line 39 in file "src/pwm.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;		None
  4777 ;; Auto vars:     Size  Location     Type
  4778 ;;		None
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      void 
  4781 ;; Registers used:
  4782 ;;		wreg, status,2, status,0
  4783 ;; Tracked objects:
  4784 ;;		On entry : 1F/5
  4785 ;;		On exit  : 1F/5
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;Total ram usage:        0 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    5
  4795 ;; This function calls:
  4796 ;;		Nothing
  4797 ;; This function is called by:
  4798 ;;		_SYSTEM_Initialize
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           
  4803                           ;psect for function _PWM2_Initialize
  4804  0128                     _PWM2_Initialize:	
  4805                           
  4806                           ;pwm.c: 44: CCP2CON = 0x9F;
  4807                           
  4808                           ;incstack = 0
  4809                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
  4810  0128  309F               	movlw	159
  4811  0129  0097               	movwf	23	;volatile
  4812                           
  4813                           ;pwm.c: 47: CCPR2H = 0x00;
  4814  012A  0196               	clrf	22	;volatile
  4815                           
  4816                           ;pwm.c: 50: CCPR2L = 0x00;
  4817  012B  0195               	clrf	21	;volatile
  4818                           
  4819                           ;pwm.c: 53: CCPTMRSbits.C2TSEL = 0x1;
  4820  012C  081F               	movf	31,w	;volatile
  4821  012D  39F3               	andlw	-13
  4822  012E  3804               	iorlw	4
  4823  012F  009F               	movwf	31	;volatile
  4824  0130  0008               	return
  4825  0131                     __end_of_PWM2_Initialize:	
  4826  0131                     __ptext33:	
  4827 ;; *************** function _PWM3_Initialize *****************
  4828 ;; Defined at:
  4829 ;;		line 74 in file "src/pwm.c"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;		None
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;		None
  4834 ;; Return value:  Size  Location     Type
  4835 ;;                  1    wreg      void 
  4836 ;; Registers used:
  4837 ;;		wreg, status,2, status,0
  4838 ;; Tracked objects:
  4839 ;;		On entry : 1F/5
  4840 ;;		On exit  : 1F/5
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;Total ram usage:        0 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; Hardware stack levels required when called:    5
  4850 ;; This function calls:
  4851 ;;		Nothing
  4852 ;; This function is called by:
  4853 ;;		_SYSTEM_Initialize
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           
  4858                           ;psect for function _PWM3_Initialize
  4859  0131                     _PWM3_Initialize:	
  4860                           
  4861                           ;pwm.c: 79: CCP3CON = 0x9F;
  4862                           
  4863                           ;incstack = 0
  4864                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  4865  0131  309F               	movlw	159
  4866  0132  0026               	movlb	6	; select bank6
  4867  0133  0093               	movwf	19	;volatile
  4868                           
  4869                           ;pwm.c: 82: CCPR3H = 0x00;
  4870  0134  0192               	clrf	18	;volatile
  4871                           
  4872                           ;pwm.c: 85: CCPR3L = 0x00;
  4873  0135  0191               	clrf	17	;volatile
  4874                           
  4875                           ;pwm.c: 88: CCPTMRSbits.C3TSEL = 0x1;
  4876  0136  0025               	movlb	5	; select bank5
  4877  0137  081F               	movf	31,w	;volatile
  4878  0138  39CF               	andlw	-49
  4879  0139  3810               	iorlw	16
  4880  013A  009F               	movwf	31	;volatile
  4881  013B  0008               	return
  4882  013C                     __end_of_PWM3_Initialize:	
  4883  013C                     __ptext32:	
  4884 ;; *************** function _PWM4_Initialize *****************
  4885 ;; Defined at:
  4886 ;;		line 109 in file "src/pwm.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;		None
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;		None
  4891 ;; Return value:  Size  Location     Type
  4892 ;;                  1    wreg      void 
  4893 ;; Registers used:
  4894 ;;		wreg, status,2, status,0
  4895 ;; Tracked objects:
  4896 ;;		On entry : 1F/5
  4897 ;;		On exit  : 1F/5
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4904 ;;Total ram usage:        0 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    5
  4907 ;; This function calls:
  4908 ;;		Nothing
  4909 ;; This function is called by:
  4910 ;;		_SYSTEM_Initialize
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           
  4915                           ;psect for function _PWM4_Initialize
  4916  013C                     _PWM4_Initialize:	
  4917                           
  4918                           ;pwm.c: 114: CCP4CON = 0x9F;
  4919                           
  4920                           ;incstack = 0
  4921                           ; Regs used in _PWM4_Initialize: [wreg+status,2+status,0]
  4922  013C  309F               	movlw	159
  4923  013D  0026               	movlb	6	; select bank6
  4924  013E  0097               	movwf	23	;volatile
  4925                           
  4926                           ;pwm.c: 117: CCPR4H = 0x00;
  4927  013F  0196               	clrf	22	;volatile
  4928                           
  4929                           ;pwm.c: 120: CCPR4L = 0x00;
  4930  0140  0195               	clrf	21	;volatile
  4931                           
  4932                           ;pwm.c: 123: CCPTMRSbits.C4TSEL = 0x1;
  4933  0141  0025               	movlb	5	; select bank5
  4934  0142  081F               	movf	31,w	;volatile
  4935  0143  393F               	andlw	-193
  4936  0144  3840               	iorlw	64
  4937  0145  009F               	movwf	31	;volatile
  4938  0146  0008               	return
  4939  0147                     __end_of_PWM4_Initialize:	
  4940  0147                     __ptext31:	
  4941 ;; *************** function _PWM5_Initialize *****************
  4942 ;; Defined at:
  4943 ;;		line 144 in file "src/pwm.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;		None
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;		None
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      void 
  4950 ;; Registers used:
  4951 ;;		wreg, status,2, status,0
  4952 ;; Tracked objects:
  4953 ;;		On entry : 1F/5
  4954 ;;		On exit  : 1F/C
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;Total ram usage:        0 bytes
  4962 ;; Hardware stack levels used:    1
  4963 ;; Hardware stack levels required when called:    5
  4964 ;; This function calls:
  4965 ;;		Nothing
  4966 ;; This function is called by:
  4967 ;;		_SYSTEM_Initialize
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           
  4972                           ;psect for function _PWM5_Initialize
  4973  0147                     _PWM5_Initialize:	
  4974                           
  4975                           ;pwm.c: 148: PWM5CON = 0x80;
  4976                           
  4977                           ;incstack = 0
  4978                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
  4979  0147  3080               	movlw	128
  4980  0148  002C               	movlb	12	; select bank12
  4981  0149  0099               	movwf	25	;volatile
  4982                           
  4983                           ;pwm.c: 151: PWM5DCH = 0x00;
  4984  014A  0198               	clrf	24	;volatile
  4985                           
  4986                           ;pwm.c: 154: PWM5DCL = 0x00;
  4987  014B  0197               	clrf	23	;volatile
  4988                           
  4989                           ;pwm.c: 158: PWMTMRSbits.P5TSEL = 0x1;
  4990  014C  2F7F               	ljmp	PL34	;call to abstracted procedure
  4991  014D                     __end_of_PWM5_Initialize:	
  4992  014D                     __ptext29:	
  4993 ;; *************** function _TMR2_Initialize *****************
  4994 ;; Defined at:
  4995 ;;		line 37 in file "src/tmr.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;		None
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2
  5004 ;; Tracked objects:
  5005 ;;		On entry : 1F/C
  5006 ;;		On exit  : 1F/1
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;Total ram usage:        0 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    5
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_SYSTEM_Initialize
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           
  5024                           ;psect for function _TMR2_Initialize
  5025  014D                     _TMR2_Initialize:	
  5026                           
  5027                           ;tmr.c: 42: T2CON = 0x03;
  5028                           
  5029                           ;incstack = 0
  5030                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  5031  014D  3003               	movlw	3
  5032  014E  0020               	movlb	0	; select bank0
  5033  014F  009F               	movwf	31	;volatile
  5034                           
  5035                           ;tmr.c: 45: PR2 = 0xF9;
  5036  0150  30F9               	movlw	249
  5037  0151  009E               	movwf	30	;volatile
  5038                           
  5039                           ;tmr.c: 48: TMR2 = 0x00;
  5040  0152  019D               	clrf	29	;volatile
  5041                           
  5042                           ;tmr.c: 51: PIR1bits.TMR2IF = 0;
  5043  0153  1091               	bcf	17,1	;volatile
  5044                           
  5045                           ;tmr.c: 54: PIE1bits.TMR2IE = 1;
  5046  0154  0021               	movlb	1	; select bank1
  5047  0155  1491               	bsf	17,1	;volatile
  5048  0156  0008               	return
  5049  0157                     __end_of_TMR2_Initialize:	
  5050  0157                     __ptext27:	
  5051 ;; *************** function _TMR0_StartTimer *****************
  5052 ;; Defined at:
  5053 ;;		line 30 in file "src/tmr.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;		None
  5056 ;; Auto vars:     Size  Location     Type
  5057 ;;		None
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  1    wreg      void 
  5060 ;; Registers used:
  5061 ;;		None
  5062 ;; Tracked objects:
  5063 ;;		On entry : 1F/0
  5064 ;;		On exit  : 1F/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;Total ram usage:        0 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    5
  5074 ;; This function calls:
  5075 ;;		Nothing
  5076 ;; This function is called by:
  5077 ;;		_main
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           
  5082                           ;psect for function _TMR0_StartTimer
  5083  0157                     _TMR0_StartTimer:	
  5084                           
  5085                           ;tmr.c: 33: T0CON0bits.T0EN = 1;
  5086                           
  5087                           ;incstack = 0
  5088                           ; Regs used in _TMR0_StartTimer: []
  5089  0157  1797               	bsf	23,7	;volatile
  5090  0158  0008               	return
  5091  0159                     __end_of_TMR0_StartTimer:	
  5092  0159                     __ptext26:	
  5093 ;; *************** function _TMR2_StartTimer *****************
  5094 ;; Defined at:
  5095 ;;		line 57 in file "src/tmr.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;		None
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;		None
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  1    wreg      void 
  5102 ;; Registers used:
  5103 ;;		None
  5104 ;; Tracked objects:
  5105 ;;		On entry : 1F/0
  5106 ;;		On exit  : 1F/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5113 ;;Total ram usage:        0 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    5
  5116 ;; This function calls:
  5117 ;;		Nothing
  5118 ;; This function is called by:
  5119 ;;		_main
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           
  5124                           ;psect for function _TMR2_StartTimer
  5125  0159                     _TMR2_StartTimer:	
  5126                           
  5127                           ;tmr.c: 60: T2CONbits.TMR2ON = 1;
  5128                           
  5129                           ;incstack = 0
  5130                           ; Regs used in _TMR2_StartTimer: []
  5131  0159  151F               	bsf	31,2	;volatile
  5132  015A  0008               	return
  5133  015B                     __end_of_TMR2_StartTimer:	
  5134  015B                     __ptext17:	
  5135 ;; *************** function _findDeviceFlash *****************
  5136 ;; Defined at:
  5137 ;;		line 147 in file "src/led.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;		None
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;		None
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0, pclath, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 1F/0
  5148 ;;		On exit  : 13/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;Total ram usage:        0 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    7
  5158 ;; This function calls:
  5159 ;;		_turnMaxLed
  5160 ;;		_turnOffLed
  5161 ;; This function is called by:
  5162 ;;		_main
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           
  5167                           ;psect for function _findDeviceFlash
  5168  015B                     _findDeviceFlash:	
  5169                           
  5170                           ;led.c: 149: static unsigned char tog = 0;
  5171                           ;led.c: 150: if (tog)
  5172                           
  5173                           ;incstack = 0
  5174                           ; Regs used in _findDeviceFlash: [wreg+status,2+status,0+pclath+cstack]
  5175  015B  086D               	movf	findDeviceFlash@tog,w
  5176  015C  1903               	btfsc	3,2
  5177  015D  2968               	goto	l402
  5178                           
  5179                           ;led.c: 151: {
  5180                           ;led.c: 152: tog = 0;
  5181  015E  01ED               	clrf	findDeviceFlash@tog
  5182                           
  5183                           ;led.c: 153: turnOffLed();
  5184  015F  2655               	fcall	_turnOffLed
  5185                           
  5186                           ;led.c: 154: if (gLedRunPara.nFlashCount > 0)
  5187  0160  0020               	movlb	0	; select bank0
  5188  0161  084A               	movf	_gLedRunPara+2,w	;volatile
  5189  0162  1D03               	btfss	3,2
  5190                           
  5191                           ;led.c: 155: {
  5192                           ;led.c: 156: gLedRunPara.nFlashCount --;
  5193  0163  03CA               	decf	_gLedRunPara+2,f	;volatile
  5194                           
  5195                           ;led.c: 157: }
  5196                           ;led.c: 158: if (gLedRunPara.nFlashCount == 0)
  5197  0164  084A               	movf	_gLedRunPara+2,w	;volatile
  5198  0165  1903               	btfsc	3,2
  5199                           
  5200                           ;led.c: 159: {
  5201                           ;led.c: 160: gLedRunPara.find = 0;
  5202  0166  11C8               	bcf	_gLedRunPara,3	;volatile
  5203  0167  0008               	return
  5204  0168                     l402:	
  5205                           
  5206                           ;led.c: 163: else
  5207                           ;led.c: 164: {
  5208                           ;led.c: 165: tog = 1;
  5209  0168  01ED               	clrf	findDeviceFlash@tog
  5210  0169  0AED               	incf	findDeviceFlash@tog,f
  5211                           
  5212                           ;led.c: 166: turnMaxLed();
  5213  016A  2A6E               	ljmp	l2779
  5214  016B                     __end_of_findDeviceFlash:	
  5215  016B                     __ptext14:	
  5216 ;; *************** function _initBLE *****************
  5217 ;; Defined at:
  5218 ;;		line 393 in file "src/ble.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;		None
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;		None
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  1    wreg      void 
  5225 ;; Registers used:
  5226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5227 ;; Tracked objects:
  5228 ;;		On entry : 1F/0
  5229 ;;		On exit  : 1F/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5235 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;Total ram usage:        2 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    8
  5239 ;; This function calls:
  5240 ;;		_bleSendCMD
  5241 ;; This function is called by:
  5242 ;;		_main
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           
  5247                           ;psect for function _initBLE
  5248  016B                     _initBLE:	
  5249                           
  5250                           ;ble.c: 395: _delay((unsigned long)((5)*(16000000/4000.0)));
  5251                           
  5252                           ;incstack = 0
  5253                           ; Regs used in _initBLE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5254  016B  301A               	movlw	26
  5255  016C  0020               	movlb	0	; select bank0
  5256  016D  00A6               	movwf	??_initBLE
  5257  016E  30F8               	movlw	248
  5258  016F                     u3047:	
  5259  016F  0B89               	decfsz	9,f
  5260  0170  296F               	goto	u3047
  5261  0171  0BA6               	decfsz	??_initBLE,f
  5262  0172  296F               	goto	u3047
  5263  0173  0000               	nop
  5264                           
  5265                           ;ble.c: 396: LATB4 = 1;
  5266  0174  0022               	movlb	2	; select bank2
  5267  0175  160D               	bsf	13,4	;volatile
  5268                           
  5269                           ;ble.c: 397: _delay((unsigned long)((200)*(16000000/4000.0)));
  5270  0176  3005               	movlw	5
  5271  0177  0020               	movlb	0	; select bank0
  5272  0178  00A7               	movwf	??_initBLE+1
  5273  0179  300F               	movlw	15
  5274  017A  00A6               	movwf	??_initBLE
  5275  017B  30F1               	movlw	241
  5276  017C                     u3057:	
  5277  017C  0B89               	decfsz	9,f
  5278  017D  297C               	goto	u3057
  5279  017E  0BA6               	decfsz	??_initBLE,f
  5280  017F  297C               	goto	u3057
  5281  0180  0BA7               	decfsz	??_initBLE+1,f
  5282  0181  297C               	goto	u3057
  5283                           
  5284                           ;ble.c: 398: eusartRunPara.nCmd = 1;
  5285  0182  3001               	movlw	1
  5286  0183  0020               	movlb	0	; select bank0
  5287  0184  00E2               	movwf	_eusartRunPara+3	;volatile
  5288                           
  5289                           ;ble.c: 399: bleSendCMD("AT\r\n");
  5290  0185  3068               	movlw	low (STR_4| (0+32768))
  5291  0186  00A4               	movwf	bleSendCMD@pBuf
  5292  0187  3090               	movlw	high (STR_4| (0+32768))
  5293  0188  00A5               	movwf	bleSendCMD@pBuf+1
  5294  0189  21AF  3180         	fcall	_bleSendCMD
  5295                           
  5296                           ;ble.c: 401: eusartRunPara.nCmd = 9;
  5297  018B  3009               	movlw	9
  5298  018C  00E2               	movwf	_eusartRunPara+3	;volatile
  5299                           
  5300                           ;ble.c: 402: bleSendCMD("AT+ADV_MFR_SPC=?\r\n");
  5301  018D  3022               	movlw	low (STR_5| (0+32768))
  5302  018E  00A4               	movwf	bleSendCMD@pBuf
  5303  018F  3090               	movlw	high (STR_5| (0+32768))
  5304  0190  00A5               	movwf	bleSendCMD@pBuf+1
  5305  0191  21AF  3180         	fcall	_bleSendCMD
  5306                           
  5307                           ;ble.c: 404: if (!eusartRunPara.fDev)
  5308  0193  1B5F               	btfsc	_eusartRunPara,6	;volatile
  5309  0194  299D               	goto	l2995
  5310                           
  5311                           ;ble.c: 405: {
  5312                           ;ble.c: 406: eusartRunPara.nCmd = 8;
  5313  0195  3008               	movlw	8
  5314  0196  00E2               	movwf	_eusartRunPara+3	;volatile
  5315                           
  5316                           ;ble.c: 407: bleSendCMD("AT+ADV_MFR_SPC=3031313130313031\r\n");
  5317  0197  3000               	movlw	low (STR_6| (0+32768))
  5318  0198  00A4               	movwf	bleSendCMD@pBuf
  5319  0199  3090               	movlw	high (STR_6| (0+32768))
  5320  019A  00A5               	movwf	bleSendCMD@pBuf+1
  5321  019B  21AF  3180         	fcall	_bleSendCMD
  5322  019D                     l2995:	
  5323                           
  5324                           ;ble.c: 408: }
  5325                           ;ble.c: 410: eusartRunPara.nCmd = 2;
  5326  019D  3002               	movlw	2
  5327  019E  00E2               	movwf	_eusartRunPara+3	;volatile
  5328                           
  5329                           ;ble.c: 411: bleSendCMD("AT+SET=1\r\n");
  5330  019F  3055               	movlw	low (STR_7| (0+32768))
  5331  01A0  00A4               	movwf	bleSendCMD@pBuf
  5332  01A1  3090               	movlw	high (STR_7| (0+32768))
  5333  01A2  00A5               	movwf	bleSendCMD@pBuf+1
  5334  01A3  21AF  3180         	fcall	_bleSendCMD
  5335                           
  5336                           ;ble.c: 413: eusartRunPara.nCmd = 3;
  5337  01A5  3003               	movlw	3
  5338  01A6  00E2               	movwf	_eusartRunPara+3	;volatile
  5339                           
  5340                           ;ble.c: 414: bleSendCMD("AT+MODE=DATA\r\n");
  5341  01A7  3046               	movlw	low (STR_8| (0+32768))
  5342  01A8  00A4               	movwf	bleSendCMD@pBuf
  5343  01A9  3090               	movlw	high (STR_8| (0+32768))
  5344  01AA  00A5               	movwf	bleSendCMD@pBuf+1
  5345  01AB  21AF               	fcall	_bleSendCMD
  5346                           
  5347                           ;ble.c: 416: if(eusartRunPara.fComErr == 0)
  5348  01AC  1E5F               	btfss	_eusartRunPara,4	;volatile
  5349                           
  5350                           ;ble.c: 417: eusartRunPara.fMode = 1;
  5351  01AD  145F               	bsf	_eusartRunPara,0	;volatile
  5352  01AE  0008               	return
  5353  01AF                     __end_of_initBLE:	
  5354  01AF                     __ptext15:	
  5355 ;; *************** function _bleSendCMD *****************
  5356 ;; Defined at:
  5357 ;;		line 44 in file "src/ble.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  pBuf            2    4[BANK0 ] PTR const unsigned char 
  5360 ;;		 -> STR_8(15), STR_7(11), STR_6(34), STR_5(19), 
  5361 ;;		 -> STR_4(5), 
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      void 
  5366 ;; Registers used:
  5367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 1F/0
  5370 ;;		On exit  : 1F/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5373 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;Total ram usage:        2 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    7
  5380 ;; This function calls:
  5381 ;;		_eusartSendBuffer
  5382 ;; This function is called by:
  5383 ;;		_initBLE
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           
  5388                           ;psect for function _bleSendCMD
  5389  01AF                     _bleSendCMD:	
  5390                           
  5391                           ;ble.c: 46: eusartSendBuffer(pBuf);
  5392                           
  5393                           ;incstack = 0
  5394                           ; Regs used in _bleSendCMD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5395  01AF  2789  3180         	fcall	PL50	;call to abstracted procedure
  5396  01B1  21CB  3180         	fcall	_eusartSendBuffer
  5397                           
  5398                           ;ble.c: 47: eusartRunPara.fWaitForAck = 1;
  5399  01B3  14DF               	bsf	_eusartRunPara,1	;volatile
  5400                           
  5401                           ;ble.c: 48: eusartRunPara.nReSendCnt = 0;
  5402  01B4  01E1               	clrf	_eusartRunPara+2	;volatile
  5403                           
  5404                           ;ble.c: 49: while(!eusartRunPara.fAck)
  5405  01B5  29BA               	goto	l2511
  5406  01B6                     l2509:	
  5407                           ;ble.c: 60: break;
  5408                           
  5409                           
  5410                           ;ble.c: 61: }
  5411                           ;ble.c: 62: eusartSendBuffer(pBuf);
  5412  01B6  2789  3180         	fcall	PL50	;call to abstracted procedure
  5413  01B8  21CB  3180         	fcall	_eusartSendBuffer
  5414  01BA                     l2511:	
  5415  01BA  195F               	btfsc	_eusartRunPara,2	;volatile
  5416  01BB  29C9               	goto	l41
  5417                           
  5418                           ;ble.c: 50: {
  5419                           ;ble.c: 51: if(eusartRunPara.nOverTime >= 30)
  5420  01BC  301E               	movlw	30
  5421  01BD  0260               	subwf	_eusartRunPara+1,w	;volatile
  5422  01BE  1C03               	skipc
  5423  01BF  29BA               	goto	l2511
  5424                           
  5425                           ;ble.c: 52: {
  5426                           ;ble.c: 53: eusartRunPara.nOverTime = 0;
  5427  01C0  01E0               	clrf	_eusartRunPara+1	;volatile
  5428                           
  5429                           ;ble.c: 54: eusartRunPara.nReSendCnt ++;
  5430  01C1  0AE1               	incf	_eusartRunPara+2,f	;volatile
  5431                           
  5432                           ;ble.c: 55: if(eusartRunPara.nReSendCnt >= 3)
  5433  01C2  3003               	movlw	3
  5434  01C3  0261               	subwf	_eusartRunPara+2,w	;volatile
  5435  01C4  1C03               	skipc
  5436  01C5  29B6               	goto	l2509
  5437                           
  5438                           ;ble.c: 56: {
  5439                           ;ble.c: 57: eusartRunPara.nReSendCnt = 0;
  5440  01C6  01E1               	clrf	_eusartRunPara+2	;volatile
  5441                           
  5442                           ;ble.c: 58: eusartRunPara.fWaitForAck = 0;
  5443  01C7  10DF               	bcf	_eusartRunPara,1	;volatile
  5444                           
  5445                           ;ble.c: 59: eusartRunPara.fComErr = 1;
  5446  01C8  165F               	bsf	_eusartRunPara,4	;volatile
  5447  01C9                     l41:	
  5448                           
  5449                           ;ble.c: 63: }
  5450                           ;ble.c: 64: }
  5451                           ;ble.c: 65: eusartRunPara.fAck = 0;
  5452  01C9  115F               	bcf	_eusartRunPara,2	;volatile
  5453  01CA  0008               	return
  5454  01CB                     __end_of_bleSendCMD:	
  5455  01CB                     __ptext16:	
  5456 ;; *************** function _eusartSendBuffer *****************
  5457 ;; Defined at:
  5458 ;;		line 50 in file "src/eusart.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;  buf             2    1[BANK0 ] PTR const unsigned char 
  5461 ;;		 -> STR_8(15), STR_7(11), STR_6(34), STR_5(19), 
  5462 ;;		 -> STR_4(5), 
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;		None
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  1    wreg      void 
  5467 ;; Registers used:
  5468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5469 ;; Tracked objects:
  5470 ;;		On entry : 1F/0
  5471 ;;		On exit  : 1F/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5474 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5476 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5477 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5478 ;;Total ram usage:        3 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    6
  5481 ;; This function calls:
  5482 ;;		_eusartSendByte
  5483 ;; This function is called by:
  5484 ;;		_bleSendCMD
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           
  5489                           ;psect for function _eusartSendBuffer
  5490  01CB                     _eusartSendBuffer:	
  5491  01CB                     l2327:	
  5492                           ;eusart.c: 52: while(*buf != '\0')
  5493                           
  5494                           ;incstack = 0
  5495                           ; Regs used in _eusartSendBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5496                           
  5497  01CB  0821               	movf	eusartSendBuffer@buf,w
  5498  01CC  0084               	movwf	4
  5499  01CD  0822               	movf	eusartSendBuffer@buf+1,w
  5500  01CE  0085               	movwf	5
  5501  01CF  0012               	moviw fsr0++
  5502  01D0  1903               	btfsc	3,2
  5503  01D1  0008               	return
  5504                           
  5505                           ;eusart.c: 53: {
  5506                           ;eusart.c: 54: eusartSendByte(*buf);
  5507  01D2  0821               	movf	eusartSendBuffer@buf,w
  5508  01D3  0084               	movwf	4
  5509  01D4  0822               	movf	eusartSendBuffer@buf+1,w
  5510  01D5  0085               	movwf	5
  5511  01D6  0800               	movf	0,w	;code access
  5512  01D7  21DE  3180         	fcall	_eusartSendByte
  5513                           
  5514                           ;eusart.c: 55: buf++;
  5515  01D9  0020               	movlb	0	; select bank0
  5516  01DA  0AA1               	incf	eusartSendBuffer@buf,f
  5517  01DB  1903               	skipnz
  5518  01DC  0AA2               	incf	eusartSendBuffer@buf+1,f
  5519  01DD  29CB               	goto	l2327
  5520  01DE                     __end_of_eusartSendBuffer:	
  5521  01DE                     __ptext49:	
  5522 ;; *************** function _eusartSendByte *****************
  5523 ;; Defined at:
  5524 ;;		line 44 in file "src/eusart.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  byte            1    wreg     unsigned char 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  byte            1    0[BANK0 ] unsigned char 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;                  1    wreg      void 
  5531 ;; Registers used:
  5532 ;;		wreg
  5533 ;; Tracked objects:
  5534 ;;		On entry : 1F/0
  5535 ;;		On exit  : 1F/3
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;Total ram usage:        1 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    5
  5545 ;; This function calls:
  5546 ;;		Nothing
  5547 ;; This function is called by:
  5548 ;;		_bleSendData
  5549 ;;		_eusartSendBuffer
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           
  5554                           ;psect for function _eusartSendByte
  5555  01DE                     _eusartSendByte:	
  5556                           
  5557                           ;incstack = 0
  5558                           ; Regs used in _eusartSendByte: [wreg]
  5559                           ;eusartSendByte@byte stored from wreg
  5560  01DE  00A0               	movwf	eusartSendByte@byte
  5561  01DF                     l515:	
  5562                           ;eusart.c: 46: while(!TXIF);
  5563                           
  5564  01DF  1E11               	btfss	17,4	;volatile
  5565  01E0  29DF               	goto	l515
  5566                           
  5567                           ;eusart.c: 47: TXREG = byte;
  5568  01E1  0820               	movf	eusartSendByte@byte,w
  5569  01E2  0023               	movlb	3	; select bank3
  5570  01E3  009A               	movwf	26	;volatile
  5571  01E4  0008               	return
  5572  01E5                     __end_of_eusartSendByte:	
  5573  01E5                     __ptext8:	
  5574 ;; *************** function _initLed *****************
  5575 ;; Defined at:
  5576 ;;		line 139 in file "src/led.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;		None
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;		None
  5581 ;; Return value:  Size  Location     Type
  5582 ;;                  1    wreg      void 
  5583 ;; Registers used:
  5584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 1F/1
  5587 ;;		On exit  : 1F/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;Total ram usage:        0 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:   10
  5597 ;; This function calls:
  5598 ;;		_initLedPara
  5599 ;; This function is called by:
  5600 ;;		_main
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           
  5605                           ;psect for function _initLed
  5606  01E5                     _initLed:	
  5607                           
  5608                           ;led.c: 141: initLedPara();
  5609                           
  5610                           ;incstack = 0
  5611                           ; Regs used in _initLed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5612  01E5  2E6C               	ljmp	l2783
  5613  01E6                     __end_of_initLed:	
  5614  01E6                     __ptext7:	
  5615 ;; *************** function _initRTC *****************
  5616 ;; Defined at:
  5617 ;;		line 38 in file "src/rtc.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;		None
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;		None
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      void 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2
  5626 ;; Tracked objects:
  5627 ;;		On entry : 1F/0
  5628 ;;		On exit  : 1F/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5635 ;;Total ram usage:        0 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    5
  5638 ;; This function calls:
  5639 ;;		Nothing
  5640 ;; This function is called by:
  5641 ;;		_main
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           
  5646                           ;psect for function _initRTC
  5647  01E6                     _initRTC:	
  5648                           
  5649                           ;rtc.c: 40: gCurrentTime.datetime.second = 0;
  5650                           
  5651                           ;incstack = 0
  5652                           ; Regs used in _initRTC: [wreg+status,2]
  5653  01E6  01EC               	clrf	_gCurrentTime+6	;volatile
  5654                           
  5655                           ;rtc.c: 41: gCurrentTime.datetime.minute = 0;
  5656  01E7  01EB               	clrf	_gCurrentTime+5	;volatile
  5657                           
  5658                           ;rtc.c: 42: gCurrentTime.datetime.hour = 0;
  5659  01E8  01EA               	clrf	_gCurrentTime+4	;volatile
  5660                           
  5661                           ;rtc.c: 43: gCurrentTime.datetime.wk = 0;
  5662  01E9  01E9               	clrf	_gCurrentTime+3	;volatile
  5663                           
  5664                           ;rtc.c: 44: gCurrentTime.datetime.day = 1;
  5665  01EA  3001               	movlw	1
  5666  01EB  00E8               	movwf	_gCurrentTime+2	;volatile
  5667                           
  5668                           ;rtc.c: 45: gCurrentTime.datetime.month = 1;
  5669  01EC  00E7               	movwf	_gCurrentTime+1	;volatile
  5670                           
  5671                           ;rtc.c: 46: gCurrentTime.datetime.year = 0;
  5672  01ED  01E6               	clrf	_gCurrentTime	;volatile
  5673  01EE  0008               	return
  5674  01EF                     __end_of_initRTC:	
  5675  01EF                     __ptext1:	
  5676 ;; *************** function _saveLedPara *****************
  5677 ;; Defined at:
  5678 ;;		line 115 in file "src/eeprom.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  i               1   24[BANK0 ] unsigned char 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 1F/0
  5689 ;;		On exit  : 1F/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;Total ram usage:        2 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    9
  5699 ;; This function calls:
  5700 ;;		___wmul
  5701 ;;		_writeManualPara
  5702 ;;		_writeTimerPara
  5703 ;; This function is called by:
  5704 ;;		_main
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           
  5709                           ;psect for function _saveLedPara
  5710  01EF                     _saveLedPara:	
  5711                           
  5712                           ;eeprom.c: 117: if (gLedRunPara.nSaveDelayCount > 0)
  5713                           
  5714                           ;incstack = 0
  5715                           ; Regs used in _saveLedPara: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5716  01EF  0849               	movf	_gLedRunPara+1,w	;volatile
  5717  01F0  1D03               	btfss	3,2
  5718                           
  5719                           ;eeprom.c: 118: {
  5720                           ;eeprom.c: 119: gLedRunPara.nSaveDelayCount--;
  5721  01F1  03C9               	decf	_gLedRunPara+1,f	;volatile
  5722                           
  5723                           ;eeprom.c: 120: }
  5724                           ;eeprom.c: 121: if (gLedRunPara.nSaveDelayCount == 0)
  5725  01F2  0849               	movf	_gLedRunPara+1,w	;volatile
  5726  01F3  1D03               	btfss	3,2
  5727  01F4  0008               	return
  5728                           
  5729                           ;eeprom.c: 122: {
  5730                           ;eeprom.c: 123: writeManualPara( 0x10, gLedPara.mPara );
  5731  01F5  3099               	movlw	153
  5732  01F6  0086               	movwf	6
  5733  01F7  3023               	movlw	35
  5734  01F8  0087               	movwf	7
  5735  01F9  302B               	movlw	low writeManualPara@para
  5736  01FA  0084               	movwf	4
  5737  01FB  3000               	movlw	high writeManualPara@para
  5738  01FC  0085               	movwf	5
  5739  01FD  3007               	movlw	7
  5740  01FE  00B7               	movwf	??_saveLedPara
  5741  01FF                     u2710:	
  5742  01FF  0016               	moviw fsr1++
  5743  0200  001A               	movwi fsr0++
  5744  0201  0BB7               	decfsz	??_saveLedPara,f
  5745  0202  29FF               	goto	u2710
  5746  0203  3010               	movlw	16
  5747  0204  2228  3180         	fcall	_writeManualPara
  5748                           
  5749                           ;eeprom.c: 124: for (unsigned char i = 0; i < 8; i++)
  5750  0206  01B8               	clrf	saveLedPara@i
  5751  0207                     l3097:	
  5752                           
  5753                           ;eeprom.c: 125: {
  5754                           ;eeprom.c: 126: writeTimerPara(0x20, i, gLedPara.aPara[i]);
  5755  0207  0838               	movf	saveLedPara@i,w
  5756  0208  00AB               	movwf	writeTimerPara@idx
  5757  0209  0838               	movf	saveLedPara@i,w
  5758  020A  2720  3180         	fcall	PL4	;call to abstracted procedure
  5759  020C  2551  3180         	fcall	___wmul
  5760  020E  30A0               	movlw	160
  5761  020F  0720               	addwf	?___wmul,w
  5762  0210  0084               	movwf	4
  5763  0211  3023               	movlw	35
  5764  0212  3D21               	addwfc	?___wmul+1,w
  5765  0213  0085               	movwf	5
  5766  0214  302C               	movlw	low writeTimerPara@para
  5767  0215  0086               	movwf	6
  5768  0216  3000               	movlw	high writeTimerPara@para
  5769  0217  0087               	movwf	7
  5770  0218  300A               	movlw	10
  5771  0219  00B7               	movwf	??_saveLedPara
  5772  021A                     u2720:	
  5773  021A  0012               	moviw fsr0++
  5774  021B  001E               	movwi fsr1++
  5775  021C  0BB7               	decfsz	??_saveLedPara,f
  5776  021D  2A1A               	goto	u2720
  5777  021E  3020               	movlw	32
  5778  021F  222F  3180         	fcall	_writeTimerPara
  5779  0221  3008               	movlw	8
  5780  0222  0AB8               	incf	saveLedPara@i,f
  5781  0223  0238               	subwf	saveLedPara@i,w
  5782  0224  1C03               	skipc
  5783  0225  2A07               	goto	l3097
  5784                           
  5785                           ;eeprom.c: 127: }
  5786                           ;eeprom.c: 128: gLedRunPara.fSave = 0;
  5787  0226  1148               	bcf	_gLedRunPara,2	;volatile
  5788  0227  0008               	return
  5789  0228                     __end_of_saveLedPara:	
  5790  0228                     __ptext3:	
  5791 ;; *************** function _writeManualPara *****************
  5792 ;; Defined at:
  5793 ;;		line 91 in file "src/eeprom.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;  addr            1    wreg     unsigned char 
  5796 ;;  para            7   11[BANK0 ] struct .
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  addr            1   18[BANK0 ] unsigned char 
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  1    wreg      void 
  5801 ;; Registers used:
  5802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5803 ;; Tracked objects:
  5804 ;;		On entry : 1F/0
  5805 ;;		On exit  : 1F/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5808 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;Total ram usage:        8 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:    8
  5815 ;; This function calls:
  5816 ;;		_writeBuffer
  5817 ;; This function is called by:
  5818 ;;		_saveLedPara
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           
  5823                           ;psect for function _writeManualPara
  5824  0228                     _writeManualPara:	
  5825                           
  5826                           ;incstack = 0
  5827                           ; Regs used in _writeManualPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5828                           ;writeManualPara@addr stored from wreg
  5829  0228  00B2               	movwf	writeManualPara@addr
  5830                           
  5831                           ;eeprom.c: 93: writeBuffer(addr, (unsigned char*)&para, sizeof(para));
  5832  0229  302B               	movlw	(low (writeManualPara@para| 0))& (0+255)
  5833  022A  00A6               	movwf	writeBuffer@buf
  5834  022B  3007               	movlw	7
  5835  022C  00A7               	movwf	writeBuffer@len
  5836  022D  0832               	movf	writeManualPara@addr,w
  5837  022E  2A38               	ljmp	_writeBuffer
  5838  022F                     __end_of_writeManualPara:	
  5839  022F                     __ptext2:	
  5840 ;; *************** function _writeTimerPara *****************
  5841 ;; Defined at:
  5842 ;;		line 96 in file "src/eeprom.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  addr            1    wreg     unsigned char 
  5845 ;;  idx             1   11[BANK0 ] unsigned char 
  5846 ;;  para           10   12[BANK0 ] struct .
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;  addr            1   22[BANK0 ] unsigned char 
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      void 
  5851 ;; Registers used:
  5852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5853 ;; Tracked objects:
  5854 ;;		On entry : 1F/0
  5855 ;;		On exit  : 1F/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5858 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5859 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5861 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5862 ;;Total ram usage:       12 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:    8
  5865 ;; This function calls:
  5866 ;;		_writeBuffer
  5867 ;; This function is called by:
  5868 ;;		_saveLedPara
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           
  5873                           ;psect for function _writeTimerPara
  5874  022F                     _writeTimerPara:	
  5875                           
  5876                           ;incstack = 0
  5877                           ; Regs used in _writeTimerPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5878                           ;writeTimerPara@addr stored from wreg
  5879  022F  00B6               	movwf	writeTimerPara@addr
  5880                           
  5881                           ;eeprom.c: 98: writeBuffer(addr+idx*16, (unsigned char*)&para, sizeof(para));
  5882  0230  302C               	movlw	(low (writeTimerPara@para| 0))& (0+255)
  5883  0231  00A6               	movwf	writeBuffer@buf
  5884  0232  300A               	movlw	10
  5885  0233  00A7               	movwf	writeBuffer@len
  5886  0234  0E2B               	swapf	writeTimerPara@idx,w
  5887  0235  39F0               	andlw	240
  5888  0236  0736               	addwf	writeTimerPara@addr,w
  5889  0237  2A38               	ljmp	_writeBuffer
  5890  0238                     __end_of_writeTimerPara:	
  5891  0238                     __ptext4:	
  5892 ;; *************** function _writeBuffer *****************
  5893 ;; Defined at:
  5894 ;;		line 64 in file "src/eeprom.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;  addr            1    wreg     unsigned char 
  5897 ;;  buf             1    6[BANK0 ] PTR unsigned char 
  5898 ;;		 -> writeTimerPara@para(10), writeManualPara@para(7), 
  5899 ;;  len             1    7[BANK0 ] unsigned char 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  addr            1    9[BANK0 ] unsigned char 
  5902 ;;  i               1   10[BANK0 ] unsigned char 
  5903 ;; Return value:  Size  Location     Type
  5904 ;;                  1    wreg      void 
  5905 ;; Registers used:
  5906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5907 ;; Tracked objects:
  5908 ;;		On entry : 1F/0
  5909 ;;		On exit  : 1F/0
  5910 ;;		Unchanged: 0/0
  5911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5912 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5915 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5916 ;;Total ram usage:        5 bytes
  5917 ;; Hardware stack levels used:    1
  5918 ;; Hardware stack levels required when called:    7
  5919 ;; This function calls:
  5920 ;;		_writeByte
  5921 ;; This function is called by:
  5922 ;;		_writeManualPara
  5923 ;;		_writeTimerPara
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           
  5928                           ;psect for function _writeBuffer
  5929  0238                     _writeBuffer:	
  5930                           
  5931                           ;incstack = 0
  5932                           ; Regs used in _writeBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5933                           ;writeBuffer@addr stored from wreg
  5934  0238  00A9               	movwf	writeBuffer@addr
  5935                           
  5936                           ;eeprom.c: 66: for (unsigned char i = 0; i < len; i++)
  5937  0239  01AA               	clrf	writeBuffer@i
  5938  023A                     l2403:	
  5939  023A  0827               	movf	writeBuffer@len,w
  5940  023B  022A               	subwf	writeBuffer@i,w
  5941  023C  1803               	btfsc	3,0
  5942  023D  0008               	return
  5943                           
  5944                           ;eeprom.c: 67: {
  5945                           ;eeprom.c: 68: writeByte((addr+i), *(buf+i));
  5946  023E  082A               	movf	writeBuffer@i,w
  5947  023F  0726               	addwf	writeBuffer@buf,w
  5948  0240  00A8               	movwf	??_writeBuffer
  5949  0241  0086               	movwf	6
  5950  0242  0187               	clrf	7
  5951  0243  0801               	movf	1,w
  5952  0244  00A4               	movwf	writeByte@byte
  5953  0245  0829               	movf	writeBuffer@addr,w
  5954  0246  072A               	addwf	writeBuffer@i,w
  5955  0247  224B  3180         	fcall	_writeByte
  5956  0249  0AAA               	incf	writeBuffer@i,f
  5957  024A  2A3A               	goto	l2403
  5958  024B                     __end_of_writeBuffer:	
  5959  024B                     __ptext5:	
  5960 ;; *************** function _writeByte *****************
  5961 ;; Defined at:
  5962 ;;		line 42 in file "src/eeprom.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  addr            1    wreg     unsigned char 
  5965 ;;  byte            1    4[BANK0 ] unsigned char 
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;  addr            1    5[BANK0 ] unsigned char 
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  1    wreg      void 
  5970 ;; Registers used:
  5971 ;;		wreg, status,2, status,0, pclath, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 1F/0
  5974 ;;		On exit  : 1F/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5977 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;Total ram usage:        2 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:    6
  5984 ;; This function calls:
  5985 ;;		_DATAEE_WriteByte
  5986 ;; This function is called by:
  5987 ;;		_writeBuffer
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           
  5992                           ;psect for function _writeByte
  5993  024B                     _writeByte:	
  5994                           
  5995                           ;incstack = 0
  5996                           ; Regs used in _writeByte: [wreg+status,2+status,0+pclath+cstack]
  5997                           ;writeByte@addr stored from wreg
  5998  024B  00A5               	movwf	writeByte@addr
  5999                           
  6000                           ;eeprom.c: 44: DATAEE_WriteByte(0x7000 + addr, byte);
  6001  024C  00A0               	movwf	DATAEE_WriteByte@bAdd
  6002  024D  3070               	movlw	112
  6003  024E  01A1               	clrf	DATAEE_WriteByte@bAdd+1
  6004  024F  07A1               	addwf	DATAEE_WriteByte@bAdd+1,f
  6005  0250  0824               	movf	writeByte@byte,w
  6006  0251  00A2               	movwf	DATAEE_WriteByte@bData
  6007  0252  2EF5               	ljmp	l2219
  6008  0253                     __end_of_writeByte:	
  6009  0253                     __ptext38:	
  6010 ;; *************** function _EUSART_Initialize *****************
  6011 ;; Defined at:
  6012 ;;		line 6 in file "src/eusart.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;		None
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;		None
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  1    wreg      void 
  6019 ;; Registers used:
  6020 ;;		wreg
  6021 ;; Tracked objects:
  6022 ;;		On entry : 1F/1
  6023 ;;		On exit  : 1F/1
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;Total ram usage:        0 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:    5
  6033 ;; This function calls:
  6034 ;;		Nothing
  6035 ;; This function is called by:
  6036 ;;		_SYSTEM_Initialize
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           
  6041                           ;psect for function _EUSART_Initialize
  6042  0253                     _EUSART_Initialize:	
  6043  0253                     l2741:	
  6044                           ;incstack = 0
  6045                           ; Regs used in _EUSART_Initialize: [wreg]
  6046                           
  6047                           
  6048                           ;eusart.c: 9: PIE1bits.RCIE = 0;
  6049  0253  1291               	bcf	17,5	;volatile
  6050                           
  6051                           ;eusart.c: 10: PIE1bits.TXIE = 0;
  6052  0254  1211               	bcf	17,4	;volatile
  6053                           
  6054                           ;eusart.c: 15: BAUD1CON = 0x08;
  6055  0255  3008               	movlw	8
  6056  0256  0023               	movlb	3	; select bank3
  6057  0257  009F               	movwf	31	;volatile
  6058                           
  6059                           ;eusart.c: 18: RC1STA = 0x90;
  6060  0258  3090               	movlw	144
  6061  0259  009D               	movwf	29	;volatile
  6062                           
  6063                           ;eusart.c: 21: TX1STA = 0x24;
  6064  025A  3024               	movlw	36
  6065  025B  009E               	movwf	30	;volatile
  6066                           
  6067                           ;eusart.c: 24: SP1BRGL = 0xA0;
  6068  025C  30A0               	movlw	160
  6069  025D  009B               	movwf	27	;volatile
  6070                           
  6071                           ;eusart.c: 27: SP1BRGH = 0x01;
  6072  025E  3001               	movlw	1
  6073  025F  009C               	movwf	28	;volatile
  6074                           
  6075                           ;eusart.c: 30: PIE1bits.RCIE = 1;
  6076  0260  0021               	movlb	1	; select bank1
  6077  0261  1691               	bsf	17,5	;volatile
  6078  0262  0008               	return
  6079  0263                     __end_of_EUSART_Initialize:	
  6080  0263                     __ptext30:	
  6081 ;; *************** function _TMR0_Initialize *****************
  6082 ;; Defined at:
  6083 ;;		line 7 in file "src/tmr.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;		None
  6086 ;; Auto vars:     Size  Location     Type
  6087 ;;		None
  6088 ;; Return value:  Size  Location     Type
  6089 ;;                  1    wreg      void 
  6090 ;; Registers used:
  6091 ;;		wreg, status,2
  6092 ;; Tracked objects:
  6093 ;;		On entry : 1F/1
  6094 ;;		On exit  : 1F/1
  6095 ;;		Unchanged: 0/0
  6096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;Total ram usage:        0 bytes
  6102 ;; Hardware stack levels used:    1
  6103 ;; Hardware stack levels required when called:    5
  6104 ;; This function calls:
  6105 ;;		Nothing
  6106 ;; This function is called by:
  6107 ;;		_SYSTEM_Initialize
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           
  6112                           ;psect for function _TMR0_Initialize
  6113  0263                     _TMR0_Initialize:	
  6114                           
  6115                           ;tmr.c: 12: T0CON0 = 0x00;
  6116                           
  6117                           ;incstack = 0
  6118                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  6119  0263  0020               	movlb	0	; select bank0
  6120  0264  0197               	clrf	23	;volatile
  6121                           
  6122                           ;tmr.c: 15: T0CON1 = 0xD7;
  6123  0265  30D7               	movlw	215
  6124  0266  0098               	movwf	24	;volatile
  6125                           
  6126                           ;tmr.c: 18: TMR0H = 0xFF;
  6127  0267  30FF               	movlw	255
  6128  0268  0096               	movwf	22	;volatile
  6129                           
  6130                           ;tmr.c: 21: TMR0L = 0x00;
  6131  0269  0195               	clrf	21	;volatile
  6132                           
  6133                           ;tmr.c: 24: PIR0bits.TMR0IF = 0;
  6134  026A  1290               	bcf	16,5	;volatile
  6135                           
  6136                           ;tmr.c: 27: PIE0bits.TMR0IE = 1;
  6137  026B  0021               	movlb	1	; select bank1
  6138  026C  1690               	bsf	16,5	;volatile
  6139  026D  0008               	return
  6140  026E                     __end_of_TMR0_Initialize:	
  6141  026E                     __ptext19:	
  6142 ;; *************** function _turnMaxLed *****************
  6143 ;; Defined at:
  6144 ;;		line 101 in file "src/led.c"
  6145 ;; Parameters:    Size  Location     Type
  6146 ;;		None
  6147 ;; Auto vars:     Size  Location     Type
  6148 ;;		None
  6149 ;; Return value:  Size  Location     Type
  6150 ;;                  1    wreg      void 
  6151 ;; Registers used:
  6152 ;;		wreg, status,2, status,0, pclath, cstack
  6153 ;; Tracked objects:
  6154 ;;		On entry : 1F/0
  6155 ;;		On exit  : 1F/C
  6156 ;;		Unchanged: 0/0
  6157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;Total ram usage:        0 bytes
  6163 ;; Hardware stack levels used:    1
  6164 ;; Hardware stack levels required when called:    6
  6165 ;; This function calls:
  6166 ;;		_PWM1_LoadDutyValue
  6167 ;;		_PWM2_LoadDutyValue
  6168 ;;		_PWM3_LoadDutyValue
  6169 ;;		_PWM4_LoadDutyValue
  6170 ;;		_PWM5_LoadDutyValue
  6171 ;; This function is called by:
  6172 ;;		_findDeviceFlash
  6173 ;; This function uses a non-reentrant model
  6174 ;;
  6175                           
  6176                           
  6177                           ;psect for function _turnMaxLed
  6178  026E                     _turnMaxLed:	
  6179  026E                     l2779:	
  6180                           ;incstack = 0
  6181                           ; Regs used in _turnMaxLed: [wreg+status,2+status,0+pclath+cstack]
  6182                           
  6183                           
  6184                           ;led.c: 103: PWM1_LoadDutyValue( 1000 );
  6185  026E  30E8               	movlw	232
  6186  026F  00A0               	movwf	PWM1_LoadDutyValue@dutyValue
  6187  0270  3003               	movlw	3
  6188  0271  00A1               	movwf	PWM1_LoadDutyValue@dutyValue+1
  6189  0272  25D4  3180         	fcall	_PWM1_LoadDutyValue
  6190                           
  6191                           ;led.c: 104: PWM2_LoadDutyValue( 1000 );
  6192  0274  30E8               	movlw	232
  6193  0275  0020               	movlb	0	; select bank0
  6194  0276  00A0               	movwf	PWM2_LoadDutyValue@dutyValue
  6195  0277  3003               	movlw	3
  6196  0278  00A1               	movwf	PWM2_LoadDutyValue@dutyValue+1
  6197  0279  25E4  3180         	fcall	_PWM2_LoadDutyValue
  6198                           
  6199                           ;led.c: 105: PWM3_LoadDutyValue( 1000 );
  6200  027B  30E8               	movlw	232
  6201  027C  0020               	movlb	0	; select bank0
  6202  027D  00A0               	movwf	PWM3_LoadDutyValue@dutyValue
  6203  027E  3003               	movlw	3
  6204  027F  00A1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  6205  0280  25F4  3180         	fcall	_PWM3_LoadDutyValue
  6206                           
  6207                           ;led.c: 106: PWM4_LoadDutyValue( 1000 );
  6208  0282  30E8               	movlw	232
  6209  0283  0020               	movlb	0	; select bank0
  6210  0284  00A0               	movwf	PWM4_LoadDutyValue@dutyValue
  6211  0285  3003               	movlw	3
  6212  0286  00A1               	movwf	PWM4_LoadDutyValue@dutyValue+1
  6213  0287  262F  3180         	fcall	_PWM4_LoadDutyValue
  6214                           
  6215                           ;led.c: 107: PWM5_LoadDutyValue( 1000 );
  6216  0289  30E8               	movlw	232
  6217  028A  0020               	movlb	0	; select bank0
  6218  028B  00A0               	movwf	PWM5_LoadDutyValue@dutyValue
  6219  028C  3003               	movlw	3
  6220  028D  00A1               	movwf	PWM5_LoadDutyValue@dutyValue+1
  6221  028E  2E3F               	ljmp	l2453
  6222  028F                     __end_of_turnMaxLed:	
  6223  028F                     __ptext39:	
  6224 ;; *************** function _DecodeDATA *****************
  6225 ;; Defined at:
  6226 ;;		line 256 in file "src/ble.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;		None
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;  j               1   37[BANK0 ] unsigned char 
  6231 ;;  i               1   36[BANK0 ] unsigned char 
  6232 ;;  len             1   38[BANK0 ] unsigned char 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;                  1    wreg      void 
  6235 ;; Registers used:
  6236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6237 ;; Tracked objects:
  6238 ;;		On entry : 1F/2
  6239 ;;		On exit  : 1C/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;Total ram usage:       13 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; Hardware stack levels required when called:    8
  6249 ;; This function calls:
  6250 ;;		___bmul
  6251 ;;		___wmul
  6252 ;;		_bleSendDeviceTime
  6253 ;;		_bleSendManualData
  6254 ;;		_bleSendTimerData
  6255 ;;		_getCRC
  6256 ;;		_updatePara
  6257 ;; This function is called by:
  6258 ;;		_main
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           
  6263                           ;psect for function _DecodeDATA
  6264  028F                     _DecodeDATA:	
  6265                           
  6266                           ;ble.c: 259: unsigned char len;
  6267                           ;ble.c: 260: if(rxBuf[0] != 0x68)
  6268                           
  6269                           ;incstack = 0
  6270                           ; Regs used in _DecodeDATA: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6271  028F  3068               	movlw	104
  6272  0290  0021               	movlb	1	; select bank1
  6273  0291  0627               	xorwf	_rxBuf^(0+128),w
  6274  0292  1D03               	btfss	3,2
  6275  0293  0008               	return
  6276  0294  2BB6               	goto	l2979
  6277  0295                     l2883:	
  6278                           
  6279                           ;ble.c: 267: if(getCRC(rxBuf, 3) == rxBuf[3])
  6280  0295  2763  3180         	fcall	PL24	;call to abstracted procedure
  6281  0297  3003               	movlw	3
  6282  0298  00A5               	movwf	getCRC@len
  6283  0299  23D1  3180         	fcall	_getCRC
  6284  029B  0021               	movlb	1	; select bank1
  6285  029C  062A               	xorwf	(_rxBuf^(0+128)+3),w
  6286  029D  1D03               	skipz
  6287  029E  0008               	return
  6288                           
  6289                           ;ble.c: 268: {
  6290                           ;ble.c: 269: if(rxBuf[2] <= 0x03)
  6291  029F  3004               	movlw	4
  6292  02A0  0229               	subwf	(_rxBuf^(0+128)+2),w
  6293  02A1  1803               	skipnc
  6294  02A2  0008               	return
  6295                           
  6296                           ;ble.c: 270: {
  6297                           ;ble.c: 271: gLedPara.mPara.cw_rgb.fOn = rxBuf[2];
  6298  02A3  3099               	movlw	153
  6299  02A4  0086               	movwf	6
  6300  02A5  3023               	movlw	35
  6301  02A6  0087               	movwf	7
  6302  02A7  0829               	movf	(_rxBuf^(0+128)+2),w
  6303  02A8  3FC0               	movwi [0]fsr1
  6304                           
  6305                           ;ble.c: 272: gLedRunPara.fSave = 1;
  6306  02A9  0020               	movlb	0	; select bank0
  6307  02AA  1548               	bsf	_gLedRunPara,2	;volatile
  6308                           
  6309                           ;ble.c: 273: gLedRunPara.nSaveDelayCount = 3;
  6310  02AB  3003               	movlw	3
  6311  02AC  00C9               	movwf	_gLedRunPara+1	;volatile
  6312                           
  6313                           ;ble.c: 274: bleSendManualData();
  6314  02AD  258B  3180         	fcall	_bleSendManualData
  6315  02AF                     l2895:	
  6316                           
  6317                           ;ble.c: 275: updatePara();
  6318  02AF  2C65               	ljmp	l2595
  6319  02B0                     l2897:	
  6320                           
  6321                           ;ble.c: 281: if(rxBuf[2] == 0x01 )
  6322  02B0  0B29               	decfsz	(_rxBuf^(0+128)+2),w
  6323  02B1  2AE0               	goto	l2911
  6324                           
  6325                           ;ble.c: 284: if (getCRC(rxBuf, len) == rxBuf[len])
  6326  02B2  2763  3180         	fcall	PL24	;call to abstracted procedure
  6327  02B4  3007               	movlw	7
  6328  02B5  00A5               	movwf	getCRC@len
  6329  02B6  23D1  3180         	fcall	_getCRC
  6330  02B8  0021               	movlb	1	; select bank1
  6331  02B9  062E               	xorwf	(_rxBuf^(0+128)+7),w
  6332  02BA  1D03               	skipz
  6333  02BB  0008               	return
  6334                           
  6335                           ;ble.c: 285: {
  6336                           ;ble.c: 286: gLedPara.mPara.cw_rgb.fOn = 0x01;
  6337  02BC  3099               	movlw	153
  6338  02BD  0086               	movwf	6
  6339  02BE  3023               	movlw	35
  6340  02BF  0087               	movwf	7
  6341  02C0  3001               	movlw	1
  6342  02C1  3FC0               	movwi [0]fsr1
  6343                           
  6344                           ;ble.c: 287: gLedPara.mPara.cw_rgb.red = rxBuf[3];
  6345  02C2  082A               	movf	(_rxBuf^(0+128)+3),w
  6346  02C3  0020               	movlb	0	; select bank0
  6347  02C4  00BA               	movwf	??_DecodeDATA
  6348  02C5  309A               	movlw	154
  6349                           
  6350                           ;ble.c: 288: gLedPara.mPara.cw_rgb.green = rxBuf[4];
  6351  02C6  2769  3180         	fcall	PL26	;call to abstracted procedure
  6352  02C8  309B               	movlw	155
  6353  02C9  0086               	movwf	6
  6354  02CA  083A               	movf	??_DecodeDATA,w
  6355  02CB  0081               	movwf	1
  6356                           
  6357                           ;ble.c: 289: gLedPara.mPara.cw_rgb.blue = rxBuf[5];
  6358  02CC  0021               	movlb	1	; select bank1
  6359  02CD  082C               	movf	(_rxBuf^(0+128)+5),w
  6360  02CE  0020               	movlb	0	; select bank0
  6361  02CF  00BA               	movwf	??_DecodeDATA
  6362  02D0  309C               	movlw	156
  6363  02D1  0086               	movwf	6
  6364  02D2  083A               	movf	??_DecodeDATA,w
  6365  02D3  0081               	movwf	1
  6366                           
  6367                           ;ble.c: 290: gLedPara.mPara.cw_rgb.rgb_brt = rxBuf[6];
  6368  02D4  0021               	movlb	1	; select bank1
  6369  02D5  082D               	movf	(_rxBuf^(0+128)+6),w
  6370  02D6  0020               	movlb	0	; select bank0
  6371  02D7  00BA               	movwf	??_DecodeDATA
  6372  02D8  309D               	movlw	157
  6373  02D9                     L1:	
  6374  02D9  0086               	movwf	6
  6375  02DA  083A               	movf	??_DecodeDATA,w
  6376  02DB  0081               	movwf	1
  6377                           
  6378                           ;ble.c: 291: gLedRunPara.fSave = 1;
  6379  02DC  1548               	bsf	_gLedRunPara,2	;volatile
  6380                           
  6381                           ;ble.c: 292: gLedRunPara.nSaveDelayCount = 3;
  6382  02DD  3003               	movlw	3
  6383  02DE  00C9               	movwf	_gLedRunPara+1	;volatile
  6384  02DF  2AAF               	goto	l2895
  6385  02E0                     l2911:	
  6386                           
  6387                           ;ble.c: 296: else if(rxBuf[2] == 0x02 )
  6388  02E0  3002               	movlw	2
  6389  02E1  0629               	xorwf	(_rxBuf^(0+128)+2),w
  6390  02E2  1D03               	btfss	3,2
  6391  02E3  0008               	return
  6392                           
  6393                           ;ble.c: 299: if (getCRC(rxBuf, len) == rxBuf[len])
  6394  02E4  2763  3180         	fcall	PL24	;call to abstracted procedure
  6395  02E6  3005               	movlw	5
  6396  02E7  00A5               	movwf	getCRC@len
  6397  02E8  23D1  3180         	fcall	_getCRC
  6398  02EA  0021               	movlb	1	; select bank1
  6399  02EB  062C               	xorwf	(_rxBuf^(0+128)+5),w
  6400  02EC  1D03               	skipz
  6401  02ED  0008               	return
  6402                           
  6403                           ;ble.c: 300: {
  6404                           ;ble.c: 301: gLedPara.mPara.cw_rgb.fOn = 0x02;
  6405  02EE  3099               	movlw	153
  6406  02EF  0086               	movwf	6
  6407  02F0  3023               	movlw	35
  6408  02F1  0087               	movwf	7
  6409  02F2  3002               	movlw	2
  6410  02F3  3FC0               	movwi [0]fsr1
  6411                           
  6412                           ;ble.c: 302: gLedPara.mPara.cw_rgb.cw = rxBuf[3];
  6413  02F4  082A               	movf	(_rxBuf^(0+128)+3),w
  6414  02F5  0020               	movlb	0	; select bank0
  6415  02F6  00BA               	movwf	??_DecodeDATA
  6416  02F7  309E               	movlw	158
  6417                           
  6418                           ;ble.c: 303: gLedPara.mPara.cw_rgb.w_brt = rxBuf[4];
  6419  02F8  2769  3180         	fcall	PL26	;call to abstracted procedure
  6420  02FA  309F               	movlw	159
  6421  02FB  2AD9               	goto	L1
  6422  02FC                     l2925:	
  6423                           ;ble.c: 304: gLedRunPara.fSave = 1;
  6424                           
  6425                           
  6426                           ;ble.c: 329: if(rxBuf[0] ^ rxBuf[1] == rxBuf[2])
  6427  02FC  0828               	movf	(_rxBuf^(0+128)+1),w
  6428  02FD  0629               	xorwf	(_rxBuf^(0+128)+2),w
  6429  02FE  1D03               	btfss	3,2
  6430  02FF  2B02               	goto	u2360
  6431  0300  3001               	movlw	1
  6432  0301  2B03               	goto	u2370
  6433  0302                     u2360:	
  6434  0302  3000               	movlw	0
  6435  0303                     u2370:	
  6436  0303  0020               	movlb	0	; select bank0
  6437  0304  00BA               	movwf	??_DecodeDATA
  6438  0305  2726  3180         	fcall	PL6	;call to abstracted procedure
  6439  0307  1903               	btfsc	3,2
  6440  0308  0008               	return
  6441  0309                     l2927:	
  6442                           
  6443                           ;ble.c: 330: {
  6444                           ;ble.c: 331: bleSendManualData();
  6445  0309  2D8B               	ljmp	l2513
  6446  030A                     l2929:	
  6447                           
  6448                           ;ble.c: 336: if(rxBuf[0] ^ rxBuf[1] == rxBuf[2])
  6449  030A  0828               	movf	(_rxBuf^(0+128)+1),w
  6450  030B  0629               	xorwf	(_rxBuf^(0+128)+2),w
  6451  030C  1D03               	btfss	3,2
  6452  030D  2B10               	goto	u2390
  6453  030E  3001               	movlw	1
  6454  030F  2B11               	goto	u2400
  6455  0310                     u2390:	
  6456  0310  3000               	movlw	0
  6457  0311                     u2400:	
  6458  0311  0020               	movlb	0	; select bank0
  6459  0312  00BA               	movwf	??_DecodeDATA
  6460  0313  2726  3180         	fcall	PL6	;call to abstracted procedure
  6461  0315  1903               	btfsc	3,2
  6462  0316  0008               	return
  6463  0317                     l2931:	
  6464                           
  6465                           ;ble.c: 337: {
  6466                           ;ble.c: 338: bleSendTimerData();
  6467  0317  2BE5               	ljmp	l2529
  6468  0318                     l2933:	
  6469                           
  6470                           ;ble.c: 343: len = rxBuf[2];
  6471  0318  0829               	movf	(_rxBuf^(0+128)+2),w
  6472  0319  0020               	movlb	0	; select bank0
  6473  031A  00C6               	movwf	DecodeDATA@len
  6474                           
  6475                           ;ble.c: 344: if (len > 0 && getCRC(rxBuf, 10*len+3) == rxBuf[10*len+3])
  6476  031B  0846               	movf	DecodeDATA@len,w
  6477  031C  1903               	btfsc	3,2
  6478  031D  0008               	return
  6479  031E  300A               	movlw	10
  6480  031F  00A0               	movwf	___bmul@multiplicand
  6481  0320  0846               	movf	DecodeDATA@len,w
  6482  0321  2459  3180         	fcall	___bmul
  6483  0323  3EAA               	addlw	(low ((_rxBuf| 0+3)))& (0+255)
  6484  0324  0084               	movwf	4
  6485  0325  30A7               	movlw	low _rxBuf
  6486  0326  0185               	clrf	5
  6487  0327  00A3               	movwf	getCRC@pbuf
  6488  0328  3000               	movlw	high _rxBuf
  6489  0329  00A4               	movwf	getCRC@pbuf+1
  6490  032A  300A               	movlw	10
  6491  032B  00A0               	movwf	___bmul@multiplicand
  6492  032C  0846               	movf	DecodeDATA@len,w
  6493  032D  2459  3180         	fcall	___bmul
  6494  032F  3E03               	addlw	3
  6495  0330  00A5               	movwf	getCRC@len
  6496  0331  23D1  3180         	fcall	_getCRC
  6497  0333  0600               	xorwf	0,w
  6498  0334  1D03               	skipz
  6499  0335  0008               	return
  6500                           
  6501                           ;ble.c: 345: {
  6502                           ;ble.c: 346: for (unsigned char i = 0; i < len; i++)
  6503  0336  01C4               	clrf	DecodeDATA@i
  6504  0337                     l2955:	
  6505  0337  0846               	movf	DecodeDATA@len,w
  6506  0338  0244               	subwf	DecodeDATA@i,w
  6507  0339  1803               	btfsc	3,0
  6508  033A  2B6D               	goto	l143
  6509                           
  6510                           ;ble.c: 347: {
  6511                           ;ble.c: 348: for (unsigned char j = 0; j < 10; j++)
  6512  033B  01C5               	clrf	DecodeDATA@j
  6513  033C                     l2947:	
  6514                           
  6515                           ;ble.c: 349: {
  6516                           ;ble.c: 350: gLedPara.aPara[i].array[j] = rxBuf[3+i*10+j];
  6517  033C  300A               	movlw	10
  6518  033D  00A0               	movwf	___bmul@multiplicand
  6519  033E  0844               	movf	DecodeDATA@i,w
  6520  033F  2459  3180         	fcall	___bmul
  6521  0341  3EAA               	addlw	(low ((_rxBuf| 0+3)))& (0+255)
  6522  0342  0745               	addwf	DecodeDATA@j,w
  6523  0343  00BA               	movwf	??_DecodeDATA
  6524  0344  0086               	movwf	6
  6525  0345  0187               	clrf	7
  6526  0346  0801               	movf	1,w
  6527  0347  00BB               	movwf	??_DecodeDATA+1
  6528  0348  0845               	movf	DecodeDATA@j,w
  6529  0349  00BC               	movwf	??_DecodeDATA+2
  6530  034A  01BD               	clrf	??_DecodeDATA+3
  6531  034B  0844               	movf	DecodeDATA@i,w
  6532  034C  2720  3180         	fcall	PL4	;call to abstracted procedure
  6533  034E  2551  3180         	fcall	___wmul
  6534  0350  30A0               	movlw	160
  6535  0351  00BE               	movwf	??_DecodeDATA+4
  6536  0352  3023               	movlw	35
  6537  0353  00BF               	movwf	??_DecodeDATA+5
  6538  0354  0820               	movf	?___wmul,w
  6539  0355  073E               	addwf	??_DecodeDATA+4,w
  6540  0356  00C0               	movwf	??_DecodeDATA+6
  6541  0357  0821               	movf	?___wmul+1,w
  6542  0358  3D3F               	addwfc	??_DecodeDATA+5,w
  6543  0359  00C1               	movwf	??_DecodeDATA+7
  6544  035A  083C               	movf	??_DecodeDATA+2,w
  6545  035B  0740               	addwf	??_DecodeDATA+6,w
  6546  035C  00C2               	movwf	??_DecodeDATA+8
  6547  035D  083D               	movf	??_DecodeDATA+3,w
  6548  035E  3D41               	addwfc	??_DecodeDATA+7,w
  6549  035F  00C3               	movwf	??_DecodeDATA+9
  6550  0360  0842               	movf	??_DecodeDATA+8,w
  6551  0361  0086               	movwf	6
  6552  0362  0843               	movf	??_DecodeDATA+9,w
  6553  0363  0087               	movwf	7
  6554  0364  083B               	movf	??_DecodeDATA+1,w
  6555  0365  0081               	movwf	1
  6556  0366  300A               	movlw	10
  6557  0367  0AC5               	incf	DecodeDATA@j,f
  6558  0368  0245               	subwf	DecodeDATA@j,w
  6559  0369  1C03               	skipc
  6560  036A  2B3C               	goto	l2947
  6561  036B  0AC4               	incf	DecodeDATA@i,f
  6562  036C  2B37               	goto	l2955
  6563  036D                     l143:	
  6564                           
  6565                           ;ble.c: 351: }
  6566                           ;ble.c: 352: }
  6567                           ;ble.c: 353: gLedRunPara.fSave = 1;
  6568  036D  1548               	bsf	_gLedRunPara,2	;volatile
  6569                           
  6570                           ;ble.c: 354: gLedRunPara.nSaveDelayCount = 3;
  6571  036E  3003               	movlw	3
  6572  036F  00C9               	movwf	_gLedRunPara+1	;volatile
  6573  0370  2B17               	goto	l2931
  6574  0371                     l2961:	
  6575                           
  6576                           ;ble.c: 360: if (rxBuf[0] ^ rxBuf[1] == rxBuf[2])
  6577  0371  0828               	movf	(_rxBuf^(0+128)+1),w
  6578  0372  0629               	xorwf	(_rxBuf^(0+128)+2),w
  6579  0373  1D03               	btfss	3,2
  6580  0374  2B77               	goto	u2460
  6581  0375  3001               	movlw	1
  6582  0376  2B78               	goto	u2470
  6583  0377                     u2460:	
  6584  0377  3000               	movlw	0
  6585  0378                     u2470:	
  6586  0378  0020               	movlb	0	; select bank0
  6587  0379  00BA               	movwf	??_DecodeDATA
  6588  037A  2726  3180         	fcall	PL6	;call to abstracted procedure
  6589  037C  1903               	btfsc	3,2
  6590  037D  0008               	return
  6591                           
  6592                           ;ble.c: 361: {
  6593                           ;ble.c: 362: bleSendDeviceTime();
  6594  037E  2E04               	ljmp	l2565
  6595  037F                     l2965:	
  6596                           
  6597                           ;ble.c: 367: if (getCRC(rxBuf, 9) == rxBuf[9])
  6598  037F  2763  3180         	fcall	PL24	;call to abstracted procedure
  6599  0381  3009               	movlw	9
  6600  0382  00A5               	movwf	getCRC@len
  6601  0383  23D1  3180         	fcall	_getCRC
  6602  0385  0021               	movlb	1	; select bank1
  6603  0386  0630               	xorwf	(_rxBuf^(0+128)+9),w
  6604  0387  1D03               	skipz
  6605  0388  0008               	return
  6606                           
  6607                           ;ble.c: 368: {
  6608                           ;ble.c: 369: gCurrentTime.datetime.year = rxBuf[2];
  6609  0389  0829               	movf	(_rxBuf^(0+128)+2),w
  6610  038A  0020               	movlb	0	; select bank0
  6611  038B  00E6               	movwf	_gCurrentTime	;volatile
  6612                           
  6613                           ;ble.c: 370: gCurrentTime.datetime.month = rxBuf[3];
  6614  038C  0021               	movlb	1	; select bank1
  6615  038D  082A               	movf	(_rxBuf^(0+128)+3),w
  6616  038E  0020               	movlb	0	; select bank0
  6617  038F  00E7               	movwf	_gCurrentTime+1	;volatile
  6618                           
  6619                           ;ble.c: 371: gCurrentTime.datetime.day = rxBuf[4];
  6620  0390  0021               	movlb	1	; select bank1
  6621  0391  082B               	movf	(_rxBuf^(0+128)+4),w
  6622  0392  0020               	movlb	0	; select bank0
  6623  0393  00E8               	movwf	_gCurrentTime+2	;volatile
  6624                           
  6625                           ;ble.c: 372: gCurrentTime.datetime.wk = rxBuf[5];
  6626  0394  0021               	movlb	1	; select bank1
  6627  0395  082C               	movf	(_rxBuf^(0+128)+5),w
  6628  0396  0020               	movlb	0	; select bank0
  6629  0397  00E9               	movwf	_gCurrentTime+3	;volatile
  6630                           
  6631                           ;ble.c: 373: gCurrentTime.datetime.hour = rxBuf[6];
  6632  0398  0021               	movlb	1	; select bank1
  6633  0399  082D               	movf	(_rxBuf^(0+128)+6),w
  6634  039A  0020               	movlb	0	; select bank0
  6635  039B  00EA               	movwf	_gCurrentTime+4	;volatile
  6636                           
  6637                           ;ble.c: 374: gCurrentTime.datetime.minute = rxBuf[7];
  6638  039C  0021               	movlb	1	; select bank1
  6639  039D  082E               	movf	(_rxBuf^(0+128)+7),w
  6640  039E  0020               	movlb	0	; select bank0
  6641  039F  00EB               	movwf	_gCurrentTime+5	;volatile
  6642                           
  6643                           ;ble.c: 375: gCurrentTime.datetime.second = rxBuf[8];
  6644  03A0  0021               	movlb	1	; select bank1
  6645  03A1  082F               	movf	(_rxBuf^(0+128)+8),w
  6646  03A2  0020               	movlb	0	; select bank0
  6647  03A3  00EC               	movwf	_gCurrentTime+6	;volatile
  6648  03A4  2B09               	goto	l2927
  6649  03A5                     l2971:	
  6650                           
  6651                           ;ble.c: 381: if (rxBuf[0] ^ rxBuf[1] == rxBuf[2])
  6652  03A5  0828               	movf	(_rxBuf^(0+128)+1),w
  6653  03A6  0629               	xorwf	(_rxBuf^(0+128)+2),w
  6654  03A7  1D03               	btfss	3,2
  6655  03A8  2BAB               	goto	u2500
  6656  03A9  3001               	movlw	1
  6657  03AA  2BAC               	goto	u2510
  6658  03AB                     u2500:	
  6659  03AB  3000               	movlw	0
  6660  03AC                     u2510:	
  6661  03AC  0020               	movlb	0	; select bank0
  6662  03AD  00BA               	movwf	??_DecodeDATA
  6663  03AE  2726  3180         	fcall	PL6	;call to abstracted procedure
  6664  03B0  1903               	btfsc	3,2
  6665  03B1  0008               	return
  6666                           
  6667                           ;ble.c: 382: {
  6668                           ;ble.c: 383: gLedRunPara.find = 1;
  6669  03B2  15C8               	bsf	_gLedRunPara,3	;volatile
  6670                           
  6671                           ;ble.c: 384: gLedRunPara.nFlashCount = 3;
  6672  03B3  3003               	movlw	3
  6673  03B4  00CA               	movwf	_gLedRunPara+2	;volatile
  6674  03B5  0008               	return
  6675  03B6                     l2979:	
  6676  03B6  0828               	movf	(_rxBuf^(0+128)+1),w
  6677                           
  6678                           ; Switch size 1, requested type "space"
  6679                           ; Number of cases is 8, Range of values is 3 to 15
  6680                           ; switch strategies available:
  6681                           ; Name         Instructions Cycles
  6682                           ; simple_byte           25    13 (average)
  6683                           ; direct_byte           35     9 (fixed)
  6684                           ; jumptable            263     9 (fixed)
  6685                           ;	Chosen strategy is simple_byte
  6686  03B7  3A03               	xorlw	3	; case 3
  6687  03B8  1903               	skipnz
  6688  03B9  2A95               	goto	l2883
  6689  03BA  3A07               	xorlw	7	; case 4
  6690  03BB  1903               	skipnz
  6691  03BC  2AB0               	goto	l2897
  6692  03BD  3A01               	xorlw	1	; case 5
  6693  03BE  1903               	skipnz
  6694  03BF  2AFC               	goto	l2925
  6695  03C0  3A03               	xorlw	3	; case 6
  6696  03C1  1903               	skipnz
  6697  03C2  2B0A               	goto	l2929
  6698  03C3  3A01               	xorlw	1	; case 7
  6699  03C4  1903               	skipnz
  6700  03C5  2B18               	goto	l2933
  6701  03C6  3A0A               	xorlw	10	; case 13
  6702  03C7  1903               	skipnz
  6703  03C8  2B71               	goto	l2961
  6704  03C9  3A03               	xorlw	3	; case 14
  6705  03CA  1903               	skipnz
  6706  03CB  2B7F               	goto	l2965
  6707  03CC  3A01               	xorlw	1	; case 15
  6708  03CD  1903               	skipnz
  6709  03CE  2BA5               	goto	l2971
  6710  03CF  2BD0               	goto	l121
  6711  03D0                     l121:	
  6712  03D0  0008               	return
  6713  03D1                     __end_of_DecodeDATA:	
  6714  03D1                     __ptext47:	
  6715 ;; *************** function _getCRC *****************
  6716 ;; Defined at:
  6717 ;;		line 34 in file "src/ble.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;  pbuf            2    3[BANK0 ] PTR unsigned char 
  6720 ;;		 -> rxBuf(32), txBuf(32), 
  6721 ;;  len             1    5[BANK0 ] unsigned char 
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;  i               1    9[BANK0 ] unsigned char 
  6724 ;;  result          1    8[BANK0 ] unsigned char 
  6725 ;; Return value:  Size  Location     Type
  6726 ;;                  1    wreg      unsigned char 
  6727 ;; Registers used:
  6728 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6729 ;; Tracked objects:
  6730 ;;		On entry : 1F/0
  6731 ;;		On exit  : 1F/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6734 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;Total ram usage:        7 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    5
  6741 ;; This function calls:
  6742 ;;		Nothing
  6743 ;; This function is called by:
  6744 ;;		_bleSendManualData
  6745 ;;		_bleSendTimerData
  6746 ;;		_bleSendDeviceTime
  6747 ;;		_DecodeDATA
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function _getCRC
  6753  03D1                     _getCRC:	
  6754                           
  6755                           ;ble.c: 36: unsigned char result = 0x00;
  6756                           
  6757                           ;incstack = 0
  6758                           ; Regs used in _getCRC: [wreg+fsr1l+fsr1h+status,2+status,0]
  6759  03D1  01A8               	clrf	getCRC@result
  6760                           
  6761                           ;ble.c: 37: for(unsigned char i = 0; i < len; i++)
  6762  03D2  01A9               	clrf	getCRC@i
  6763  03D3                     l2315:	
  6764  03D3  0825               	movf	getCRC@len,w
  6765  03D4  0229               	subwf	getCRC@i,w
  6766  03D5  1803               	btfsc	3,0
  6767  03D6  2BE3               	goto	l2317
  6768                           
  6769                           ;ble.c: 38: {
  6770                           ;ble.c: 39: result ^= *(pbuf+i);
  6771  03D7  0829               	movf	getCRC@i,w
  6772  03D8  00A6               	movwf	??_getCRC
  6773  03D9  01A7               	clrf	??_getCRC+1
  6774  03DA  0723               	addwf	getCRC@pbuf,w
  6775  03DB  0086               	movwf	6
  6776  03DC  0827               	movf	??_getCRC+1,w
  6777  03DD  3D24               	addwfc	getCRC@pbuf+1,w
  6778  03DE  0087               	movwf	7
  6779  03DF  0801               	movf	1,w
  6780  03E0  06A8               	xorwf	getCRC@result,f
  6781  03E1  0AA9               	incf	getCRC@i,f
  6782  03E2  2BD3               	goto	l2315
  6783  03E3                     l2317:	
  6784                           
  6785                           ;ble.c: 40: }
  6786                           ;ble.c: 41: return result;
  6787  03E3  0828               	movf	getCRC@result,w
  6788  03E4  0008               	return
  6789  03E5                     __end_of_getCRC:	
  6790  03E5                     __ptext41:	
  6791 ;; *************** function _bleSendTimerData *****************
  6792 ;; Defined at:
  6793 ;;		line 135 in file "src/ble.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;		None
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;  len             1   25[BANK0 ] unsigned char 
  6798 ;;  j               1   24[BANK0 ] unsigned char 
  6799 ;;  i               1   23[BANK0 ] unsigned char 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;                  1    wreg      void 
  6802 ;; Registers used:
  6803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6804 ;; Tracked objects:
  6805 ;;		On entry : 1D/0
  6806 ;;		On exit  : 1F/2
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6810 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;Total ram usage:       10 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:    7
  6816 ;; This function calls:
  6817 ;;		___bmul
  6818 ;;		___wmul
  6819 ;;		_bleSendData
  6820 ;;		_getCRC
  6821 ;;		_isValidTimer
  6822 ;; This function is called by:
  6823 ;;		_DecodeDATA
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           
  6828                           ;psect for function _bleSendTimerData
  6829  03E5                     _bleSendTimerData:	
  6830  03E5                     l2529:	
  6831                           ;incstack = 0
  6832                           ; Regs used in _bleSendTimerData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6833                           
  6834                           
  6835                           ;ble.c: 137: unsigned char i, j;
  6836                           ;ble.c: 138: unsigned char len = 0;
  6837  03E5  0020               	movlb	0	; select bank0
  6838  03E6  3068               	movlw	104
  6839  03E7  01B9               	clrf	bleSendTimerData@len
  6840                           
  6841                           ;ble.c: 139: unsigned char len;
  6842                           ;ble.c: 140: txBuf[0] = 0x68;
  6843  03E8  0022               	movlb	2	; select bank2
  6844  03E9  00A0               	movwf	_txBuf^(0+256)
  6845                           
  6846                           ;ble.c: 141: txBuf[1] = 0x06;
  6847  03EA  3006               	movlw	6
  6848  03EB  00A1               	movwf	(_txBuf^(0+256)+1)
  6849                           
  6850                           ;ble.c: 142: for (i = 0; i < 8; i++)
  6851  03EC  0020               	movlb	0	; select bank0
  6852  03ED  01B7               	clrf	bleSendTimerData@i
  6853  03EE  2C20               	goto	l2539
  6854  03EF                     l2541:	
  6855                           
  6856                           ;ble.c: 145: {
  6857                           ;ble.c: 146: for (j = 0; j < 10; j++)
  6858  03EF  01B8               	clrf	bleSendTimerData@j
  6859  03F0                     l2547:	
  6860                           
  6861                           ;ble.c: 147: {
  6862                           ;ble.c: 148: txBuf[3+10*len+j] = gLedPara.aPara[i].array[j];
  6863  03F0  300A               	movlw	10
  6864  03F1  00A0               	movwf	___bmul@multiplicand
  6865  03F2  0839               	movf	bleSendTimerData@len,w
  6866  03F3  2459  3180         	fcall	___bmul
  6867  03F5  3E23               	addlw	(low ((_txBuf| (0+256)+3)))& (0+255)
  6868  03F6  0738               	addwf	bleSendTimerData@j,w
  6869  03F7  00B0               	movwf	??_bleSendTimerData
  6870  03F8  0086               	movwf	6
  6871  03F9  3001               	movlw	1	; select bank2/3
  6872  03FA  0087               	movwf	7
  6873  03FB  0838               	movf	bleSendTimerData@j,w
  6874  03FC  00B1               	movwf	??_bleSendTimerData+1
  6875  03FD  01B2               	clrf	??_bleSendTimerData+2
  6876  03FE  0837               	movf	bleSendTimerData@i,w
  6877  03FF  2720  3180         	fcall	PL4	;call to abstracted procedure
  6878  0401  2551  3180         	fcall	___wmul
  6879  0403  30A0               	movlw	160
  6880  0404  00B3               	movwf	??_bleSendTimerData+3
  6881  0405  3023               	movlw	35
  6882  0406  00B4               	movwf	??_bleSendTimerData+4
  6883  0407  0820               	movf	?___wmul,w
  6884  0408  0733               	addwf	??_bleSendTimerData+3,w
  6885  0409  00B5               	movwf	??_bleSendTimerData+5
  6886  040A  0821               	movf	?___wmul+1,w
  6887  040B  3D34               	addwfc	??_bleSendTimerData+4,w
  6888  040C  00B6               	movwf	??_bleSendTimerData+6
  6889  040D  0831               	movf	??_bleSendTimerData+1,w
  6890  040E  0735               	addwf	??_bleSendTimerData+5,w
  6891  040F  0084               	movwf	4
  6892  0410  0832               	movf	??_bleSendTimerData+2,w
  6893  0411  3D36               	addwfc	??_bleSendTimerData+6,w
  6894  0412  0085               	movwf	5
  6895  0413  0800               	movf	0,w
  6896  0414  0081               	movwf	1
  6897  0415  300A               	movlw	10
  6898  0416  0AB8               	incf	bleSendTimerData@j,f
  6899  0417  0238               	subwf	bleSendTimerData@j,w
  6900  0418  1C03               	skipc
  6901  0419  2BF0               	goto	l2547
  6902  041A  3008               	movlw	8
  6903                           
  6904                           ;ble.c: 149: }
  6905                           ;ble.c: 150: len++;
  6906  041B  0AB9               	incf	bleSendTimerData@len,f
  6907                           
  6908                           ;ble.c: 151: }
  6909  041C  0AB7               	incf	bleSendTimerData@i,f
  6910  041D  0237               	subwf	bleSendTimerData@i,w
  6911  041E  1803               	btfsc	3,0
  6912  041F  2C33               	goto	l2559
  6913  0420                     l2539:	
  6914                           
  6915                           ;ble.c: 143: {
  6916                           ;ble.c: 144: if (isValidTimer(gLedPara.aPara[i]))
  6917  0420  0837               	movf	bleSendTimerData@i,w
  6918  0421  2720  3180         	fcall	PL4	;call to abstracted procedure
  6919  0423  2551  3180         	fcall	___wmul
  6920  0425  30A0               	movlw	160
  6921  0426  0720               	addwf	?___wmul,w
  6922  0427  273A  3180         	fcall	PL14	;call to abstracted procedure
  6923  0429  00B0               	movwf	??_bleSendTimerData
  6924  042A                     u1980:	
  6925  042A  0012               	moviw fsr0++
  6926  042B  001E               	movwi fsr1++
  6927  042C  0BB0               	decfsz	??_bleSendTimerData,f
  6928  042D  2C2A               	goto	u1980
  6929  042E  2566  3180         	fcall	_isValidTimer
  6930  0430  3A00               	xorlw	0
  6931  0431  1D03               	btfss	3,2
  6932  0432  2BEF               	goto	l2541
  6933  0433                     l2559:	
  6934                           
  6935                           ;ble.c: 155: }
  6936                           ;ble.c: 156: }
  6937                           ;ble.c: 157: txBuf[2] = len;
  6938  0433  0839               	movf	bleSendTimerData@len,w
  6939  0434  0022               	movlb	2	; select bank2
  6940  0435  00A2               	movwf	(_txBuf^(0+256)+2)
  6941                           
  6942                           ;ble.c: 158: txBuf[3+len*10] = getCRC(txBuf, 3+len*10);
  6943  0436  3020               	movlw	low _txBuf
  6944  0437  0020               	movlb	0	; select bank0
  6945  0438  00A3               	movwf	getCRC@pbuf
  6946  0439  3001               	movlw	high _txBuf
  6947  043A  00A4               	movwf	getCRC@pbuf+1
  6948  043B  300A               	movlw	10
  6949  043C  00A0               	movwf	___bmul@multiplicand
  6950  043D  0839               	movf	bleSendTimerData@len,w
  6951  043E  2459  3180         	fcall	___bmul
  6952  0440  3E03               	addlw	3
  6953  0441  00A5               	movwf	getCRC@len
  6954  0442  23D1  3180         	fcall	_getCRC
  6955  0444  00B0               	movwf	??_bleSendTimerData
  6956  0445  300A               	movlw	10
  6957  0446  00A0               	movwf	___bmul@multiplicand
  6958  0447  0839               	movf	bleSendTimerData@len,w
  6959  0448  2459  3180         	fcall	___bmul
  6960  044A  3E23               	addlw	(low ((_txBuf| (0+256)+3)))& (0+255)
  6961  044B  0086               	movwf	6
  6962  044C  3001               	movlw	1	; select bank2/3
  6963  044D  0087               	movwf	7
  6964  044E  0830               	movf	??_bleSendTimerData,w
  6965  044F  0081               	movwf	1
  6966                           
  6967                           ;ble.c: 159: bleSendData(txBuf, 4+len*10);
  6968  0450  300A               	movlw	10
  6969  0451  00A0               	movwf	___bmul@multiplicand
  6970  0452  0839               	movf	bleSendTimerData@len,w
  6971  0453  2459  3180         	fcall	___bmul
  6972  0455  3E04               	addlw	4
  6973  0456  00A3               	movwf	bleSendData@len
  6974  0457  3020               	movlw	(low (_txBuf| (0+256)))& (0+255)
  6975  0458  2DB3               	ljmp	_bleSendData
  6976  0459                     __end_of_bleSendTimerData:	
  6977  0459                     __ptext44:	
  6978 ;; *************** function ___bmul *****************
  6979 ;; Defined at:
  6980 ;;		line 4 in file "/Applications/microchip/xc8/v1.40/sources/common/Umul8.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;  multiplier      1    wreg     unsigned char 
  6983 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  6984 ;; Auto vars:     Size  Location     Type
  6985 ;;  multiplier      1    2[BANK0 ] unsigned char 
  6986 ;;  product         1    1[BANK0 ] unsigned char 
  6987 ;; Return value:  Size  Location     Type
  6988 ;;                  1    wreg      unsigned char 
  6989 ;; Registers used:
  6990 ;;		wreg, status,2, status,0
  6991 ;; Tracked objects:
  6992 ;;		On entry : 1F/0
  6993 ;;		On exit  : 1F/0
  6994 ;;		Unchanged: 0/0
  6995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6996 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6997 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;Total ram usage:        3 bytes
  7001 ;; Hardware stack levels used:    1
  7002 ;; Hardware stack levels required when called:    5
  7003 ;; This function calls:
  7004 ;;		Nothing
  7005 ;; This function is called by:
  7006 ;;		_bleSendTimerData
  7007 ;;		_DecodeDATA
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           
  7012                           ;psect for function ___bmul
  7013  0459                     ___bmul:	
  7014                           
  7015                           ;incstack = 0
  7016                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7017                           ;___bmul@multiplier stored from wreg
  7018  0459  00A2               	movwf	___bmul@multiplier
  7019  045A  01A1               	clrf	___bmul@product
  7020  045B                     l2457:	
  7021  045B  0820               	movf	___bmul@multiplicand,w
  7022  045C  1822               	btfsc	___bmul@multiplier,0
  7023  045D  07A1               	addwf	___bmul@product,f
  7024  045E  35A0               	lslf	___bmul@multiplicand,f
  7025  045F  36A2               	lsrf	___bmul@multiplier,f
  7026  0460  0822               	movf	___bmul@multiplier,w
  7027  0461  1D03               	btfss	3,2
  7028  0462  2C5B               	goto	l2457
  7029  0463  0821               	movf	___bmul@product,w
  7030  0464  0008               	return
  7031  0465                     __end_of___bmul:	
  7032  0465                     __ptext40:	
  7033 ;; *************** function _updatePara *****************
  7034 ;; Defined at:
  7035 ;;		line 8 in file "src/led.c"
  7036 ;; Parameters:    Size  Location     Type
  7037 ;;		None
  7038 ;; Auto vars:     Size  Location     Type
  7039 ;;  i               1    8[BANK0 ] unsigned char 
  7040 ;; Return value:  Size  Location     Type
  7041 ;;                  1    wreg      void 
  7042 ;; Registers used:
  7043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7044 ;; Tracked objects:
  7045 ;;		On entry : 1D/0
  7046 ;;		On exit  : 1F/0
  7047 ;;		Unchanged: 0/0
  7048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7052 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7053 ;;Total ram usage:        3 bytes
  7054 ;; Hardware stack levels used:    1
  7055 ;; Hardware stack levels required when called:    6
  7056 ;; This function calls:
  7057 ;;		___wmul
  7058 ;; This function is called by:
  7059 ;;		_DecodeDATA
  7060 ;;		_autoRun
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           
  7065                           ;psect for function _updatePara
  7066  0465                     _updatePara:	
  7067  0465                     l2595:	
  7068                           ;incstack = 0
  7069                           ; Regs used in _updatePara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7070                           
  7071                           
  7072                           ;led.c: 10: if (gLedPara.mPara.cw_rgb.fOn & 0x01)
  7073  0465  2784  3180         	fcall	PL48	;call to abstracted procedure
  7074  0467  1C01               	btfss	1,0
  7075  0468  2C93               	goto	l2599
  7076                           
  7077                           ;led.c: 11: {
  7078                           ;led.c: 12: gLedRunPara.nTargetBrt[0] = gLedPara.mPara.cw_rgb.red * gLedPara.mPara.cw_rg
      +                          b.rgb_brt;
  7079  0469  3099               	movlw	153
  7080  046A  0086               	movwf	6
  7081  046B  3141               	addfsr 1,1
  7082  046C  0801               	movf	1,w
  7083  046D  0020               	movlb	0	; select bank0
  7084  046E  272F  3180         	fcall	PL8	;call to abstracted procedure
  7085  0470  2551  3180         	fcall	___wmul
  7086  0472  0821               	movf	?___wmul+1,w
  7087  0473  00CC               	movwf	_gLedRunPara+4	;volatile
  7088  0474  0820               	movf	?___wmul,w
  7089  0475  00CB               	movwf	_gLedRunPara+3	;volatile
  7090                           
  7091                           ;led.c: 13: gLedRunPara.nTargetBrt[1] = gLedPara.mPara.cw_rgb.green * gLedPara.mPara.cw_
      +                          rgb.rgb_brt;
  7092  0476  3099               	movlw	153
  7093  0477  0086               	movwf	6
  7094  0478  3023               	movlw	35
  7095  0479  0087               	movwf	7
  7096  047A  3142               	addfsr 1,2
  7097  047B  0801               	movf	1,w
  7098  047C  272F  3180         	fcall	PL8	;call to abstracted procedure
  7099  047E  2551  3180         	fcall	___wmul
  7100  0480  0821               	movf	?___wmul+1,w
  7101  0481  00CE               	movwf	_gLedRunPara+6	;volatile
  7102  0482  0820               	movf	?___wmul,w
  7103  0483  00CD               	movwf	_gLedRunPara+5	;volatile
  7104                           
  7105                           ;led.c: 14: gLedRunPara.nTargetBrt[2] = gLedPara.mPara.cw_rgb.blue * gLedPara.mPara.cw_r
      +                          gb.rgb_brt;
  7106  0484  3099               	movlw	153
  7107  0485  0086               	movwf	6
  7108  0486  3023               	movlw	35
  7109  0487  0087               	movwf	7
  7110  0488  3143               	addfsr 1,3
  7111  0489  0801               	movf	1,w
  7112  048A  272F  3180         	fcall	PL8	;call to abstracted procedure
  7113  048C  2551  3180         	fcall	___wmul
  7114  048E  0821               	movf	?___wmul+1,w
  7115  048F  00D0               	movwf	_gLedRunPara+8	;volatile
  7116  0490  0820               	movf	?___wmul,w
  7117  0491  00CF               	movwf	_gLedRunPara+7	;volatile
  7118                           
  7119                           ;led.c: 15: }
  7120  0492  2C9A               	goto	l2601
  7121  0493                     l2599:	
  7122                           
  7123                           ;led.c: 16: else
  7124                           ;led.c: 17: {
  7125                           ;led.c: 18: gLedRunPara.nTargetBrt[0] = 0;
  7126  0493  0020               	movlb	0	; select bank0
  7127  0494  01CB               	clrf	_gLedRunPara+3	;volatile
  7128  0495  01CC               	clrf	_gLedRunPara+4	;volatile
  7129                           
  7130                           ;led.c: 19: gLedRunPara.nTargetBrt[1] = 0;
  7131  0496  01CD               	clrf	_gLedRunPara+5	;volatile
  7132  0497  01CE               	clrf	_gLedRunPara+6	;volatile
  7133                           
  7134                           ;led.c: 20: gLedRunPara.nTargetBrt[2] = 0;
  7135  0498  01CF               	clrf	_gLedRunPara+7	;volatile
  7136  0499  01D0               	clrf	_gLedRunPara+8	;volatile
  7137  049A                     l2601:	
  7138                           
  7139                           ;led.c: 21: }
  7140                           ;led.c: 22: if (gLedPara.mPara.cw_rgb.fOn & 0x02)
  7141  049A  2784  3180         	fcall	PL48	;call to abstracted procedure
  7142  049C  1C81               	btfss	1,1
  7143  049D  2CC1               	goto	l2605
  7144                           
  7145                           ;led.c: 23: {
  7146                           ;led.c: 24: gLedRunPara.nTargetBrt[3] = (32 - gLedPara.mPara.cw_rgb.cw) * gLedPara.mPara
      +                          .cw_rgb.w_brt;
  7147  049E  3020               	movlw	32
  7148  049F  00A0               	movwf	___wmul@multiplier
  7149  04A0  01A1               	clrf	___wmul@multiplier+1
  7150  04A1  3145               	addfsr 1,5
  7151  04A2  0801               	movf	1,w
  7152  04A3  02A0               	subwf	___wmul@multiplier,f
  7153  04A4  1C03               	skipc
  7154  04A5  03A1               	decf	___wmul@multiplier+1,f
  7155  04A6  3099               	movlw	153
  7156  04A7  2771  3180         	fcall	PL28	;call to abstracted procedure
  7157  04A9  2551  3180         	fcall	___wmul
  7158  04AB  0821               	movf	?___wmul+1,w
  7159  04AC  00D2               	movwf	_gLedRunPara+10	;volatile
  7160  04AD  0820               	movf	?___wmul,w
  7161  04AE  00D1               	movwf	_gLedRunPara+9	;volatile
  7162                           
  7163                           ;led.c: 25: gLedRunPara.nTargetBrt[4] = gLedPara.mPara.cw_rgb.cw * gLedPara.mPara.cw_rgb
      +                          .w_brt;
  7164  04AF  3099               	movlw	153
  7165  04B0  0086               	movwf	6
  7166  04B1  3023               	movlw	35
  7167  04B2  0087               	movwf	7
  7168  04B3  3145               	addfsr 1,5
  7169  04B4  0801               	movf	1,w
  7170  04B5  00A0               	movwf	___wmul@multiplier
  7171  04B6  3099               	movlw	153
  7172  04B7  01A1               	clrf	___wmul@multiplier+1
  7173  04B8  2771  3180         	fcall	PL28	;call to abstracted procedure
  7174  04BA  2551  3180         	fcall	___wmul
  7175  04BC  0821               	movf	?___wmul+1,w
  7176  04BD  00D4               	movwf	_gLedRunPara+12	;volatile
  7177  04BE  0820               	movf	?___wmul,w
  7178  04BF  00D3               	movwf	_gLedRunPara+11	;volatile
  7179                           
  7180                           ;led.c: 26: }
  7181  04C0  2CC5               	goto	l354
  7182  04C1                     l2605:	
  7183                           
  7184                           ;led.c: 27: else
  7185                           ;led.c: 28: {
  7186                           ;led.c: 29: gLedRunPara.nTargetBrt[3] = 0;
  7187  04C1  01D1               	clrf	_gLedRunPara+9	;volatile
  7188  04C2  01D2               	clrf	_gLedRunPara+10	;volatile
  7189                           
  7190                           ;led.c: 30: gLedRunPara.nTargetBrt[4] = 0;
  7191  04C3  01D3               	clrf	_gLedRunPara+11	;volatile
  7192  04C4  01D4               	clrf	_gLedRunPara+12	;volatile
  7193  04C5                     l354:	
  7194                           
  7195                           ;led.c: 31: }
  7196                           ;led.c: 32: for (unsigned char i = 0; i < 5; i++)
  7197  04C5  01A8               	clrf	updatePara@i
  7198  04C6                     l2611:	
  7199                           
  7200                           ;led.c: 33: {
  7201                           ;led.c: 34: if (gLedRunPara.nTargetBrt[i] > 1000)
  7202  04C6  3528               	lslf	updatePara@i,w
  7203  04C7  3E4B               	addlw	(low ((_gLedRunPara| 0+3)))& (0+255)
  7204  04C8  0086               	movwf	6
  7205  04C9  0187               	clrf	7
  7206  04CA  3F40               	moviw [0]fsr1
  7207  04CB  00A6               	movwf	??_updatePara
  7208  04CC  3F41               	moviw [1]fsr1
  7209  04CD  00A7               	movwf	??_updatePara+1
  7210  04CE  3003               	movlw	3
  7211  04CF  0227               	subwf	??_updatePara+1,w
  7212  04D0  30E9               	movlw	233
  7213  04D1  1903               	skipnz
  7214  04D2  0226               	subwf	??_updatePara,w
  7215  04D3  1C03               	skipc
  7216  04D4  2CE0               	goto	l2615
  7217                           
  7218                           ;led.c: 35: {
  7219                           ;led.c: 36: gLedRunPara.nTargetBrt[i] = 1000;
  7220  04D5  30E8               	movlw	232
  7221  04D6  00A6               	movwf	??_updatePara
  7222  04D7  3003               	movlw	3
  7223  04D8  00A7               	movwf	??_updatePara+1
  7224  04D9  3528               	lslf	updatePara@i,w
  7225  04DA  3E4B               	addlw	(low ((_gLedRunPara| 0+3)))& (0+255)
  7226  04DB  0086               	movwf	6
  7227  04DC  0826               	movf	??_updatePara,w
  7228  04DD  3FC0               	movwi [0]fsr1
  7229  04DE  0827               	movf	??_updatePara+1,w
  7230  04DF  3FC1               	movwi [1]fsr1
  7231  04E0                     l2615:	
  7232  04E0  3005               	movlw	5
  7233  04E1  0AA8               	incf	updatePara@i,f
  7234  04E2  0228               	subwf	updatePara@i,w
  7235  04E3  1803               	btfsc	3,0
  7236  04E4  0008               	return
  7237  04E5  2CC6               	goto	l2611
  7238  04E6                     __end_of_updatePara:	
  7239  04E6                     __ptext25:	
  7240 ;; *************** function _autoRun *****************
  7241 ;; Defined at:
  7242 ;;		line 76 in file "src/led.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;		None
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;  i               1   21[BANK0 ] unsigned char 
  7247 ;;  min             1   20[BANK0 ] unsigned char 
  7248 ;;  hour            1   19[BANK0 ] unsigned char 
  7249 ;; Return value:  Size  Location     Type
  7250 ;;                  1    wreg      void 
  7251 ;; Registers used:
  7252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7253 ;; Tracked objects:
  7254 ;;		On entry : 1F/0
  7255 ;;		On exit  : 1F/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7259 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7262 ;;Total ram usage:        6 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:    7
  7265 ;; This function calls:
  7266 ;;		___wmul
  7267 ;;		_isValidTimer
  7268 ;;		_updatePara
  7269 ;; This function is called by:
  7270 ;;		_main
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           
  7275                           ;psect for function _autoRun
  7276  04E6                     _autoRun:	
  7277                           
  7278                           ;led.c: 78: unsigned char i, hour, min;
  7279                           ;led.c: 79: for (i = 0; i < 8; i++)
  7280                           
  7281                           ;incstack = 0
  7282                           ; Regs used in _autoRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7283  04E6  01B5               	clrf	autoRun@i
  7284  04E7                     l3109:	
  7285                           
  7286                           ;led.c: 80: {
  7287                           ;led.c: 81: if (gLedPara.aPara[i].timer.uWeek.s_wk.en && isValidTimer(gLedPara.aPara[i])
      +                           )
  7288  04E7  0835               	movf	autoRun@i,w
  7289  04E8  2720  3180         	fcall	PL4	;call to abstracted procedure
  7290  04EA  2551  3180         	fcall	___wmul
  7291  04EC  30A0               	movlw	160
  7292  04ED  2716  3180         	fcall	PL2	;call to abstracted procedure
  7293  04EF  1F81               	btfss	1,7
  7294  04F0  2D4B               	goto	l3133
  7295  04F1  0835               	movf	autoRun@i,w
  7296  04F2  2720  3180         	fcall	PL4	;call to abstracted procedure
  7297  04F4  2551  3180         	fcall	___wmul
  7298  04F6  30A0               	movlw	160
  7299  04F7  0720               	addwf	?___wmul,w
  7300  04F8  273A  3180         	fcall	PL14	;call to abstracted procedure
  7301  04FA  00B0               	movwf	??_autoRun
  7302  04FB                     u2750:	
  7303  04FB  0012               	moviw fsr0++
  7304  04FC  001E               	movwi fsr1++
  7305  04FD  0BB0               	decfsz	??_autoRun,f
  7306  04FE  2CFB               	goto	u2750
  7307  04FF  2566  3180         	fcall	_isValidTimer
  7308  0501  3A00               	xorlw	0
  7309  0502  1903               	skipnz
  7310  0503  2D4B               	goto	l3133
  7311                           
  7312                           ;led.c: 82: {
  7313                           ;led.c: 83: hour = gLedPara.aPara[i].timer.time.hour;
  7314  0504  0835               	movf	autoRun@i,w
  7315  0505  2720  3180         	fcall	PL4	;call to abstracted procedure
  7316  0507  2551  3180         	fcall	___wmul
  7317  0509  30A1               	movlw	161
  7318  050A  2716  3180         	fcall	PL2	;call to abstracted procedure
  7319  050C  0801               	movf	1,w
  7320  050D  00B3               	movwf	autoRun@hour
  7321                           
  7322                           ;led.c: 84: min = gLedPara.aPara[i].timer.time.minute;
  7323  050E  0835               	movf	autoRun@i,w
  7324  050F  2720  3180         	fcall	PL4	;call to abstracted procedure
  7325  0511  2551  3180         	fcall	___wmul
  7326  0513  30A2               	movlw	162
  7327  0514  2716  3180         	fcall	PL2	;call to abstracted procedure
  7328  0516  0801               	movf	1,w
  7329  0517  00B4               	movwf	autoRun@min
  7330                           
  7331                           ;led.c: 85: if (gCurrentTime.datetime.hour == hour && gCurrentTime.datetime.minute == mi
      +                          n)
  7332  0518  086A               	movf	_gCurrentTime+4,w	;volatile
  7333  0519  0633               	xorwf	autoRun@hour,w
  7334  051A  1D03               	skipz
  7335  051B  2D4B               	goto	l3133
  7336  051C  086B               	movf	_gCurrentTime+5,w	;volatile
  7337  051D  0634               	xorwf	autoRun@min,w
  7338  051E  1D03               	skipz
  7339  051F  2D4B               	goto	l3133
  7340                           
  7341                           ;led.c: 86: {
  7342                           ;led.c: 87: gLedPara.mPara = gLedPara.aPara[i].timer.scene;
  7343  0520  0835               	movf	autoRun@i,w
  7344  0521  2720  3180         	fcall	PL4	;call to abstracted procedure
  7345  0523  2551  3180         	fcall	___wmul
  7346  0525  30A3               	movlw	163
  7347  0526  2716  3180         	fcall	PL2	;call to abstracted procedure
  7348  0528  3099               	movlw	153
  7349  0529  0084               	movwf	4
  7350  052A  3023               	movlw	35
  7351  052B  0085               	movwf	5
  7352  052C  3007               	movlw	7
  7353  052D  00B2               	movwf	??_autoRun+2
  7354  052E                     u2790:	
  7355  052E  0016               	moviw fsr1++
  7356  052F  001A               	movwi fsr0++
  7357  0530  0BB2               	decfsz	??_autoRun+2,f
  7358  0531  2D2E               	goto	u2790
  7359                           
  7360                           ;led.c: 88: if (gLedPara.aPara[i].timer.uWeek.wk == 0x80)
  7361  0532  0835               	movf	autoRun@i,w
  7362  0533  2720  3180         	fcall	PL4	;call to abstracted procedure
  7363  0535  2551  3180         	fcall	___wmul
  7364  0537  30A0               	movlw	160
  7365  0538  2716  3180         	fcall	PL2	;call to abstracted procedure
  7366  053A  3080               	movlw	128
  7367  053B  0601               	xorwf	1,w
  7368  053C  1D03               	btfss	3,2
  7369  053D  2D47               	goto	l3125
  7370                           
  7371                           ;led.c: 89: {
  7372                           ;led.c: 90: gLedPara.aPara[i].timer.uWeek.wk = 0x00;
  7373  053E  0835               	movf	autoRun@i,w
  7374  053F  2720  3180         	fcall	PL4	;call to abstracted procedure
  7375  0541  2551  3180         	fcall	___wmul
  7376  0543  30A0               	movlw	160
  7377  0544  2716  3180         	fcall	PL2	;call to abstracted procedure
  7378  0546  0181               	clrf	1
  7379  0547                     l3125:	
  7380                           
  7381                           ;led.c: 91: }
  7382                           ;led.c: 92: gLedRunPara.fSave = 1;
  7383  0547  1548               	bsf	_gLedRunPara,2	;volatile
  7384                           
  7385                           ;led.c: 93: gLedRunPara.nSaveDelayCount = 3;
  7386  0548  3003               	movlw	3
  7387  0549  00C9               	movwf	_gLedRunPara+1	;volatile
  7388                           
  7389                           ;led.c: 94: updatePara();
  7390  054A  2C65               	ljmp	l2595
  7391  054B                     l3133:	
  7392  054B  3008               	movlw	8
  7393  054C  0AB5               	incf	autoRun@i,f
  7394  054D  0235               	subwf	autoRun@i,w
  7395  054E  1803               	btfsc	3,0
  7396  054F  0008               	return
  7397  0550  2CE7               	goto	l3109
  7398  0551                     __end_of_autoRun:	
  7399  0551                     __ptext43:	
  7400 ;; *************** function ___wmul *****************
  7401 ;; Defined at:
  7402 ;;		line 15 in file "/Applications/microchip/xc8/v1.40/sources/common/Umul16.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7405 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;  product         2    4[BANK0 ] unsigned int 
  7408 ;; Return value:  Size  Location     Type
  7409 ;;                  2    0[BANK0 ] unsigned int 
  7410 ;; Registers used:
  7411 ;;		wreg, status,2, status,0
  7412 ;; Tracked objects:
  7413 ;;		On entry : 1F/0
  7414 ;;		On exit  : 1F/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7417 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;Total ram usage:        6 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    5
  7424 ;; This function calls:
  7425 ;;		Nothing
  7426 ;; This function is called by:
  7427 ;;		_bleSendTimerData
  7428 ;;		_DecodeDATA
  7429 ;;		_readLedPara
  7430 ;;		_saveLedPara
  7431 ;;		_updatePara
  7432 ;;		_autoRun
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           
  7437                           ;psect for function ___wmul
  7438  0551                     ___wmul:	
  7439                           
  7440                           ;incstack = 0
  7441                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7442  0551  01A4               	clrf	___wmul@product
  7443  0552  01A5               	clrf	___wmul@product+1
  7444  0553                     l2263:	
  7445  0553  1C20               	btfss	___wmul@multiplier,0
  7446  0554  2D59               	goto	l2267
  7447  0555  0822               	movf	___wmul@multiplicand,w
  7448  0556  07A4               	addwf	___wmul@product,f
  7449  0557  0823               	movf	___wmul@multiplicand+1,w
  7450  0558  3DA5               	addwfc	___wmul@product+1,f
  7451  0559                     l2267:	
  7452  0559  35A2               	lslf	___wmul@multiplicand,f
  7453  055A  0DA3               	rlf	___wmul@multiplicand+1,f
  7454  055B  36A1               	lsrf	___wmul@multiplier+1,f
  7455  055C  0CA0               	rrf	___wmul@multiplier,f
  7456  055D  0820               	movf	___wmul@multiplier,w
  7457  055E  0421               	iorwf	___wmul@multiplier+1,w
  7458  055F  1D03               	btfss	3,2
  7459  0560  2D53               	goto	l2263
  7460  0561  0825               	movf	___wmul@product+1,w
  7461  0562  00A1               	movwf	?___wmul+1
  7462  0563  0824               	movf	___wmul@product,w
  7463  0564  00A0               	movwf	?___wmul
  7464  0565  0008               	return
  7465  0566                     __end_of___wmul:	
  7466  0566                     __ptext42:	
  7467 ;; *************** function _isValidTimer *****************
  7468 ;; Defined at:
  7469 ;;		line 94 in file "src/ble.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;  para           10    6[BANK0 ] struct .
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;		None
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  1    wreg      unsigned char 
  7476 ;; Registers used:
  7477 ;;		wreg
  7478 ;; Tracked objects:
  7479 ;;		On entry : 1F/0
  7480 ;;		On exit  : 1F/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7483 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;Total ram usage:       10 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    5
  7490 ;; This function calls:
  7491 ;;		Nothing
  7492 ;; This function is called by:
  7493 ;;		_bleSendTimerData
  7494 ;;		_autoRun
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           
  7499                           ;psect for function _isValidTimer
  7500  0566                     _isValidTimer:	
  7501                           
  7502                           ;ble.c: 96: if (para.timer.time.hour > 23)
  7503                           
  7504                           ;incstack = 0
  7505                           ; Regs used in _isValidTimer: [wreg]
  7506  0566  3018               	movlw	24
  7507  0567  0227               	subwf	isValidTimer@para+1,w
  7508  0568  1803               	btfsc	3,0
  7509                           
  7510                           ;ble.c: 97: {
  7511                           ;ble.c: 98: return 0;
  7512  0569  3400               	retlw	0
  7513                           
  7514                           ;ble.c: 99: }
  7515                           ;ble.c: 100: if (para.timer.time.minute > 59)
  7516  056A  303C               	movlw	60
  7517  056B  0228               	subwf	isValidTimer@para+2,w
  7518  056C  1803               	btfsc	3,0
  7519  056D  3400               	retlw	0
  7520                           
  7521                           ;ble.c: 103: }
  7522                           ;ble.c: 104: if (para.timer.scene.cw_rgb.fOn > 0x03)
  7523  056E  3004               	movlw	4
  7524  056F  0229               	subwf	isValidTimer@para+3,w
  7525  0570  1803               	btfsc	3,0
  7526  0571  3400               	retlw	0
  7527                           
  7528                           ;ble.c: 107: }
  7529                           ;ble.c: 108: if (para.timer.scene.cw_rgb.red > 32)
  7530  0572  3021               	movlw	33
  7531  0573  022A               	subwf	isValidTimer@para+4,w
  7532  0574  1803               	btfsc	3,0
  7533  0575  3400               	retlw	0
  7534                           
  7535                           ;ble.c: 111: }
  7536                           ;ble.c: 112: if (para.timer.scene.cw_rgb.green > 32)
  7537  0576  3021               	movlw	33
  7538  0577  022B               	subwf	isValidTimer@para+5,w
  7539  0578  1803               	btfsc	3,0
  7540  0579  3400               	retlw	0
  7541                           
  7542                           ;ble.c: 115: }
  7543                           ;ble.c: 116: if (para.timer.scene.cw_rgb.blue > 32)
  7544  057A  3021               	movlw	33
  7545  057B  022C               	subwf	isValidTimer@para+6,w
  7546  057C  1803               	btfsc	3,0
  7547  057D  3400               	retlw	0
  7548                           
  7549                           ;ble.c: 119: }
  7550                           ;ble.c: 120: if (para.timer.scene.cw_rgb.rgb_brt > 32)
  7551  057E  3021               	movlw	33
  7552  057F  022D               	subwf	isValidTimer@para+7,w
  7553  0580  1803               	btfsc	3,0
  7554  0581  3400               	retlw	0
  7555                           
  7556                           ;ble.c: 123: }
  7557                           ;ble.c: 124: if (para.timer.scene.cw_rgb.cw > 32)
  7558  0582  3021               	movlw	33
  7559  0583  022E               	subwf	isValidTimer@para+8,w
  7560  0584  1803               	btfsc	3,0
  7561  0585  3400               	retlw	0
  7562                           
  7563                           ;ble.c: 127: }
  7564                           ;ble.c: 128: if (para.timer.scene.cw_rgb.w_brt > 32)
  7565  0586  3021               	movlw	33
  7566  0587  022F               	subwf	isValidTimer@para+9,w
  7567  0588  1C03               	skipc
  7568                           
  7569                           ;ble.c: 131: }
  7570                           ;ble.c: 132: return 1;
  7571  0589  3401               	retlw	1
  7572  058A  3400               	retlw	0
  7573  058B                     __end_of_isValidTimer:	
  7574  058B                     __ptext45:	
  7575 ;; *************** function _bleSendManualData *****************
  7576 ;; Defined at:
  7577 ;;		line 81 in file "src/ble.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;		None
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;  i               1   10[BANK0 ] unsigned char 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      void 
  7584 ;; Registers used:
  7585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7586 ;; Tracked objects:
  7587 ;;		On entry : 1D/0
  7588 ;;		On exit  : 1F/2
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;Total ram usage:        1 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    7
  7598 ;; This function calls:
  7599 ;;		_bleSendData
  7600 ;;		_getCRC
  7601 ;; This function is called by:
  7602 ;;		_DecodeDATA
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           
  7607                           ;psect for function _bleSendManualData
  7608  058B                     _bleSendManualData:	
  7609  058B                     l2513:	
  7610                           ;incstack = 0
  7611                           ; Regs used in _bleSendManualData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7612                           
  7613                           
  7614                           ;ble.c: 83: unsigned char i;
  7615                           ;ble.c: 84: txBuf[0] = 0x68;
  7616  058B  3068               	movlw	104
  7617  058C  0022               	movlb	2	; select bank2
  7618  058D  00A0               	movwf	_txBuf^(0+256)
  7619                           
  7620                           ;ble.c: 85: txBuf[1] = 0x05;
  7621  058E  3005               	movlw	5
  7622  058F  00A1               	movwf	(_txBuf^(0+256)+1)
  7623                           
  7624                           ;ble.c: 86: for (i = 0; i < 7; i++)
  7625  0590  0020               	movlb	0	; select bank0
  7626  0591  01AA               	clrf	bleSendManualData@i
  7627  0592                     l2521:	
  7628                           
  7629                           ;ble.c: 87: {
  7630                           ;ble.c: 88: txBuf[2+i] = gLedPara.mPara.array[i];
  7631  0592  082A               	movf	bleSendManualData@i,w
  7632  0593  3E22               	addlw	(low ((_txBuf| (0+256)+2)))& (0+255)
  7633  0594  0086               	movwf	6
  7634  0595  3001               	movlw	1	; select bank2/3
  7635  0596  0087               	movwf	7
  7636  0597  082A               	movf	bleSendManualData@i,w
  7637  0598  3E99               	addlw	153
  7638  0599  0084               	movwf	4
  7639  059A  3023               	movlw	35
  7640  059B  0185               	clrf	5
  7641  059C  3D85               	addwfc	5,f
  7642  059D  0800               	movf	0,w
  7643  059E  0081               	movwf	1
  7644  059F  3007               	movlw	7
  7645  05A0  0AAA               	incf	bleSendManualData@i,f
  7646  05A1  022A               	subwf	bleSendManualData@i,w
  7647  05A2  1C03               	skipc
  7648  05A3  2D92               	goto	l2521
  7649                           
  7650                           ;ble.c: 89: }
  7651                           ;ble.c: 90: txBuf[9] = getCRC(txBuf, 9);
  7652  05A4  3020               	movlw	low _txBuf
  7653  05A5  00A3               	movwf	getCRC@pbuf
  7654  05A6  3001               	movlw	high _txBuf
  7655  05A7  00A4               	movwf	getCRC@pbuf+1
  7656  05A8  3009               	movlw	9
  7657  05A9  00A5               	movwf	getCRC@len
  7658  05AA  23D1  3180         	fcall	_getCRC
  7659  05AC  0022               	movlb	2	; select bank2
  7660  05AD  00A9               	movwf	(_txBuf^(0+256)+9)
  7661                           
  7662                           ;ble.c: 91: bleSendData(txBuf, 10);
  7663  05AE  300A               	movlw	10
  7664  05AF  0020               	movlb	0	; select bank0
  7665  05B0  00A3               	movwf	bleSendData@len
  7666  05B1  3020               	movlw	(low (_txBuf| (0+256)))& (0+255)
  7667  05B2  2DB3               	ljmp	_bleSendData
  7668  05B3                     __end_of_bleSendManualData:	
  7669  05B3                     __ptext48:	
  7670 ;; *************** function _bleSendData *****************
  7671 ;; Defined at:
  7672 ;;		line 68 in file "src/ble.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;  frame           1    wreg     PTR const unsigned char 
  7675 ;;		 -> txBuf(32), 
  7676 ;;  len             1    3[BANK0 ] unsigned char 
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;  frame           1    5[BANK0 ] PTR const unsigned char 
  7679 ;;		 -> txBuf(32), 
  7680 ;; Return value:  Size  Location     Type
  7681 ;;                  1    wreg      void 
  7682 ;; Registers used:
  7683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7684 ;; Tracked objects:
  7685 ;;		On entry : 1F/0
  7686 ;;		On exit  : 1F/2
  7687 ;;		Unchanged: 0/0
  7688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7689 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;Total ram usage:        3 bytes
  7694 ;; Hardware stack levels used:    1
  7695 ;; Hardware stack levels required when called:    6
  7696 ;; This function calls:
  7697 ;;		_eusartSendByte
  7698 ;; This function is called by:
  7699 ;;		_bleSendManualData
  7700 ;;		_bleSendTimerData
  7701 ;;		_bleSendDeviceTime
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           
  7706                           ;psect for function _bleSendData
  7707  05B3                     _bleSendData:	
  7708                           
  7709                           ;incstack = 0
  7710                           ; Regs used in _bleSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7711                           ;bleSendData@frame stored from wreg
  7712  05B3  00A5               	movwf	bleSendData@frame
  7713                           
  7714                           ;ble.c: 70: LATC0 = 0;
  7715  05B4  0022               	movlb	2	; select bank2
  7716  05B5  100E               	bcf	14,0	;volatile
  7717                           
  7718                           ;ble.c: 71: _delay((unsigned long)((800)*(16000000/4000000.0)));
  7719  05B6  3005               	movlw	5
  7720  05B7  0020               	movlb	0	; select bank0
  7721  05B8  00A4               	movwf	??_bleSendData
  7722  05B9  3026               	movlw	38
  7723  05BA                     u3067:	
  7724  05BA  0B89               	decfsz	9,f
  7725  05BB  2DBA               	goto	u3067
  7726  05BC  0BA4               	decfsz	??_bleSendData,f
  7727  05BD  2DBA               	goto	u3067
  7728  05BE  0000               	nop
  7729  05BF                     l2337:	
  7730                           ;ble.c: 72: while(len--)
  7731                           
  7732  05BF  0020               	movlb	0	; select bank0
  7733  05C0  03A3               	decf	bleSendData@len,f
  7734  05C1  0A23               	incf	bleSendData@len,w
  7735  05C2  1903               	btfsc	3,2
  7736  05C3  2DCE               	goto	l48
  7737                           
  7738                           ;ble.c: 73: {
  7739                           ;ble.c: 74: eusartSendByte(*frame++);
  7740  05C4  0825               	movf	bleSendData@frame,w
  7741  05C5  0086               	movwf	6
  7742  05C6  3001               	movlw	1	; select bank2/3
  7743  05C7  0087               	movwf	7
  7744  05C8  0801               	movf	1,w
  7745  05C9  21DE  3180         	fcall	_eusartSendByte
  7746  05CB  0020               	movlb	0	; select bank0
  7747  05CC  0AA5               	incf	bleSendData@frame,f
  7748  05CD  2DBF               	goto	l2337
  7749  05CE                     l48:	
  7750  05CE  0023               	movlb	3	; select bank3
  7751  05CF  1C9E               	btfss	30,1	;volatile
  7752  05D0  2DCE               	goto	l48
  7753                           
  7754                           ;ble.c: 78: LATC0 = 1;
  7755  05D1  0022               	movlb	2	; select bank2
  7756  05D2  140E               	bsf	14,0	;volatile
  7757  05D3  0008               	return
  7758  05D4                     __end_of_bleSendData:	
  7759  05D4                     __ptext24:	
  7760 ;; *************** function _PWM1_LoadDutyValue *****************
  7761 ;; Defined at:
  7762 ;;		line 21 in file "src/pwm.c"
  7763 ;; Parameters:    Size  Location     Type
  7764 ;;  dutyValue       2    0[BANK0 ] unsigned int 
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;		None
  7767 ;; Return value:  Size  Location     Type
  7768 ;;                  1    wreg      void 
  7769 ;; Registers used:
  7770 ;;		wreg
  7771 ;; Tracked objects:
  7772 ;;		On entry : 1F/0
  7773 ;;		On exit  : 1F/5
  7774 ;;		Unchanged: 0/0
  7775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7776 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;Total ram usage:        2 bytes
  7781 ;; Hardware stack levels used:    1
  7782 ;; Hardware stack levels required when called:    5
  7783 ;; This function calls:
  7784 ;;		Nothing
  7785 ;; This function is called by:
  7786 ;;		_turnMaxLed
  7787 ;;		_turnOffLed
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           
  7792                           ;psect for function _PWM1_LoadDutyValue
  7793  05D4                     _PWM1_LoadDutyValue:	
  7794                           
  7795                           ;pwm.c: 23: dutyValue &= 0x03FF;
  7796                           
  7797                           ;incstack = 0
  7798                           ; Regs used in _PWM1_LoadDutyValue: [wreg]
  7799  05D4  30FF               	movlw	255
  7800  05D5  05A0               	andwf	PWM1_LoadDutyValue@dutyValue,f
  7801  05D6  3003               	movlw	3
  7802  05D7  05A1               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
  7803                           
  7804                           ;pwm.c: 26: if(CCP1CONbits.CCP1FMT)
  7805  05D8  0025               	movlb	5	; select bank5
  7806  05D9  1E13               	btfss	19,4	;volatile
  7807  05DA  2DE2               	goto	l2427
  7808                           
  7809                           ;pwm.c: 27: {
  7810                           ;pwm.c: 28: dutyValue <<= 6;
  7811  05DB  3006               	movlw	6
  7812  05DC  0020               	movlb	0	; select bank0
  7813  05DD                     u1815:	
  7814  05DD  35A0               	lslf	PWM1_LoadDutyValue@dutyValue,f
  7815  05DE  0DA1               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
  7816  05DF  0B89               	decfsz	9,f
  7817  05E0  2DDD               	goto	u1815
  7818                           
  7819                           ;pwm.c: 29: CCPR1H = dutyValue >> 8;
  7820                           
  7821                           ;pwm.c: 30: CCPR1L = dutyValue;
  7822                           
  7823                           ;pwm.c: 31: }
  7824  05E1  2F4B               	ljmp	PL18	;call to abstracted procedure
  7825  05E2                     l2427:	
  7826                           
  7827                           ;pwm.c: 32: else
  7828                           ;pwm.c: 33: {
  7829                           ;pwm.c: 34: CCPR1H = dutyValue >> 8;
  7830  05E2  0020               	movlb	0	; select bank0
  7831                           
  7832                           ;pwm.c: 35: CCPR1L = dutyValue;
  7833  05E3  2F4B               	ljmp	PL18	;call to abstracted procedure
  7834  05E4                     __end_of_PWM1_LoadDutyValue:	
  7835  05E4                     __ptext23:	
  7836 ;; *************** function _PWM2_LoadDutyValue *****************
  7837 ;; Defined at:
  7838 ;;		line 56 in file "src/pwm.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;  dutyValue       2    0[BANK0 ] unsigned int 
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;		None
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  1    wreg      void 
  7845 ;; Registers used:
  7846 ;;		wreg
  7847 ;; Tracked objects:
  7848 ;;		On entry : 1F/0
  7849 ;;		On exit  : 1F/5
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7852 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;Total ram usage:        2 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    5
  7859 ;; This function calls:
  7860 ;;		Nothing
  7861 ;; This function is called by:
  7862 ;;		_turnMaxLed
  7863 ;;		_turnOffLed
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           
  7868                           ;psect for function _PWM2_LoadDutyValue
  7869  05E4                     _PWM2_LoadDutyValue:	
  7870                           
  7871                           ;pwm.c: 58: dutyValue &= 0x03FF;
  7872                           
  7873                           ;incstack = 0
  7874                           ; Regs used in _PWM2_LoadDutyValue: [wreg]
  7875  05E4  30FF               	movlw	255
  7876  05E5  05A0               	andwf	PWM2_LoadDutyValue@dutyValue,f
  7877  05E6  3003               	movlw	3
  7878  05E7  05A1               	andwf	PWM2_LoadDutyValue@dutyValue+1,f
  7879                           
  7880                           ;pwm.c: 61: if(CCP2CONbits.CCP2FMT)
  7881  05E8  0025               	movlb	5	; select bank5
  7882  05E9  1E17               	btfss	23,4	;volatile
  7883  05EA  2DF2               	goto	l2435
  7884                           
  7885                           ;pwm.c: 62: {
  7886                           ;pwm.c: 63: dutyValue <<= 6;
  7887  05EB  3006               	movlw	6
  7888  05EC  0020               	movlb	0	; select bank0
  7889  05ED                     u1835:	
  7890  05ED  35A0               	lslf	PWM2_LoadDutyValue@dutyValue,f
  7891  05EE  0DA1               	rlf	PWM2_LoadDutyValue@dutyValue+1,f
  7892  05EF  0B89               	decfsz	9,f
  7893  05F0  2DED               	goto	u1835
  7894                           
  7895                           ;pwm.c: 64: CCPR2H = dutyValue >> 8;
  7896                           
  7897                           ;pwm.c: 65: CCPR2L = dutyValue;
  7898                           
  7899                           ;pwm.c: 66: }
  7900  05F1  2F53               	ljmp	PL20	;call to abstracted procedure
  7901  05F2                     l2435:	
  7902                           
  7903                           ;pwm.c: 67: else
  7904                           ;pwm.c: 68: {
  7905                           ;pwm.c: 69: CCPR2H = dutyValue >> 8;
  7906  05F2  0020               	movlb	0	; select bank0
  7907                           
  7908                           ;pwm.c: 70: CCPR2L = dutyValue;
  7909  05F3  2F53               	ljmp	PL20	;call to abstracted procedure
  7910  05F4                     __end_of_PWM2_LoadDutyValue:	
  7911  05F4                     __ptext22:	
  7912 ;; *************** function _PWM3_LoadDutyValue *****************
  7913 ;; Defined at:
  7914 ;;		line 91 in file "src/pwm.c"
  7915 ;; Parameters:    Size  Location     Type
  7916 ;;  dutyValue       2    0[BANK0 ] unsigned int 
  7917 ;; Auto vars:     Size  Location     Type
  7918 ;;		None
  7919 ;; Return value:  Size  Location     Type
  7920 ;;                  1    wreg      void 
  7921 ;; Registers used:
  7922 ;;		wreg
  7923 ;; Tracked objects:
  7924 ;;		On entry : 1F/0
  7925 ;;		On exit  : 1F/6
  7926 ;;		Unchanged: 0/0
  7927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7928 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7931 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7932 ;;Total ram usage:        2 bytes
  7933 ;; Hardware stack levels used:    1
  7934 ;; Hardware stack levels required when called:    5
  7935 ;; This function calls:
  7936 ;;		Nothing
  7937 ;; This function is called by:
  7938 ;;		_turnMaxLed
  7939 ;;		_turnOffLed
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           
  7944                           ;psect for function _PWM3_LoadDutyValue
  7945  05F4                     _PWM3_LoadDutyValue:	
  7946                           
  7947                           ;pwm.c: 93: dutyValue &= 0x03FF;
  7948                           
  7949                           ;incstack = 0
  7950                           ; Regs used in _PWM3_LoadDutyValue: [wreg]
  7951  05F4  30FF               	movlw	255
  7952  05F5  05A0               	andwf	PWM3_LoadDutyValue@dutyValue,f
  7953  05F6  3003               	movlw	3
  7954  05F7  05A1               	andwf	PWM3_LoadDutyValue@dutyValue+1,f
  7955                           
  7956                           ;pwm.c: 96: if(CCP3CONbits.CCP3FMT)
  7957  05F8  0026               	movlb	6	; select bank6
  7958  05F9  1E13               	btfss	19,4	;volatile
  7959  05FA  2E02               	goto	l2443
  7960                           
  7961                           ;pwm.c: 97: {
  7962                           ;pwm.c: 98: dutyValue <<= 6;
  7963  05FB  3006               	movlw	6
  7964  05FC  0020               	movlb	0	; select bank0
  7965  05FD                     u1855:	
  7966  05FD  35A0               	lslf	PWM3_LoadDutyValue@dutyValue,f
  7967  05FE  0DA1               	rlf	PWM3_LoadDutyValue@dutyValue+1,f
  7968  05FF  0B89               	decfsz	9,f
  7969  0600  2DFD               	goto	u1855
  7970                           
  7971                           ;pwm.c: 99: CCPR3H = dutyValue >> 8;
  7972                           
  7973                           ;pwm.c: 100: CCPR3L = dutyValue;
  7974                           
  7975                           ;pwm.c: 101: }
  7976  0601  2F5B               	ljmp	PL22	;call to abstracted procedure
  7977  0602                     l2443:	
  7978                           
  7979                           ;pwm.c: 102: else
  7980                           ;pwm.c: 103: {
  7981                           ;pwm.c: 104: CCPR3H = dutyValue >> 8;
  7982  0602  0020               	movlb	0	; select bank0
  7983                           
  7984                           ;pwm.c: 105: CCPR3L = dutyValue;
  7985  0603  2F5B               	ljmp	PL22	;call to abstracted procedure
  7986  0604                     __end_of_PWM3_LoadDutyValue:	
  7987  0604                     __ptext46:	
  7988 ;; *************** function _bleSendDeviceTime *****************
  7989 ;; Defined at:
  7990 ;;		line 162 in file "src/ble.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;		None
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;  i               1   11[BANK0 ] unsigned char 
  7995 ;;  len             1   10[BANK0 ] unsigned char 
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  1    wreg      void 
  7998 ;; Registers used:
  7999 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8000 ;; Tracked objects:
  8001 ;;		On entry : 1F/0
  8002 ;;		On exit  : 1F/2
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;Total ram usage:        2 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; Hardware stack levels required when called:    7
  8012 ;; This function calls:
  8013 ;;		_bleSendData
  8014 ;;		_getCRC
  8015 ;; This function is called by:
  8016 ;;		_DecodeDATA
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           
  8021                           ;psect for function _bleSendDeviceTime
  8022  0604                     _bleSendDeviceTime:	
  8023  0604                     l2565:	
  8024                           ;incstack = 0
  8025                           ; Regs used in _bleSendDeviceTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8026                           
  8027                           
  8028                           ;ble.c: 164: unsigned char len = sizeof(gCurrentTime.array);
  8029  0604  3007               	movlw	7
  8030  0605  00AA               	movwf	bleSendDeviceTime@len
  8031                           
  8032                           ;ble.c: 165: txBuf[0] = 0x68;
  8033  0606  3068               	movlw	104
  8034  0607  0022               	movlb	2	; select bank2
  8035  0608  00A0               	movwf	_txBuf^(0+256)
  8036                           
  8037                           ;ble.c: 166: txBuf[1] = 0x0D;
  8038  0609  300D               	movlw	13
  8039  060A  00A1               	movwf	(_txBuf^(0+256)+1)
  8040                           
  8041                           ;ble.c: 167: for (unsigned char i = 0; i < len; i++)
  8042  060B  0020               	movlb	0	; select bank0
  8043  060C  01AB               	clrf	bleSendDeviceTime@i
  8044  060D                     l2573:	
  8045  060D  082A               	movf	bleSendDeviceTime@len,w
  8046  060E  022B               	subwf	bleSendDeviceTime@i,w
  8047  060F  1803               	btfsc	3,0
  8048  0610  2E1E               	goto	l2575
  8049                           
  8050                           ;ble.c: 168: {
  8051                           ;ble.c: 169: txBuf[2+i] = gCurrentTime.array[i];
  8052  0611  082B               	movf	bleSendDeviceTime@i,w
  8053  0612  3E22               	addlw	(low ((_txBuf| (0+256)+2)))& (0+255)
  8054  0613  0086               	movwf	6
  8055  0614  3001               	movlw	1	; select bank2/3
  8056  0615  0087               	movwf	7
  8057  0616  082B               	movf	bleSendDeviceTime@i,w
  8058  0617  3E66               	addlw	(low (_gCurrentTime| 0))& (0+255)
  8059  0618  0084               	movwf	4
  8060  0619  0185               	clrf	5
  8061  061A  0800               	movf	0,w
  8062  061B  0081               	movwf	1
  8063  061C  0AAB               	incf	bleSendDeviceTime@i,f
  8064  061D  2E0D               	goto	l2573
  8065  061E                     l2575:	
  8066                           
  8067                           ;ble.c: 170: }
  8068                           ;ble.c: 171: txBuf[9] = getCRC(txBuf, len+2);
  8069  061E  3020               	movlw	low _txBuf
  8070  061F  00A3               	movwf	getCRC@pbuf
  8071  0620  3001               	movlw	high _txBuf
  8072  0621  00A4               	movwf	getCRC@pbuf+1
  8073  0622  082A               	movf	bleSendDeviceTime@len,w
  8074  0623  3E02               	addlw	2
  8075  0624  00A5               	movwf	getCRC@len
  8076  0625  23D1  3180         	fcall	_getCRC
  8077  0627  0022               	movlb	2	; select bank2
  8078  0628  00A9               	movwf	(_txBuf^(0+256)+9)
  8079                           
  8080                           ;ble.c: 172: bleSendData(txBuf, len+3);
  8081  0629  0020               	movlb	0	; select bank0
  8082  062A  082A               	movf	bleSendDeviceTime@len,w
  8083  062B  3E03               	addlw	3
  8084  062C  00A3               	movwf	bleSendData@len
  8085  062D  3020               	movlw	(low (_txBuf| (0+256)))& (0+255)
  8086  062E  2DB3               	ljmp	_bleSendData
  8087  062F                     __end_of_bleSendDeviceTime:	
  8088  062F                     __ptext21:	
  8089 ;; *************** function _PWM4_LoadDutyValue *****************
  8090 ;; Defined at:
  8091 ;;		line 126 in file "src/pwm.c"
  8092 ;; Parameters:    Size  Location     Type
  8093 ;;  dutyValue       2    0[BANK0 ] unsigned int 
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;		None
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  1    wreg      void 
  8098 ;; Registers used:
  8099 ;;		wreg
  8100 ;; Tracked objects:
  8101 ;;		On entry : 1F/0
  8102 ;;		On exit  : 1F/6
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;Total ram usage:        2 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:    5
  8112 ;; This function calls:
  8113 ;;		Nothing
  8114 ;; This function is called by:
  8115 ;;		_turnMaxLed
  8116 ;;		_turnOffLed
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _PWM4_LoadDutyValue
  8122  062F                     _PWM4_LoadDutyValue:	
  8123                           
  8124                           ;pwm.c: 128: dutyValue &= 0x03FF;
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _PWM4_LoadDutyValue: [wreg]
  8128  062F  30FF               	movlw	255
  8129  0630  05A0               	andwf	PWM4_LoadDutyValue@dutyValue,f
  8130  0631  3003               	movlw	3
  8131  0632  05A1               	andwf	PWM4_LoadDutyValue@dutyValue+1,f
  8132                           
  8133                           ;pwm.c: 131: if(CCP4CONbits.CCP4FMT)
  8134  0633  0026               	movlb	6	; select bank6
  8135  0634  1E17               	btfss	23,4	;volatile
  8136  0635  2E3D               	goto	l2451
  8137                           
  8138                           ;pwm.c: 132: {
  8139                           ;pwm.c: 133: dutyValue <<= 6;
  8140  0636  3006               	movlw	6
  8141  0637  0020               	movlb	0	; select bank0
  8142  0638                     u1875:	
  8143  0638  35A0               	lslf	PWM4_LoadDutyValue@dutyValue,f
  8144  0639  0DA1               	rlf	PWM4_LoadDutyValue@dutyValue+1,f
  8145  063A  0B89               	decfsz	9,f
  8146  063B  2E38               	goto	u1875
  8147                           
  8148                           ;pwm.c: 134: CCPR4H = dutyValue >> 8;
  8149                           
  8150                           ;pwm.c: 135: CCPR4L = dutyValue;
  8151                           
  8152                           ;pwm.c: 136: }
  8153  063C  2F43               	ljmp	PL16	;call to abstracted procedure
  8154  063D                     l2451:	
  8155                           
  8156                           ;pwm.c: 137: else
  8157                           ;pwm.c: 138: {
  8158                           ;pwm.c: 139: CCPR4H = dutyValue >> 8;
  8159  063D  0020               	movlb	0	; select bank0
  8160                           
  8161                           ;pwm.c: 140: CCPR4L = dutyValue;
  8162  063E  2F43               	ljmp	PL16	;call to abstracted procedure
  8163  063F                     __end_of_PWM4_LoadDutyValue:	
  8164  063F                     __ptext20:	
  8165 ;; *************** function _PWM5_LoadDutyValue *****************
  8166 ;; Defined at:
  8167 ;;		line 161 in file "src/pwm.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;  dutyValue       2    0[BANK0 ] unsigned int 
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;		None
  8172 ;; Return value:  Size  Location     Type
  8173 ;;                  1    wreg      void 
  8174 ;; Registers used:
  8175 ;;		wreg, status,2, status,0
  8176 ;; Tracked objects:
  8177 ;;		On entry : 1F/0
  8178 ;;		On exit  : 1F/C
  8179 ;;		Unchanged: 0/0
  8180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8181 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8183 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8184 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;Total ram usage:        4 bytes
  8186 ;; Hardware stack levels used:    1
  8187 ;; Hardware stack levels required when called:    5
  8188 ;; This function calls:
  8189 ;;		Nothing
  8190 ;; This function is called by:
  8191 ;;		_turnMaxLed
  8192 ;;		_turnOffLed
  8193 ;; This function uses a non-reentrant model
  8194 ;;
  8195                           
  8196                           
  8197                           ;psect for function _PWM5_LoadDutyValue
  8198  063F                     _PWM5_LoadDutyValue:	
  8199  063F                     l2453:	
  8200                           ;incstack = 0
  8201                           ; Regs used in _PWM5_LoadDutyValue: [wreg+status,2+status,0]
  8202                           
  8203                           
  8204                           ;pwm.c: 164: PWM5DCH = (dutyValue & 0x03FC)>>2;
  8205  063F  0821               	movf	PWM5_LoadDutyValue@dutyValue+1,w
  8206  0640  00A3               	movwf	??_PWM5_LoadDutyValue+1
  8207  0641  0820               	movf	PWM5_LoadDutyValue@dutyValue,w
  8208  0642  00A2               	movwf	??_PWM5_LoadDutyValue
  8209  0643  36A3               	lsrf	??_PWM5_LoadDutyValue+1,f
  8210  0644  0CA2               	rrf	??_PWM5_LoadDutyValue,f
  8211  0645  36A3               	lsrf	??_PWM5_LoadDutyValue+1,f
  8212  0646  0CA2               	rrf	??_PWM5_LoadDutyValue,f
  8213  0647  0822               	movf	??_PWM5_LoadDutyValue,w
  8214  0648  002C               	movlb	12	; select bank12
  8215  0649  0098               	movwf	24	;volatile
  8216                           
  8217                           ;pwm.c: 167: PWM5DCL = (dutyValue & 0x0003)<<6;
  8218  064A  0020               	movlb	0	; select bank0
  8219  064B  0820               	movf	PWM5_LoadDutyValue@dutyValue,w
  8220  064C  3903               	andlw	3
  8221  064D  00A2               	movwf	??_PWM5_LoadDutyValue
  8222  064E  0CA2               	rrf	??_PWM5_LoadDutyValue,f
  8223  064F  0CA2               	rrf	??_PWM5_LoadDutyValue,f
  8224  0650  0C22               	rrf	??_PWM5_LoadDutyValue,w
  8225  0651  39C0               	andlw	192
  8226  0652  002C               	movlb	12	; select bank12
  8227  0653  0097               	movwf	23	;volatile
  8228  0654  0008               	return
  8229  0655                     __end_of_PWM5_LoadDutyValue:	
  8230  0655                     __ptext18:	
  8231 ;; *************** function _turnOffLed *****************
  8232 ;; Defined at:
  8233 ;;		line 113 in file "src/led.c"
  8234 ;; Parameters:    Size  Location     Type
  8235 ;;		None
  8236 ;; Auto vars:     Size  Location     Type
  8237 ;;		None
  8238 ;; Return value:  Size  Location     Type
  8239 ;;                  1    wreg      void 
  8240 ;; Registers used:
  8241 ;;		wreg, status,2, status,0, pclath, cstack
  8242 ;; Tracked objects:
  8243 ;;		On entry : 1F/0
  8244 ;;		On exit  : 1F/C
  8245 ;;		Unchanged: 0/0
  8246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;Total ram usage:        0 bytes
  8252 ;; Hardware stack levels used:    1
  8253 ;; Hardware stack levels required when called:    6
  8254 ;; This function calls:
  8255 ;;		_PWM1_LoadDutyValue
  8256 ;;		_PWM2_LoadDutyValue
  8257 ;;		_PWM3_LoadDutyValue
  8258 ;;		_PWM4_LoadDutyValue
  8259 ;;		_PWM5_LoadDutyValue
  8260 ;; This function is called by:
  8261 ;;		_findDeviceFlash
  8262 ;; This function uses a non-reentrant model
  8263 ;;
  8264                           
  8265                           
  8266                           ;psect for function _turnOffLed
  8267  0655                     _turnOffLed:	
  8268                           
  8269                           ;led.c: 115: PWM1_LoadDutyValue( 0 );
  8270                           
  8271                           ;incstack = 0
  8272                           ; Regs used in _turnOffLed: [wreg+status,2+status,0+pclath+cstack]
  8273  0655  01A0               	clrf	PWM1_LoadDutyValue@dutyValue
  8274  0656  01A1               	clrf	PWM1_LoadDutyValue@dutyValue+1
  8275  0657  25D4  3180         	fcall	_PWM1_LoadDutyValue
  8276                           
  8277                           ;led.c: 116: PWM2_LoadDutyValue( 0 );
  8278  0659  0020               	movlb	0	; select bank0
  8279  065A  01A0               	clrf	PWM2_LoadDutyValue@dutyValue
  8280  065B  01A1               	clrf	PWM2_LoadDutyValue@dutyValue+1
  8281  065C  25E4  3180         	fcall	_PWM2_LoadDutyValue
  8282                           
  8283                           ;led.c: 117: PWM3_LoadDutyValue( 0 );
  8284  065E  0020               	movlb	0	; select bank0
  8285  065F  01A0               	clrf	PWM3_LoadDutyValue@dutyValue
  8286  0660  01A1               	clrf	PWM3_LoadDutyValue@dutyValue+1
  8287  0661  25F4  3180         	fcall	_PWM3_LoadDutyValue
  8288                           
  8289                           ;led.c: 118: PWM4_LoadDutyValue( 0 );
  8290  0663  0020               	movlb	0	; select bank0
  8291  0664  01A0               	clrf	PWM4_LoadDutyValue@dutyValue
  8292  0665  01A1               	clrf	PWM4_LoadDutyValue@dutyValue+1
  8293  0666  262F  3180         	fcall	_PWM4_LoadDutyValue
  8294                           
  8295                           ;led.c: 119: PWM5_LoadDutyValue( 0 );
  8296  0668  0020               	movlb	0	; select bank0
  8297  0669  01A0               	clrf	PWM5_LoadDutyValue@dutyValue
  8298  066A  01A1               	clrf	PWM5_LoadDutyValue@dutyValue+1
  8299  066B  2E3F               	ljmp	l2453
  8300  066C                     __end_of_turnOffLed:	
  8301  066C                     __ptext9:	
  8302 ;; *************** function _initLedPara *****************
  8303 ;; Defined at:
  8304 ;;		line 122 in file "src/led.c"
  8305 ;; Parameters:    Size  Location     Type
  8306 ;;		None
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  i               1   23[BANK0 ] unsigned char 
  8309 ;; Return value:  Size  Location     Type
  8310 ;;                  1    wreg      void 
  8311 ;; Registers used:
  8312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8313 ;; Tracked objects:
  8314 ;;		On entry : 1F/1
  8315 ;;		On exit  : 1F/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8320 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;Total ram usage:        3 bytes
  8323 ;; Hardware stack levels used:    1
  8324 ;; Hardware stack levels required when called:    9
  8325 ;; This function calls:
  8326 ;;		_readLedPara
  8327 ;; This function is called by:
  8328 ;;		_initLed
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           
  8333                           ;psect for function _initLedPara
  8334  066C                     _initLedPara:	
  8335  066C                     l2783:	
  8336                           ;incstack = 0
  8337                           ; Regs used in _initLedPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8338                           
  8339                           
  8340                           ;led.c: 124: readLedPara();
  8341  066C  2698  3180         	fcall	_readLedPara
  8342                           
  8343                           ;led.c: 125: if (gLedPara.mPara.cw_rgb.fOn > 0x03)
  8344  066E  3099               	movlw	153
  8345  066F  0086               	movwf	6
  8346  0670  3023               	movlw	35
  8347  0671  0087               	movwf	7
  8348  0672  3004               	movlw	4
  8349  0673  0201               	subwf	1,w
  8350  0674  1C03               	skipc
  8351  0675  2E7A               	goto	l2789
  8352                           
  8353                           ;led.c: 126: {
  8354                           ;led.c: 127: gLedPara.mPara.cw_rgb.fOn = 0x00;
  8355  0676  3099               	movlw	153
  8356  0677  0086               	movwf	6
  8357  0678  3000               	movlw	0
  8358  0679  3FC0               	movwi [0]fsr1
  8359  067A                     l2789:	
  8360                           
  8361                           ;led.c: 128: }
  8362                           ;led.c: 129: for (unsigned char i = 1; i < 7; i++)
  8363  067A  01B7               	clrf	initLedPara@i
  8364  067B  0AB7               	incf	initLedPara@i,f
  8365  067C                     l2795:	
  8366                           
  8367                           ;led.c: 130: {
  8368                           ;led.c: 132: if (gLedPara.mPara.array[i] > 32)
  8369  067C  0837               	movf	initLedPara@i,w
  8370  067D  3E99               	addlw	153
  8371  067E  0086               	movwf	6
  8372  067F  3023               	movlw	35
  8373  0680  0187               	clrf	7
  8374  0681  3D87               	addwfc	7,f
  8375  0682  3021               	movlw	33
  8376  0683  0201               	subwf	1,w
  8377  0684  1C03               	skipc
  8378  0685  2E92               	goto	l2799
  8379                           
  8380                           ;led.c: 133: {
  8381                           ;led.c: 134: gLedPara.mPara.array[i] = 32;
  8382  0686  0837               	movf	initLedPara@i,w
  8383  0687  3E99               	addlw	153
  8384  0688  00B5               	movwf	??_initLedPara
  8385  0689  3023               	movlw	35
  8386  068A  01B6               	clrf	??_initLedPara+1
  8387  068B  3DB6               	addwfc	??_initLedPara+1,f
  8388  068C  0835               	movf	??_initLedPara,w
  8389  068D  0086               	movwf	6
  8390  068E  0836               	movf	??_initLedPara+1,w
  8391  068F  0087               	movwf	7
  8392  0690  3020               	movlw	32
  8393  0691  0081               	movwf	1
  8394  0692                     l2799:	
  8395  0692  3007               	movlw	7
  8396  0693  0AB7               	incf	initLedPara@i,f
  8397  0694  0237               	subwf	initLedPara@i,w
  8398  0695  1803               	btfsc	3,0
  8399  0696  0008               	return
  8400  0697  2E7C               	goto	l2795
  8401  0698                     __end_of_initLedPara:	
  8402  0698                     __ptext10:	
  8403 ;; *************** function _readLedPara *****************
  8404 ;; Defined at:
  8405 ;;		line 106 in file "src/eeprom.c"
  8406 ;; Parameters:    Size  Location     Type
  8407 ;;		None
  8408 ;; Auto vars:     Size  Location     Type
  8409 ;;  i               1   20[BANK0 ] unsigned char 
  8410 ;; Return value:  Size  Location     Type
  8411 ;;                  1    wreg      void 
  8412 ;; Registers used:
  8413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8414 ;; Tracked objects:
  8415 ;;		On entry : 1F/1
  8416 ;;		On exit  : 1F/0
  8417 ;;		Unchanged: 0/0
  8418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8423 ;;Total ram usage:        5 bytes
  8424 ;; Hardware stack levels used:    1
  8425 ;; Hardware stack levels required when called:    8
  8426 ;; This function calls:
  8427 ;;		___wmul
  8428 ;;		_readBuffer
  8429 ;; This function is called by:
  8430 ;;		_initLedPara
  8431 ;; This function uses a non-reentrant model
  8432 ;;
  8433                           
  8434                           
  8435                           ;psect for function _readLedPara
  8436  0698                     _readLedPara:	
  8437                           
  8438                           ;eeprom.c: 108: readBuffer(0x10, (unsigned char*)&(gLedPara.mPara), sizeof(gLedPara.mPar
      +                          a));
  8439                           
  8440                           ;incstack = 0
  8441                           ; Regs used in _readLedPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8442  0698  3099               	movlw	153
  8443  0699  0020               	movlb	0	; select bank0
  8444  069A  00A6               	movwf	readBuffer@buf
  8445  069B  3023               	movlw	35
  8446  069C  00A7               	movwf	readBuffer@buf+1
  8447  069D  3007               	movlw	7
  8448  069E  00A8               	movwf	readBuffer@len
  8449  069F  3010               	movlw	16
  8450  06A0  26C3  3180         	fcall	_readBuffer
  8451                           
  8452                           ;eeprom.c: 109: for (unsigned char i = 0; i < 8; i++)
  8453  06A2  01B4               	clrf	readLedPara@i
  8454  06A3                     l2413:	
  8455                           
  8456                           ;eeprom.c: 110: {
  8457                           ;eeprom.c: 111: readBuffer(0x20+i*16, (unsigned char*)&(gLedPara.aPara[i]), sizeof(gLedP
      +                          ara.aPara[i]) );
  8458  06A3  0834               	movf	readLedPara@i,w
  8459  06A4  2720  3180         	fcall	PL4	;call to abstracted procedure
  8460  06A6  2551  3180         	fcall	___wmul
  8461  06A8  30A0               	movlw	160
  8462  06A9  00B0               	movwf	??_readLedPara
  8463  06AA  3023               	movlw	35
  8464  06AB  00B1               	movwf	??_readLedPara+1
  8465  06AC  0820               	movf	?___wmul,w
  8466  06AD  0730               	addwf	??_readLedPara,w
  8467  06AE  00B2               	movwf	??_readLedPara+2
  8468  06AF  0821               	movf	?___wmul+1,w
  8469  06B0  3D31               	addwfc	??_readLedPara+1,w
  8470  06B1  00B3               	movwf	??_readLedPara+3
  8471  06B2  0832               	movf	??_readLedPara+2,w
  8472  06B3  00A6               	movwf	readBuffer@buf
  8473  06B4  0833               	movf	??_readLedPara+3,w
  8474  06B5  00A7               	movwf	readBuffer@buf+1
  8475  06B6  300A               	movlw	10
  8476  06B7  00A8               	movwf	readBuffer@len
  8477  06B8  0E34               	swapf	readLedPara@i,w
  8478  06B9  39F0               	andlw	240
  8479  06BA  3E20               	addlw	32
  8480  06BB  26C3  3180         	fcall	_readBuffer
  8481  06BD  3008               	movlw	8
  8482  06BE  0AB4               	incf	readLedPara@i,f
  8483  06BF  0234               	subwf	readLedPara@i,w
  8484  06C0  1803               	btfsc	3,0
  8485  06C1  0008               	return
  8486  06C2  2EA3               	goto	l2413
  8487  06C3                     __end_of_readLedPara:	
  8488  06C3                     __ptext11:	
  8489 ;; *************** function _readBuffer *****************
  8490 ;; Defined at:
  8491 ;;		line 78 in file "src/eeprom.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;  addr            1    wreg     unsigned char 
  8494 ;;  buf             2    6[BANK0 ] PTR unsigned char 
  8495 ;;		 -> gLedPara.aPara(80), gLedPara.mPara(7), gLedPara(87), 
  8496 ;;  len             1    8[BANK0 ] unsigned char 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  addr            1   14[BANK0 ] unsigned char 
  8499 ;;  i               1   15[BANK0 ] unsigned char 
  8500 ;; Return value:  Size  Location     Type
  8501 ;;                  1    wreg      void 
  8502 ;; Registers used:
  8503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8504 ;; Tracked objects:
  8505 ;;		On entry : 1F/0
  8506 ;;		On exit  : 1F/0
  8507 ;;		Unchanged: 0/0
  8508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8509 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;Total ram usage:       10 bytes
  8514 ;; Hardware stack levels used:    1
  8515 ;; Hardware stack levels required when called:    7
  8516 ;; This function calls:
  8517 ;;		_readByte
  8518 ;; This function is called by:
  8519 ;;		_readLedPara
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           
  8524                           ;psect for function _readBuffer
  8525  06C3                     _readBuffer:	
  8526                           
  8527                           ;incstack = 0
  8528                           ; Regs used in _readBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8529                           ;readBuffer@addr stored from wreg
  8530  06C3  00AE               	movwf	readBuffer@addr
  8531                           
  8532                           ;eeprom.c: 80: for (unsigned char i = 0; i < len; i++)
  8533  06C4  01AF               	clrf	readBuffer@i
  8534  06C5                     l2259:	
  8535  06C5  0828               	movf	readBuffer@len,w
  8536  06C6  022F               	subwf	readBuffer@i,w
  8537  06C7  1803               	btfsc	3,0
  8538  06C8  0008               	return
  8539                           
  8540                           ;eeprom.c: 81: {
  8541                           ;eeprom.c: 82: *(buf+i) = readByte(addr+i);
  8542  06C9  082E               	movf	readBuffer@addr,w
  8543  06CA  072F               	addwf	readBuffer@i,w
  8544  06CB  26DE  3180         	fcall	_readByte
  8545  06CD  00A9               	movwf	??_readBuffer
  8546  06CE  082F               	movf	readBuffer@i,w
  8547  06CF  00AA               	movwf	??_readBuffer+1
  8548  06D0  01AB               	clrf	??_readBuffer+2
  8549  06D1  0726               	addwf	readBuffer@buf,w
  8550  06D2  00AC               	movwf	??_readBuffer+3
  8551  06D3  082B               	movf	??_readBuffer+2,w
  8552  06D4  3D27               	addwfc	readBuffer@buf+1,w
  8553  06D5  00AD               	movwf	??_readBuffer+4
  8554  06D6  082C               	movf	??_readBuffer+3,w
  8555  06D7  0086               	movwf	6
  8556  06D8  082D               	movf	??_readBuffer+4,w
  8557  06D9  0087               	movwf	7
  8558  06DA  0829               	movf	??_readBuffer,w
  8559  06DB  0081               	movwf	1
  8560  06DC  0AAF               	incf	readBuffer@i,f
  8561  06DD  2EC5               	goto	l2259
  8562  06DE                     __end_of_readBuffer:	
  8563  06DE                     __ptext12:	
  8564 ;; *************** function _readByte *****************
  8565 ;; Defined at:
  8566 ;;		line 52 in file "src/eeprom.c"
  8567 ;; Parameters:    Size  Location     Type
  8568 ;;  addr            1    wreg     unsigned char 
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;  addr            1    2[BANK0 ] unsigned char 
  8571 ;;  result          1    3[BANK0 ] unsigned char 
  8572 ;; Return value:  Size  Location     Type
  8573 ;;                  1    wreg      unsigned char 
  8574 ;; Registers used:
  8575 ;;		wreg, pclath, cstack
  8576 ;; Tracked objects:
  8577 ;;		On entry : 1F/0
  8578 ;;		On exit  : 1F/0
  8579 ;;		Unchanged: 0/0
  8580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;Total ram usage:        2 bytes
  8586 ;; Hardware stack levels used:    1
  8587 ;; Hardware stack levels required when called:    6
  8588 ;; This function calls:
  8589 ;;		_DATAEE_ReadByte
  8590 ;; This function is called by:
  8591 ;;		_readBuffer
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           
  8596                           ;psect for function _readByte
  8597  06DE                     _readByte:	
  8598                           
  8599                           ;incstack = 0
  8600                           ; Regs used in _readByte: [wreg+pclath+cstack]
  8601                           ;readByte@addr stored from wreg
  8602  06DE  00A2               	movwf	readByte@addr
  8603                           
  8604                           ;eeprom.c: 54: unsigned char result = DATAEE_ReadByte(0x7000 + addr);
  8605  06DF  00A0               	movwf	DATAEE_ReadByte@bAdd
  8606  06E0  3070               	movlw	112
  8607  06E1  01A1               	clrf	DATAEE_ReadByte@bAdd+1
  8608  06E2  07A1               	addwf	DATAEE_ReadByte@bAdd+1,f
  8609  06E3  26E7               	fcall	_DATAEE_ReadByte
  8610  06E4  0020               	movlb	0	; select bank0
  8611  06E5  00A3               	movwf	readByte@result
  8612                           
  8613                           ;eeprom.c: 55: return result;
  8614  06E6  0008               	return
  8615  06E7                     __end_of_readByte:	
  8616  06E7                     __ptext13:	
  8617 ;; *************** function _DATAEE_ReadByte *****************
  8618 ;; Defined at:
  8619 ;;		line 25 in file "src/eeprom.c"
  8620 ;; Parameters:    Size  Location     Type
  8621 ;;  bAdd            2    0[BANK0 ] unsigned int 
  8622 ;; Auto vars:     Size  Location     Type
  8623 ;;		None
  8624 ;; Return value:  Size  Location     Type
  8625 ;;                  1    wreg      unsigned char 
  8626 ;; Registers used:
  8627 ;;		wreg
  8628 ;; Tracked objects:
  8629 ;;		On entry : 1F/0
  8630 ;;		On exit  : 1F/11
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8633 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8637 ;;Total ram usage:        2 bytes
  8638 ;; Hardware stack levels used:    1
  8639 ;; Hardware stack levels required when called:    5
  8640 ;; This function calls:
  8641 ;;		Nothing
  8642 ;; This function is called by:
  8643 ;;		_readByte
  8644 ;; This function uses a non-reentrant model
  8645 ;;
  8646                           
  8647                           
  8648                           ;psect for function _DATAEE_ReadByte
  8649  06E7                     _DATAEE_ReadByte:	
  8650                           
  8651                           ;eeprom.c: 27: NVMADRH = ((bAdd >> 8) & 0xFF);
  8652                           
  8653                           ;incstack = 0
  8654                           ; Regs used in _DATAEE_ReadByte: [wreg]
  8655  06E7  0821               	movf	DATAEE_ReadByte@bAdd+1,w
  8656  06E8  0031               	movlb	17	; select bank17
  8657  06E9  0092               	movwf	18	;volatile
  8658                           
  8659                           ;eeprom.c: 28: NVMADRL = (bAdd & 0xFF);
  8660  06EA  0020               	movlb	0	; select bank0
  8661  06EB  0820               	movf	DATAEE_ReadByte@bAdd,w
  8662  06EC  0031               	movlb	17	; select bank17
  8663  06ED  0091               	movwf	17	;volatile
  8664                           
  8665                           ;eeprom.c: 29: NVMCON1bits.NVMREGS = 1;
  8666  06EE  1715               	bsf	21,6	;volsfr
  8667                           
  8668                           ;eeprom.c: 30: NVMCON1bits.RD = 1;
  8669  06EF  1415               	bsf	21,0	;volsfr
  8670                           
  8671                           ;eeprom.c: 31: __nop();
  8672  06F0  0000               	nop
  8673                           
  8674                           ;eeprom.c: 32: __nop();
  8675  06F1  0000               	nop
  8676                           
  8677                           ;eeprom.c: 34: return (NVMDATL);
  8678  06F2  0031               	movlb	17	; select bank17
  8679  06F3  0813               	movf	19,w	;volatile
  8680  06F4  0008               	return
  8681  06F5                     __end_of_DATAEE_ReadByte:	
  8682  06F5                     __ptext6:	
  8683 ;; *************** function _DATAEE_WriteByte *****************
  8684 ;; Defined at:
  8685 ;;		line 3 in file "src/eeprom.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;  bAdd            2    0[BANK0 ] unsigned int 
  8688 ;;  bData           1    2[BANK0 ] unsigned char 
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  1    wreg      void 
  8693 ;; Registers used:
  8694 ;;		wreg, status,2, status,0
  8695 ;; Tracked objects:
  8696 ;;		On entry : 1F/0
  8697 ;;		On exit  : 1F/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8700 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;Total ram usage:        4 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    5
  8707 ;; This function calls:
  8708 ;;		Nothing
  8709 ;; This function is called by:
  8710 ;;		_writeByte
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           
  8715                           ;psect for function _DATAEE_WriteByte
  8716  06F5                     _DATAEE_WriteByte:	
  8717  06F5                     l2219:	
  8718                           ;incstack = 0
  8719                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  8720                           
  8721                           
  8722                           ;eeprom.c: 5: unsigned char GIEBitValue = INTCONbits.GIE;
  8723  06F5  3000               	movlw	0
  8724  06F6  1B8B               	btfsc	11,7	;volatile
  8725  06F7  3001               	movlw	1
  8726  06F8  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  8727                           
  8728                           ;eeprom.c: 7: NVMADRH = ((bAdd >> 8) & 0xFF);
  8729  06F9  0821               	movf	DATAEE_WriteByte@bAdd+1,w
  8730  06FA  0031               	movlb	17	; select bank17
  8731  06FB  0092               	movwf	18	;volatile
  8732                           
  8733                           ;eeprom.c: 8: NVMADRL = (bAdd & 0xFF);
  8734  06FC  0020               	movlb	0	; select bank0
  8735  06FD  0820               	movf	DATAEE_WriteByte@bAdd,w
  8736  06FE  0031               	movlb	17	; select bank17
  8737  06FF  0091               	movwf	17	;volatile
  8738                           
  8739                           ;eeprom.c: 9: NVMDATL = bData;
  8740  0700  0020               	movlb	0	; select bank0
  8741  0701  0822               	movf	DATAEE_WriteByte@bData,w
  8742  0702  0031               	movlb	17	; select bank17
  8743  0703  0093               	movwf	19	;volatile
  8744                           
  8745                           ;eeprom.c: 10: NVMCON1bits.NVMREGS = 1;
  8746  0704  1715               	bsf	21,6	;volsfr
  8747                           
  8748                           ;eeprom.c: 11: NVMCON1bits.WREN = 1;
  8749  0705  1515               	bsf	21,2	;volsfr
  8750                           
  8751                           ;eeprom.c: 12: INTCONbits.GIE = 0;
  8752  0706  138B               	bcf	11,7	;volatile
  8753                           
  8754                           ;eeprom.c: 13: NVMCON2 = 0x55;
  8755  0707  3055               	movlw	85
  8756  0708  0096               	movwf	22	;volsfr
  8757                           
  8758                           ;eeprom.c: 14: NVMCON2 = 0xAA;
  8759  0709  30AA               	movlw	170
  8760  070A  0096               	movwf	22	;volsfr
  8761                           
  8762                           ;eeprom.c: 15: NVMCON1bits.WR = 1;
  8763  070B  1495               	bsf	21,1	;volsfr
  8764  070C                     l259:	
  8765                           ;eeprom.c: 18: {
  8766                           
  8767  070C  1895               	btfsc	21,1	;volsfr
  8768  070D  2F0C               	goto	l259
  8769                           
  8770                           ;eeprom.c: 19: }
  8771                           ;eeprom.c: 21: NVMCON1bits.WREN = 0;
  8772  070E  1115               	bcf	21,2	;volsfr
  8773                           
  8774                           ;eeprom.c: 22: INTCONbits.GIE = GIEBitValue;
  8775  070F  0020               	movlb	0	; select bank0
  8776  0710  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  8777  0711  1C03               	skipc
  8778  0712  138B               	bcf	11,7	;volatile
  8779  0713  1803               	skipnc
  8780  0714  178B               	bsf	11,7	;volatile
  8781  0715  0008               	return
  8782  0716                     __end_of_DATAEE_WriteByte:	
  8783  0716                     PL2:	
  8784  0716  00B0               	movwf	??_autoRun
  8785  0717  3023               	movlw	35
  8786  0718  00B1               	movwf	??_autoRun+1
  8787  0719  0820               	movf	?___wmul,w
  8788  071A  0730               	addwf	??_autoRun,w
  8789  071B  0086               	movwf	6
  8790  071C  0821               	movf	?___wmul+1,w
  8791  071D  3D31               	addwfc	??_autoRun+1,w
  8792  071E  0087               	movwf	7
  8793  071F  0008               	return
  8794  0720                     __end_ofPL2:	
  8795  0720                     PL4:	
  8796  0720  00A0               	movwf	___wmul@multiplier
  8797  0721  300A               	movlw	10
  8798  0722  01A1               	clrf	___wmul@multiplier+1
  8799  0723  00A2               	movwf	___wmul@multiplicand
  8800  0724  01A3               	clrf	___wmul@multiplicand+1
  8801  0725  0008               	return
  8802  0726                     __end_ofPL4:	
  8803  0726                     PL6:	
  8804  0726  01BB               	clrf	??_DecodeDATA+1
  8805  0727  0021               	movlb	1	; select bank1
  8806  0728  0627               	xorwf	_rxBuf^(0+128),w
  8807  0729  0020               	movlb	0	; select bank0
  8808  072A  00BC               	movwf	??_DecodeDATA+2
  8809  072B  083B               	movf	??_DecodeDATA+1,w
  8810  072C  00BD               	movwf	??_DecodeDATA+3
  8811  072D  043C               	iorwf	??_DecodeDATA+2,w
  8812  072E  0008               	return
  8813  072F                     __end_ofPL6:	
  8814  072F                     PL8:	
  8815  072F  00A0               	movwf	___wmul@multiplier
  8816  0730  3099               	movlw	153
  8817  0731  01A1               	clrf	___wmul@multiplier+1
  8818  0732  0086               	movwf	6
  8819  0733  3023               	movlw	35
  8820  0734  0087               	movwf	7
  8821  0735  3144               	addfsr 1,4
  8822  0736  0801               	movf	1,w
  8823  0737  00A2               	movwf	___wmul@multiplicand
  8824  0738  01A3               	clrf	___wmul@multiplicand+1
  8825  0739  0008               	return
  8826  073A                     __end_ofPL8:	
  8827  073A                     PL14:	
  8828  073A  0084               	movwf	4
  8829  073B  3023               	movlw	35
  8830  073C  3D21               	addwfc	?___wmul+1,w
  8831  073D  0085               	movwf	5
  8832  073E  3026               	movlw	low isValidTimer@para
  8833  073F  0086               	movwf	6
  8834  0740  3000               	movlw	high isValidTimer@para
  8835  0741  0087               	movwf	7
  8836  0742  340A               	retlw	10
  8837  0743                     __end_ofPL14:	
  8838  0743                     PL16:	
  8839  0743  0821               	movf	PWM4_LoadDutyValue@dutyValue+1,w
  8840  0744  0026               	movlb	6	; select bank6
  8841  0745  0096               	movwf	22	;volatile
  8842  0746  0020               	movlb	0	; select bank0
  8843  0747  0820               	movf	PWM4_LoadDutyValue@dutyValue,w
  8844  0748  0026               	movlb	6	; select bank6
  8845  0749  0095               	movwf	21	;volatile
  8846  074A  0008               	return
  8847  074B                     __end_ofPL16:	
  8848  074B                     PL18:	
  8849  074B  0821               	movf	PWM1_LoadDutyValue@dutyValue+1,w
  8850  074C  0025               	movlb	5	; select bank5
  8851  074D  0092               	movwf	18	;volatile
  8852  074E  0020               	movlb	0	; select bank0
  8853  074F  0820               	movf	PWM1_LoadDutyValue@dutyValue,w
  8854  0750  0025               	movlb	5	; select bank5
  8855  0751  0091               	movwf	17	;volatile
  8856  0752  0008               	return
  8857  0753                     __end_ofPL18:	
  8858  0753                     PL20:	
  8859  0753  0821               	movf	PWM2_LoadDutyValue@dutyValue+1,w
  8860  0754  0025               	movlb	5	; select bank5
  8861  0755  0096               	movwf	22	;volatile
  8862  0756  0020               	movlb	0	; select bank0
  8863  0757  0820               	movf	PWM2_LoadDutyValue@dutyValue,w
  8864  0758  0025               	movlb	5	; select bank5
  8865  0759  0095               	movwf	21	;volatile
  8866  075A  0008               	return
  8867  075B                     __end_ofPL20:	
  8868  075B                     PL22:	
  8869  075B  0821               	movf	PWM3_LoadDutyValue@dutyValue+1,w
  8870  075C  0026               	movlb	6	; select bank6
  8871  075D  0092               	movwf	18	;volatile
  8872  075E  0020               	movlb	0	; select bank0
  8873  075F  0820               	movf	PWM3_LoadDutyValue@dutyValue,w
  8874  0760  0026               	movlb	6	; select bank6
  8875  0761  0091               	movwf	17	;volatile
  8876  0762  0008               	return
  8877  0763                     __end_ofPL22:	
  8878  0763                     PL24:	
  8879  0763  30A7               	movlw	low _rxBuf
  8880  0764  0020               	movlb	0	; select bank0
  8881  0765  00A3               	movwf	getCRC@pbuf
  8882  0766  3000               	movlw	high _rxBuf
  8883  0767  00A4               	movwf	getCRC@pbuf+1
  8884  0768  0008               	return
  8885  0769                     __end_ofPL24:	
  8886  0769                     PL26:	
  8887  0769  0086               	movwf	6
  8888  076A  083A               	movf	??_DecodeDATA,w
  8889  076B  0081               	movwf	1
  8890  076C  0021               	movlb	1	; select bank1
  8891  076D  082B               	movf	(_rxBuf^(0+128)+4),w
  8892  076E  0020               	movlb	0	; select bank0
  8893  076F  00BA               	movwf	??_DecodeDATA
  8894  0770  0008               	return
  8895  0771                     __end_ofPL26:	
  8896  0771                     PL28:	
  8897  0771  0086               	movwf	6
  8898  0772  3023               	movlw	35
  8899  0773  0087               	movwf	7
  8900  0774  3146               	addfsr 1,6
  8901  0775  0801               	movf	1,w
  8902  0776  00A2               	movwf	___wmul@multiplicand
  8903  0777  01A3               	clrf	___wmul@multiplicand+1
  8904  0778  0008               	return
  8905  0779                     __end_ofPL28:	
  8906  0779                     PL30:	
  8907  0779  3055               	movlw	85
  8908  077A  003C               	movlb	28	; select bank28
  8909  077B  008F               	movwf	15	;volatile
  8910  077C  30AA               	movlw	170
  8911  077D  008F               	movwf	15	;volatile
  8912  077E  0008               	return
  8913  077F                     __end_ofPL30:	
  8914  077F                     PL34:	
  8915  077F  081F               	movf	31,w	;volatile
  8916  0780  39FC               	andlw	-4
  8917  0781  3801               	iorlw	1
  8918  0782  009F               	movwf	31	;volatile
  8919  0783  0008               	return
  8920  0784                     __end_ofPL34:	
  8921  0784                     PL48:	
  8922  0784  3099               	movlw	153
  8923  0785  0086               	movwf	6
  8924  0786  3023               	movlw	35
  8925  0787  0087               	movwf	7
  8926  0788  0008               	return
  8927  0789                     __end_ofPL48:	
  8928  0789                     PL50:	
  8929  0789  0825               	movf	bleSendCMD@pBuf+1,w
  8930  078A  00A2               	movwf	eusartSendBuffer@buf+1
  8931  078B  0824               	movf	bleSendCMD@pBuf,w
  8932  078C  00A1               	movwf	eusartSendBuffer@buf
  8933  078D  0008               	return
  8934  078E                     __end_ofPL50:	
  8935                           
  8936                           	psect	bssCOMMON
  8937  0079                     __pbssCOMMON:	
  8938  0079                     _keyValue:	
  8939  0079                     	ds	1
  8940  007A                     keyScan@lastKey:	
  8941  007A                     	ds	1
  8942                           
  8943                           	psect	bssBANK0
  8944  0048                     __pbssBANK0:	
  8945  0048                     _gLedRunPara:	
  8946  0048                     	ds	23
  8947  005F                     _eusartRunPara:	
  8948  005F                     	ds	7
  8949  0066                     _gCurrentTime:	
  8950  0066                     	ds	7
  8951  006D                     findDeviceFlash@tog:	
  8952  006D                     	ds	1
  8953                           
  8954                           	psect	bssBANK1
  8955  00A0                     __pbssBANK1:	
  8956  00A0                     _mPara:	
  8957  00A0                     	ds	7
  8958  00A7                     _rxBuf:	
  8959  00A7                     	ds	32
  8960                           
  8961                           	psect	dataBANK1
  8962  00C7                     __pdataBANK1:	
  8963  00C7                     _MONTH_DAY:	
  8964  00C7                     	ds	12
  8965                           
  8966                           	psect	bssBANK2
  8967  0120                     __pbssBANK2:	
  8968  0120                     _txBuf:	
  8969  0120                     	ds	32
  8970                           
  8971                           	psect	bssBANK3
  8972  01A0                     __pbssBANK3:	
  8973  01A0                     _aPara:	
  8974  01A0                     	ds	80
  8975                           
  8976                           	psect	clrtext
  8977  079E                     clear_ram0:	
  8978                           ;	Called with FSR0 containing the base address, and
  8979                           ;	btemp/btemp+1 has the size to clear
  8980                           
  8981  079E  0064               	clrwdt	;clear the watchdog before getting into this loop
  8982  079F                     clrloop0:	
  8983  079F  3001               	movlw	1
  8984  07A0  0180               	clrf	0	;clear RAM location pointed to by FSR
  8985  07A1  3101               	addfsr 0,1
  8986  07A2  02FE               	subwf	126,f
  8987  07A3  3000               	movlw	0
  8988  07A4  3BFF               	subwfb	127,f
  8989  07A5  087F               	movf	127,w
  8990  07A6  047E               	iorwf	126,w
  8991  07A7  1903               	btfsc	3,2
  8992  07A8  3400               	retlw	0	;all done for this memory range, return
  8993  07A9  2F9F               	goto	clrloop0	;have we reached the end yet?
  8994                           
  8995                           	psect	cstackCOMMON
  8996  0070                     __pcstackCOMMON:	
  8997  0070                     ?_eusartSendByte:	
  8998  0070                     ?_strCmp:	
  8999                           ; 1 bytes @ 0x0
  9000                           
  9001  0070                     ?_updatePara:	
  9002                           ; 1 bytes @ 0x0
  9003                           
  9004  0070                     ?_PIN_MANAGER_Initialize:	
  9005                           ; 1 bytes @ 0x0
  9006                           
  9007  0070                     ?_PWM1_Initialize:	
  9008                           ; 1 bytes @ 0x0
  9009                           
  9010  0070                     ?_PWM2_Initialize:	
  9011                           ; 1 bytes @ 0x0
  9012                           
  9013  0070                     ?_PWM3_Initialize:	
  9014                           ; 1 bytes @ 0x0
  9015                           
  9016  0070                     ?_PWM4_Initialize:	
  9017                           ; 1 bytes @ 0x0
  9018                           
  9019  0070                     ?_PWM5_Initialize:	
  9020                           ; 1 bytes @ 0x0
  9021                           
  9022  0070                     ?_TMR2_Initialize:	
  9023                           ; 1 bytes @ 0x0
  9024                           
  9025  0070                     ?_TMR0_Initialize:	
  9026                           ; 1 bytes @ 0x0
  9027                           
  9028  0070                     ?_EUSART_Initialize:	
  9029                           ; 1 bytes @ 0x0
  9030                           
  9031  0070                     ?_updateLed:	
  9032                           ; 1 bytes @ 0x0
  9033                           
  9034  0070                     ?_EUSART_RCV_ISR:	
  9035                           ; 1 bytes @ 0x0
  9036                           
  9037  0070                     ??_EUSART_RCV_ISR:	
  9038                           ; 1 bytes @ 0x0
  9039                           
  9040  0070                     ?_runRTC:	
  9041                           ; 1 bytes @ 0x0
  9042                           
  9043  0070                     ?_initRTC:	
  9044                           ; 1 bytes @ 0x0
  9045                           
  9046  0070                     ?_TMR0_StartTimer:	
  9047                           ; 1 bytes @ 0x0
  9048                           
  9049  0070                     ?_TMR2_StartTimer:	
  9050                           ; 1 bytes @ 0x0
  9051                           
  9052  0070                     ?_bleSendManualData:	
  9053                           ; 1 bytes @ 0x0
  9054                           
  9055  0070                     ?_bleSendTimerData:	
  9056                           ; 1 bytes @ 0x0
  9057                           
  9058  0070                     ?_bleSendDeviceTime:	
  9059                           ; 1 bytes @ 0x0
  9060                           
  9061  0070                     ?_DecodeCMD:	
  9062                           ; 1 bytes @ 0x0
  9063                           
  9064  0070                     ?_DecodeDATA:	
  9065                           ; 1 bytes @ 0x0
  9066                           
  9067  0070                     ?_initBLE:	
  9068                           ; 1 bytes @ 0x0
  9069                           
  9070  0070                     ?_OSCILLATOR_Initialize:	
  9071                           ; 1 bytes @ 0x0
  9072                           
  9073  0070                     ?_SYSTEM_Initialize:	
  9074                           ; 1 bytes @ 0x0
  9075                           
  9076  0070                     ?_TMR2_UserInterruptHandler:	
  9077                           ; 1 bytes @ 0x0
  9078                           
  9079  0070                     ?_INTERRUPT_InterruptManager:	
  9080                           ; 1 bytes @ 0x0
  9081                           
  9082  0070                     ?_readByte:	
  9083                           ; 1 bytes @ 0x0
  9084                           
  9085  0070                     ?_readLedPara:	
  9086                           ; 1 bytes @ 0x0
  9087                           
  9088  0070                     ?_saveLedPara:	
  9089                           ; 1 bytes @ 0x0
  9090                           
  9091  0070                     ?_updatePWM:	
  9092                           ; 1 bytes @ 0x0
  9093                           
  9094  0070                     ?_autoRun:	
  9095                           ; 1 bytes @ 0x0
  9096                           
  9097  0070                     ?_turnMaxLed:	
  9098                           ; 1 bytes @ 0x0
  9099                           
  9100  0070                     ?_turnOffLed:	
  9101                           ; 1 bytes @ 0x0
  9102                           
  9103  0070                     ?_initLedPara:	
  9104                           ; 1 bytes @ 0x0
  9105                           
  9106  0070                     ?_initLed:	
  9107                           ; 1 bytes @ 0x0
  9108                           
  9109  0070                     ?_findDeviceFlash:	
  9110                           ; 1 bytes @ 0x0
  9111                           
  9112  0070                     ?_main:	
  9113                           ; 1 bytes @ 0x0
  9114                           
  9115  0070                     ?i1_PWM1_LoadDutyValue:	
  9116                           ; 1 bytes @ 0x0
  9117                           
  9118  0070                     ?i1_PWM2_LoadDutyValue:	
  9119                           ; 1 bytes @ 0x0
  9120                           
  9121  0070                     ?i1_PWM3_LoadDutyValue:	
  9122                           ; 1 bytes @ 0x0
  9123                           
  9124  0070                     ?i1_PWM4_LoadDutyValue:	
  9125                           ; 1 bytes @ 0x0
  9126                           
  9127  0070                     ?___lwmod:	
  9128                           ; 1 bytes @ 0x0
  9129                           
  9130  0070                     strCmp@s2:	
  9131                           ; 2 bytes @ 0x0
  9132                           
  9133  0070                     ___lwmod@divisor:	
  9134                           ; 2 bytes @ 0x0
  9135                           
  9136  0070                     i1PWM1_LoadDutyValue@dutyValue:	
  9137                           ; 2 bytes @ 0x0
  9138                           
  9139  0070                     i1PWM2_LoadDutyValue@dutyValue:	
  9140                           ; 2 bytes @ 0x0
  9141                           
  9142  0070                     i1PWM3_LoadDutyValue@dutyValue:	
  9143                           ; 2 bytes @ 0x0
  9144                           
  9145  0070                     i1PWM4_LoadDutyValue@dutyValue:	
  9146                           ; 2 bytes @ 0x0
  9147                           
  9148                           
  9149                           ; 2 bytes @ 0x0
  9150  0070                     	ds	2
  9151  0072                     ??_strCmp:	
  9152  0072                     ??_updateLed:	
  9153                           ; 1 bytes @ 0x2
  9154                           
  9155  0072                     ??_updatePWM:	
  9156                           ; 1 bytes @ 0x2
  9157                           
  9158  0072                     ??i1_PWM1_LoadDutyValue:	
  9159                           ; 1 bytes @ 0x2
  9160                           
  9161  0072                     ??i1_PWM2_LoadDutyValue:	
  9162                           ; 1 bytes @ 0x2
  9163                           
  9164  0072                     ??i1_PWM3_LoadDutyValue:	
  9165                           ; 1 bytes @ 0x2
  9166                           
  9167  0072                     ??i1_PWM4_LoadDutyValue:	
  9168                           ; 1 bytes @ 0x2
  9169                           
  9170  0072                     ___lwmod@dividend:	
  9171                           ; 1 bytes @ 0x2
  9172                           
  9173                           
  9174                           ; 2 bytes @ 0x2
  9175  0072                     	ds	1
  9176  0073                     strCmp@s1:	
  9177                           
  9178                           ; 1 bytes @ 0x3
  9179  0073                     	ds	1
  9180  0074                     ??_DecodeCMD:	
  9181  0074                     ??___lwmod:	
  9182                           ; 1 bytes @ 0x4
  9183                           
  9184  0074                     ___lwmod@counter:	
  9185                           ; 1 bytes @ 0x4
  9186                           
  9187                           
  9188                           ; 1 bytes @ 0x4
  9189  0074                     	ds	1
  9190  0075                     ?_checkIsYearLeap:	
  9191  0075                     checkIsYearLeap@year:	
  9192                           ; 1 bytes @ 0x5
  9193                           
  9194                           
  9195                           ; 2 bytes @ 0x5
  9196  0075                     	ds	2
  9197  0077                     ??_runRTC:	
  9198  0077                     ??_checkIsYearLeap:	
  9199                           ; 1 bytes @ 0x7
  9200                           
  9201                           
  9202                           ; 1 bytes @ 0x7
  9203  0077                     	ds	1
  9204  0078                     updateLed@i:	
  9205                           
  9206                           ; 1 bytes @ 0x8
  9207  0078                     	ds	1
  9208  0079                     ??_TMR2_UserInterruptHandler:	
  9209  0079                     ??_INTERRUPT_InterruptManager:	
  9210                           ; 1 bytes @ 0x9
  9211                           
  9212                           
  9213                           	psect	cstackBANK0
  9214  0020                     __pcstackBANK0:	
  9215                           ; 1 bytes @ 0x9
  9216                           
  9217  0020                     ??_eusartSendByte:	
  9218  0020                     ??_PIN_MANAGER_Initialize:	
  9219                           ; 1 bytes @ 0x0
  9220                           
  9221  0020                     ??_PWM1_Initialize:	
  9222                           ; 1 bytes @ 0x0
  9223                           
  9224  0020                     ??_PWM2_Initialize:	
  9225                           ; 1 bytes @ 0x0
  9226                           
  9227  0020                     ??_PWM3_Initialize:	
  9228                           ; 1 bytes @ 0x0
  9229                           
  9230  0020                     ??_PWM4_Initialize:	
  9231                           ; 1 bytes @ 0x0
  9232                           
  9233  0020                     ??_PWM5_Initialize:	
  9234                           ; 1 bytes @ 0x0
  9235                           
  9236  0020                     ??_TMR2_Initialize:	
  9237                           ; 1 bytes @ 0x0
  9238                           
  9239  0020                     ??_TMR0_Initialize:	
  9240                           ; 1 bytes @ 0x0
  9241                           
  9242  0020                     ??_EUSART_Initialize:	
  9243                           ; 1 bytes @ 0x0
  9244                           
  9245  0020                     ?_PWM1_LoadDutyValue:	
  9246                           ; 1 bytes @ 0x0
  9247                           
  9248  0020                     ?_PWM2_LoadDutyValue:	
  9249                           ; 1 bytes @ 0x0
  9250                           
  9251  0020                     ?_PWM3_LoadDutyValue:	
  9252                           ; 1 bytes @ 0x0
  9253                           
  9254  0020                     ?_PWM4_LoadDutyValue:	
  9255                           ; 1 bytes @ 0x0
  9256                           
  9257  0020                     ?_PWM5_LoadDutyValue:	
  9258                           ; 1 bytes @ 0x0
  9259                           
  9260  0020                     ??_initRTC:	
  9261                           ; 1 bytes @ 0x0
  9262                           
  9263  0020                     ??_TMR0_StartTimer:	
  9264                           ; 1 bytes @ 0x0
  9265                           
  9266  0020                     ??_TMR2_StartTimer:	
  9267                           ; 1 bytes @ 0x0
  9268                           
  9269  0020                     ??_OSCILLATOR_Initialize:	
  9270                           ; 1 bytes @ 0x0
  9271                           
  9272  0020                     ?_DATAEE_WriteByte:	
  9273                           ; 1 bytes @ 0x0
  9274                           
  9275  0020                     ?_DATAEE_ReadByte:	
  9276                           ; 1 bytes @ 0x0
  9277                           
  9278  0020                     ?___bmul:	
  9279                           ; 1 bytes @ 0x0
  9280                           
  9281  0020                     ?___wmul:	
  9282                           ; 1 bytes @ 0x0
  9283                           
  9284  0020                     eusartSendByte@byte:	
  9285                           ; 2 bytes @ 0x0
  9286                           
  9287  0020                     PIN_MANAGER_Initialize@state:	
  9288                           ; 1 bytes @ 0x0
  9289                           
  9290  0020                     ___bmul@multiplicand:	
  9291                           ; 1 bytes @ 0x0
  9292                           
  9293  0020                     DATAEE_WriteByte@bAdd:	
  9294                           ; 1 bytes @ 0x0
  9295                           
  9296  0020                     DATAEE_ReadByte@bAdd:	
  9297                           ; 2 bytes @ 0x0
  9298                           
  9299  0020                     PWM1_LoadDutyValue@dutyValue:	
  9300                           ; 2 bytes @ 0x0
  9301                           
  9302  0020                     PWM2_LoadDutyValue@dutyValue:	
  9303                           ; 2 bytes @ 0x0
  9304                           
  9305  0020                     PWM3_LoadDutyValue@dutyValue:	
  9306                           ; 2 bytes @ 0x0
  9307                           
  9308  0020                     PWM4_LoadDutyValue@dutyValue:	
  9309                           ; 2 bytes @ 0x0
  9310                           
  9311  0020                     PWM5_LoadDutyValue@dutyValue:	
  9312                           ; 2 bytes @ 0x0
  9313                           
  9314  0020                     ___wmul@multiplier:	
  9315                           ; 2 bytes @ 0x0
  9316                           
  9317                           
  9318                           ; 2 bytes @ 0x0
  9319  0020                     	ds	1
  9320  0021                     ?_eusartSendBuffer:	
  9321  0021                     ??_SYSTEM_Initialize:	
  9322                           ; 1 bytes @ 0x1
  9323                           
  9324  0021                     ??___bmul:	
  9325                           ; 1 bytes @ 0x1
  9326                           
  9327  0021                     ___bmul@product:	
  9328                           ; 1 bytes @ 0x1
  9329                           
  9330  0021                     eusartSendBuffer@buf:	
  9331                           ; 1 bytes @ 0x1
  9332                           
  9333                           
  9334                           ; 2 bytes @ 0x1
  9335  0021                     	ds	1
  9336  0022                     ??_PWM1_LoadDutyValue:	
  9337  0022                     ??_PWM2_LoadDutyValue:	
  9338                           ; 1 bytes @ 0x2
  9339                           
  9340  0022                     ??_PWM3_LoadDutyValue:	
  9341                           ; 1 bytes @ 0x2
  9342                           
  9343  0022                     ??_PWM4_LoadDutyValue:	
  9344                           ; 1 bytes @ 0x2
  9345                           
  9346  0022                     ??_PWM5_LoadDutyValue:	
  9347                           ; 1 bytes @ 0x2
  9348                           
  9349  0022                     ??_DATAEE_ReadByte:	
  9350                           ; 1 bytes @ 0x2
  9351                           
  9352  0022                     ??_readByte:	
  9353                           ; 1 bytes @ 0x2
  9354                           
  9355  0022                     DATAEE_WriteByte@bData:	
  9356                           ; 1 bytes @ 0x2
  9357                           
  9358  0022                     readByte@addr:	
  9359                           ; 1 bytes @ 0x2
  9360                           
  9361  0022                     ___bmul@multiplier:	
  9362                           ; 1 bytes @ 0x2
  9363                           
  9364  0022                     ___wmul@multiplicand:	
  9365                           ; 1 bytes @ 0x2
  9366                           
  9367                           
  9368                           ; 2 bytes @ 0x2
  9369  0022                     	ds	1
  9370  0023                     ??_eusartSendBuffer:	
  9371  0023                     ?_getCRC:	
  9372                           ; 1 bytes @ 0x3
  9373                           
  9374  0023                     ?_bleSendData:	
  9375                           ; 1 bytes @ 0x3
  9376                           
  9377  0023                     ??_DATAEE_WriteByte:	
  9378                           ; 1 bytes @ 0x3
  9379                           
  9380  0023                     bleSendData@len:	
  9381                           ; 1 bytes @ 0x3
  9382                           
  9383  0023                     DATAEE_WriteByte@GIEBitValue:	
  9384                           ; 1 bytes @ 0x3
  9385                           
  9386  0023                     readByte@result:	
  9387                           ; 1 bytes @ 0x3
  9388                           
  9389  0023                     getCRC@pbuf:	
  9390                           ; 1 bytes @ 0x3
  9391                           
  9392                           
  9393                           ; 2 bytes @ 0x3
  9394  0023                     	ds	1
  9395  0024                     ?_bleSendCMD:	
  9396  0024                     ??_bleSendData:	
  9397                           ; 1 bytes @ 0x4
  9398                           
  9399  0024                     ?_writeByte:	
  9400                           ; 1 bytes @ 0x4
  9401                           
  9402  0024                     ??_turnMaxLed:	
  9403                           ; 1 bytes @ 0x4
  9404                           
  9405  0024                     ??_turnOffLed:	
  9406                           ; 1 bytes @ 0x4
  9407                           
  9408  0024                     ??_findDeviceFlash:	
  9409                           ; 1 bytes @ 0x4
  9410                           
  9411  0024                     ??___wmul:	
  9412                           ; 1 bytes @ 0x4
  9413                           
  9414  0024                     writeByte@byte:	
  9415                           ; 1 bytes @ 0x4
  9416                           
  9417  0024                     bleSendCMD@pBuf:	
  9418                           ; 1 bytes @ 0x4
  9419                           
  9420  0024                     ___wmul@product:	
  9421                           ; 2 bytes @ 0x4
  9422                           
  9423                           
  9424                           ; 2 bytes @ 0x4
  9425  0024                     	ds	1
  9426  0025                     ??_writeByte:	
  9427  0025                     getCRC@len:	
  9428                           ; 1 bytes @ 0x5
  9429                           
  9430  0025                     bleSendData@frame:	
  9431                           ; 1 bytes @ 0x5
  9432                           
  9433  0025                     writeByte@addr:	
  9434                           ; 1 bytes @ 0x5
  9435                           
  9436                           
  9437                           ; 1 bytes @ 0x5
  9438  0025                     	ds	1
  9439  0026                     ??_updatePara:	
  9440  0026                     ??_getCRC:	
  9441                           ; 1 bytes @ 0x6
  9442                           
  9443  0026                     ??_bleSendCMD:	
  9444                           ; 1 bytes @ 0x6
  9445                           
  9446  0026                     ?_isValidTimer:	
  9447                           ; 1 bytes @ 0x6
  9448                           
  9449  0026                     ??_initBLE:	
  9450                           ; 1 bytes @ 0x6
  9451                           
  9452  0026                     ?_writeBuffer:	
  9453                           ; 1 bytes @ 0x6
  9454                           
  9455  0026                     ?_readBuffer:	
  9456                           ; 1 bytes @ 0x6
  9457                           
  9458  0026                     writeBuffer@buf:	
  9459                           ; 1 bytes @ 0x6
  9460                           
  9461  0026                     readBuffer@buf:	
  9462                           ; 1 bytes @ 0x6
  9463                           
  9464  0026                     isValidTimer@para:	
  9465                           ; 2 bytes @ 0x6
  9466                           
  9467                           
  9468                           ; 10 bytes @ 0x6
  9469  0026                     	ds	1
  9470  0027                     writeBuffer@len:	
  9471                           
  9472                           ; 1 bytes @ 0x7
  9473  0027                     	ds	1
  9474  0028                     ??_writeBuffer:	
  9475  0028                     getCRC@result:	
  9476                           ; 1 bytes @ 0x8
  9477                           
  9478  0028                     readBuffer@len:	
  9479                           ; 1 bytes @ 0x8
  9480                           
  9481  0028                     updatePara@i:	
  9482                           ; 1 bytes @ 0x8
  9483                           
  9484                           
  9485                           ; 1 bytes @ 0x8
  9486  0028                     	ds	1
  9487  0029                     ??_readBuffer:	
  9488  0029                     getCRC@i:	
  9489                           ; 1 bytes @ 0x9
  9490                           
  9491  0029                     writeBuffer@addr:	
  9492                           ; 1 bytes @ 0x9
  9493                           
  9494                           
  9495                           ; 1 bytes @ 0x9
  9496  0029                     	ds	1
  9497  002A                     ??_bleSendManualData:	
  9498  002A                     ??_bleSendDeviceTime:	
  9499                           ; 1 bytes @ 0xA
  9500                           
  9501  002A                     bleSendManualData@i:	
  9502                           ; 1 bytes @ 0xA
  9503                           
  9504  002A                     bleSendDeviceTime@len:	
  9505                           ; 1 bytes @ 0xA
  9506                           
  9507  002A                     writeBuffer@i:	
  9508                           ; 1 bytes @ 0xA
  9509                           
  9510                           
  9511                           ; 1 bytes @ 0xA
  9512  002A                     	ds	1
  9513  002B                     ?_writeManualPara:	
  9514  002B                     ?_writeTimerPara:	
  9515                           ; 1 bytes @ 0xB
  9516                           
  9517  002B                     bleSendDeviceTime@i:	
  9518                           ; 1 bytes @ 0xB
  9519                           
  9520  002B                     writeTimerPara@idx:	
  9521                           ; 1 bytes @ 0xB
  9522                           
  9523  002B                     writeManualPara@para:	
  9524                           ; 1 bytes @ 0xB
  9525                           
  9526                           
  9527                           ; 7 bytes @ 0xB
  9528  002B                     	ds	1
  9529  002C                     writeTimerPara@para:	
  9530                           
  9531                           ; 10 bytes @ 0xC
  9532  002C                     	ds	2
  9533  002E                     readBuffer@addr:	
  9534                           
  9535                           ; 1 bytes @ 0xE
  9536  002E                     	ds	1
  9537  002F                     readBuffer@i:	
  9538                           
  9539                           ; 1 bytes @ 0xF
  9540  002F                     	ds	1
  9541  0030                     ??_isValidTimer:	
  9542  0030                     ??_bleSendTimerData:	
  9543                           ; 1 bytes @ 0x10
  9544                           
  9545  0030                     ??_readLedPara:	
  9546                           ; 1 bytes @ 0x10
  9547                           
  9548  0030                     ??_autoRun:	
  9549                           ; 1 bytes @ 0x10
  9550                           
  9551                           
  9552                           ; 1 bytes @ 0x10
  9553  0030                     	ds	2
  9554  0032                     ??_writeManualPara:	
  9555  0032                     writeManualPara@addr:	
  9556                           ; 1 bytes @ 0x12
  9557                           
  9558                           
  9559                           ; 1 bytes @ 0x12
  9560  0032                     	ds	1
  9561  0033                     autoRun@hour:	
  9562                           
  9563                           ; 1 bytes @ 0x13
  9564  0033                     	ds	1
  9565  0034                     readLedPara@i:	
  9566  0034                     autoRun@min:	
  9567                           ; 1 bytes @ 0x14
  9568                           
  9569                           
  9570                           ; 1 bytes @ 0x14
  9571  0034                     	ds	1
  9572  0035                     ??_initLedPara:	
  9573  0035                     autoRun@i:	
  9574                           ; 1 bytes @ 0x15
  9575                           
  9576                           
  9577                           ; 1 bytes @ 0x15
  9578  0035                     	ds	1
  9579  0036                     ??_writeTimerPara:	
  9580  0036                     writeTimerPara@addr:	
  9581                           ; 1 bytes @ 0x16
  9582                           
  9583                           
  9584                           ; 1 bytes @ 0x16
  9585  0036                     	ds	1
  9586  0037                     ??_saveLedPara:	
  9587  0037                     bleSendTimerData@i:	
  9588                           ; 1 bytes @ 0x17
  9589                           
  9590  0037                     initLedPara@i:	
  9591                           ; 1 bytes @ 0x17
  9592                           
  9593                           
  9594                           ; 1 bytes @ 0x17
  9595  0037                     	ds	1
  9596  0038                     ??_initLed:	
  9597  0038                     bleSendTimerData@j:	
  9598                           ; 1 bytes @ 0x18
  9599                           
  9600  0038                     saveLedPara@i:	
  9601                           ; 1 bytes @ 0x18
  9602                           
  9603                           
  9604                           ; 1 bytes @ 0x18
  9605  0038                     	ds	1
  9606  0039                     bleSendTimerData@len:	
  9607                           
  9608                           ; 1 bytes @ 0x19
  9609  0039                     	ds	1
  9610  003A                     ??_DecodeDATA:	
  9611                           
  9612                           ; 1 bytes @ 0x1A
  9613  003A                     	ds	10
  9614  0044                     DecodeDATA@i:	
  9615                           
  9616                           ; 1 bytes @ 0x24
  9617  0044                     	ds	1
  9618  0045                     DecodeDATA@j:	
  9619                           
  9620                           ; 1 bytes @ 0x25
  9621  0045                     	ds	1
  9622  0046                     DecodeDATA@len:	
  9623                           
  9624                           ; 1 bytes @ 0x26
  9625  0046                     	ds	1
  9626  0047                     ??_main:	
  9627                           
  9628                           ; 1 bytes @ 0x27
  9629  0047                     	ds	1
  9630                           
  9631                           	psect	intentry
  9632  0004                     __pintentry:	
  9633 ;; *************** function _INTERRUPT_InterruptManager *****************
  9634 ;; Defined at:
  9635 ;;		line 109 in file "src/comman.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;		None
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  1    wreg      void 
  9642 ;; Registers used:
  9643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 18/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;Total ram usage:        0 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    4
  9656 ;; This function calls:
  9657 ;;		_DecodeCMD
  9658 ;;		_EUSART_RCV_ISR
  9659 ;;		_TMR2_UserInterruptHandler
  9660 ;;		_runRTC
  9661 ;; This function is called by:
  9662 ;;		Interrupt level 1
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666  0004                     _INTERRUPT_InterruptManager:	
  9667                           
  9668                           ;incstack = 0
  9669  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9670                           
  9671                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9672  0005  3180               	pagesel	$
  9673                           
  9674                           ;comman.c: 112: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  9675  0006  1F0B               	btfss	11,6	;volatile
  9676  0007  2819               	goto	i1l225
  9677  0008  0021               	movlb	1	; select bank1
  9678  0009  1E91               	btfss	17,5	;volatile
  9679  000A  2819               	goto	i1l225
  9680  000B  0020               	movlb	0	; select bank0
  9681  000C  1E91               	btfss	17,5	;volatile
  9682  000D  2819               	goto	i1l225
  9683                           
  9684                           ;comman.c: 113: {
  9685                           ;comman.c: 114: EUSART_RCV_ISR();
  9686  000E  3187  278E  3180   	fcall	_EUSART_RCV_ISR
  9687                           
  9688                           ;comman.c: 115: if (!eusartRunPara.fMode)
  9689  0011  185F               	btfsc	_eusartRunPara,0	;volatile
  9690  0012  282F               	goto	i1l231
  9691                           
  9692                           ;comman.c: 116: {
  9693                           ;comman.c: 117: DecodeCMD();
  9694  0013  318E  268C  3180   	fcall	_DecodeCMD
  9695                           
  9696                           ;comman.c: 118: eusartRunPara.fRcving = 1;
  9697  0016  16DF               	bsf	_eusartRunPara,5	;volatile
  9698                           
  9699                           ;comman.c: 119: eusartRunPara.nRcvInterval = 0;
  9700  0017  01E4               	clrf	_eusartRunPara+5	;volatile
  9701  0018  282F               	goto	i1l231
  9702  0019                     i1l225:	
  9703                           
  9704                           ;comman.c: 123: else if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
  9705  0019  0021               	movlb	1	; select bank1
  9706  001A  1E90               	btfss	16,5	;volatile
  9707  001B  2824               	goto	i1l228
  9708  001C  0020               	movlb	0	; select bank0
  9709  001D  1E90               	btfss	16,5	;volatile
  9710  001E  2824               	goto	i1l228
  9711                           
  9712                           ;comman.c: 124: {
  9713                           ;comman.c: 125: PIR0bits.TMR0IF = 0;
  9714  001F  1290               	bcf	16,5	;volatile
  9715                           
  9716                           ;comman.c: 126: runRTC();
  9717  0020  318E  2605  3180   	fcall	_runRTC
  9718                           
  9719                           ;comman.c: 127: }
  9720  0023  282F               	goto	i1l231
  9721  0024                     i1l228:	
  9722                           
  9723                           ;comman.c: 128: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF 
      +                          == 1)
  9724  0024  1F0B               	btfss	11,6	;volatile
  9725  0025  282F               	goto	i1l231
  9726  0026  0021               	movlb	1	; select bank1
  9727  0027  1C91               	btfss	17,1	;volatile
  9728  0028  282F               	goto	i1l231
  9729  0029  0020               	movlb	0	; select bank0
  9730  002A  1C91               	btfss	17,1	;volatile
  9731  002B  282F               	goto	i1l231
  9732                           
  9733                           ;comman.c: 129: {
  9734                           ;comman.c: 130: PIR1bits.TMR2IF = 0;
  9735  002C  1091               	bcf	17,1	;volatile
  9736                           
  9737                           ;comman.c: 131: TMR2_UserInterruptHandler();
  9738  002D  318F  2727         	fcall	_TMR2_UserInterruptHandler
  9739  002F                     i1l231:	
  9740  002F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9741  0030  0009               	retfie
  9742  0031                     __end_of_INTERRUPT_InterruptManager:	
  9743                           
  9744                           	psect	text51
  9745  0E05                     __ptext51:	
  9746 ;; *************** function _runRTC *****************
  9747 ;; Defined at:
  9748 ;;		line 52 in file "src/rtc.c"
  9749 ;; Parameters:    Size  Location     Type
  9750 ;;		None
  9751 ;; Auto vars:     Size  Location     Type
  9752 ;;		None
  9753 ;; Return value:  Size  Location     Type
  9754 ;;                  1    wreg      void 
  9755 ;; Registers used:
  9756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9757 ;; Tracked objects:
  9758 ;;		On entry : 1F/0
  9759 ;;		On exit  : 1F/0
  9760 ;;		Unchanged: 0/0
  9761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;Total ram usage:        0 bytes
  9767 ;; Hardware stack levels used:    1
  9768 ;; Hardware stack levels required when called:    2
  9769 ;; This function calls:
  9770 ;;		_checkIsYearLeap
  9771 ;; This function is called by:
  9772 ;;		_INTERRUPT_InterruptManager
  9773 ;; This function uses a non-reentrant model
  9774 ;;
  9775                           
  9776                           
  9777                           ;psect for function _runRTC
  9778  0E05                     _runRTC:	
  9779                           
  9780                           ;rtc.c: 54: gCurrentTime.datetime.second++;
  9781                           
  9782                           ;incstack = 0
  9783                           ; Regs used in _runRTC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9784  0E05  0AEC               	incf	_gCurrentTime+6,f	;volatile
  9785                           
  9786                           ;rtc.c: 55: if (gCurrentTime.datetime.second >= 60)
  9787  0E06  303C               	movlw	60
  9788  0E07  026C               	subwf	_gCurrentTime+6,w	;volatile
  9789  0E08  1C03               	skipc
  9790  0E09  2E49               	goto	i1l3081
  9791                           
  9792                           ;rtc.c: 56: {
  9793                           ;rtc.c: 57: gCurrentTime.datetime.second = 0;
  9794  0E0A  01EC               	clrf	_gCurrentTime+6	;volatile
  9795                           
  9796                           ;rtc.c: 58: gCurrentTime.datetime.minute++;
  9797  0E0B  0AEB               	incf	_gCurrentTime+5,f	;volatile
  9798                           
  9799                           ;rtc.c: 59: if (gCurrentTime.datetime.minute >= 60)
  9800  0E0C  303C               	movlw	60
  9801  0E0D  026B               	subwf	_gCurrentTime+5,w	;volatile
  9802  0E0E  1C03               	skipc
  9803  0E0F  2E48               	goto	i1l3079
  9804                           
  9805                           ;rtc.c: 60: {
  9806                           ;rtc.c: 61: gCurrentTime.datetime.minute = 0;
  9807  0E10  01EB               	clrf	_gCurrentTime+5	;volatile
  9808                           
  9809                           ;rtc.c: 62: gCurrentTime.datetime.hour++;
  9810  0E11  0AEA               	incf	_gCurrentTime+4,f	;volatile
  9811                           
  9812                           ;rtc.c: 63: if (gCurrentTime.datetime.hour >= 24)
  9813  0E12  3018               	movlw	24
  9814  0E13  026A               	subwf	_gCurrentTime+4,w	;volatile
  9815  0E14  1C03               	skipc
  9816  0E15  2E48               	goto	i1l3079
  9817                           
  9818                           ;rtc.c: 64: {
  9819                           ;rtc.c: 65: gCurrentTime.datetime.hour = 0;
  9820  0E16  01EA               	clrf	_gCurrentTime+4	;volatile
  9821                           
  9822                           ;rtc.c: 66: gCurrentTime.datetime.day++;
  9823  0E17  0AE8               	incf	_gCurrentTime+2,f	;volatile
  9824                           
  9825                           ;rtc.c: 67: gCurrentTime.datetime.wk++;
  9826  0E18  0AE9               	incf	_gCurrentTime+3,f	;volatile
  9827                           
  9828                           ;rtc.c: 68: if (gCurrentTime.datetime.wk > 6)
  9829  0E19  3007               	movlw	7
  9830  0E1A  0269               	subwf	_gCurrentTime+3,w	;volatile
  9831  0E1B  1803               	btfsc	3,0
  9832                           
  9833                           ;rtc.c: 69: {
  9834                           ;rtc.c: 70: gCurrentTime.datetime.wk = 0;
  9835  0E1C  01E9               	clrf	_gCurrentTime+3	;volatile
  9836                           
  9837                           ;rtc.c: 71: }
  9838                           ;rtc.c: 72: if (checkIsYearLeap(gCurrentTime.datetime.year+2000))
  9839  0E1D  0866               	movf	_gCurrentTime,w	;volatile
  9840  0E1E  00F5               	movwf	checkIsYearLeap@year
  9841  0E1F  30D0               	movlw	208
  9842  0E20  01F6               	clrf	checkIsYearLeap@year+1
  9843  0E21  07F5               	addwf	checkIsYearLeap@year,f
  9844  0E22  3007               	movlw	7
  9845  0E23  3DF6               	addwfc	checkIsYearLeap@year+1,f
  9846  0E24  264B  318E         	fcall	_checkIsYearLeap
  9847  0E26  3A00               	xorlw	0
  9848  0E27  1903               	skipnz
  9849  0E28  2E2B               	goto	i1l3063
  9850                           
  9851                           ;rtc.c: 73: {
  9852                           ;rtc.c: 74: MONTH_DAY[1] = 29;
  9853  0E29  301D               	movlw	29
  9854  0E2A  2E2C               	goto	L2
  9855  0E2B                     i1l3063:	
  9856                           ;rtc.c: 75: }
  9857                           
  9858                           
  9859                           ;rtc.c: 76: else
  9860                           ;rtc.c: 77: {
  9861                           ;rtc.c: 78: MONTH_DAY[1] = 28;
  9862  0E2B  301C               	movlw	28
  9863  0E2C                     L2:	
  9864  0E2C  0021               	movlb	1	; select bank1
  9865  0E2D  00C8               	movwf	(_MONTH_DAY^(0+128)+1)
  9866                           
  9867                           ;rtc.c: 79: }
  9868                           ;rtc.c: 80: if (gCurrentTime.datetime.month <= 12 && gCurrentTime.datetime.month > 0)
  9869  0E2E  300D               	movlw	13
  9870  0E2F  0020               	movlb	0	; select bank0
  9871  0E30  0267               	subwf	_gCurrentTime+1,w	;volatile
  9872  0E31  1803               	skipnc
  9873  0E32  2E48               	goto	i1l3079
  9874  0E33  0867               	movf	_gCurrentTime+1,w	;volatile
  9875  0E34  1903               	btfsc	3,2
  9876  0E35  2E48               	goto	i1l3079
  9877                           
  9878                           ;rtc.c: 81: {
  9879                           ;rtc.c: 82: if (gCurrentTime.datetime.day > MONTH_DAY[gCurrentTime.datetime.month-1])
  9880  0E36  0867               	movf	_gCurrentTime+1,w	;volatile
  9881  0E37  3EC6               	addlw	(low ((_MONTH_DAY| 0+255)))& (0+255)
  9882  0E38  0086               	movwf	6
  9883  0E39  0187               	clrf	7
  9884  0E3A  0868               	movf	_gCurrentTime+2,w	;volatile
  9885  0E3B  0201               	subwf	1,w
  9886  0E3C  1803               	skipnc
  9887  0E3D  2E48               	goto	i1l3079
  9888                           
  9889                           ;rtc.c: 83: {
  9890                           ;rtc.c: 84: gCurrentTime.datetime.day = 1;
  9891  0E3E  3001               	movlw	1
  9892  0E3F  00E8               	movwf	_gCurrentTime+2	;volatile
  9893                           
  9894                           ;rtc.c: 85: gCurrentTime.datetime.month++;
  9895  0E40  0AE7               	incf	_gCurrentTime+1,f	;volatile
  9896                           
  9897                           ;rtc.c: 86: if (gCurrentTime.datetime.month > 12)
  9898  0E41  300D               	movlw	13
  9899  0E42  0267               	subwf	_gCurrentTime+1,w	;volatile
  9900  0E43  1C03               	skipc
  9901  0E44  2E48               	goto	i1l3079
  9902                           
  9903                           ;rtc.c: 87: {
  9904                           ;rtc.c: 88: gCurrentTime.datetime.month = 1;
  9905  0E45  3001               	movlw	1
  9906  0E46  00E7               	movwf	_gCurrentTime+1	;volatile
  9907                           
  9908                           ;rtc.c: 89: gCurrentTime.datetime.year++;
  9909  0E47  0AE6               	incf	_gCurrentTime,f	;volatile
  9910  0E48                     i1l3079:	
  9911                           
  9912                           ;rtc.c: 90: }
  9913                           ;rtc.c: 91: }
  9914                           ;rtc.c: 92: }
  9915                           ;rtc.c: 93: }
  9916                           ;rtc.c: 94: }
  9917                           ;rtc.c: 95: gLedRunPara.fMin = 1;
  9918  0E48  14C8               	bsf	_gLedRunPara,1	;volatile
  9919  0E49                     i1l3081:	
  9920                           
  9921                           ;rtc.c: 96: }
  9922                           ;rtc.c: 97: gLedRunPara.fSec = 1;
  9923  0E49  1448               	bsf	_gLedRunPara,0	;volatile
  9924  0E4A  0008               	return
  9925  0E4B                     __end_of_runRTC:	
  9926  0E4B                     __ptext52:	
  9927 ;; *************** function _checkIsYearLeap *****************
  9928 ;; Defined at:
  9929 ;;		line 16 in file "src/rtc.c"
  9930 ;; Parameters:    Size  Location     Type
  9931 ;;  year            2    5[COMMON] unsigned int 
  9932 ;; Auto vars:     Size  Location     Type
  9933 ;;		None
  9934 ;; Return value:  Size  Location     Type
  9935 ;;                  1    wreg      unsigned char 
  9936 ;; Registers used:
  9937 ;;		wreg, status,2, status,0, pclath, cstack
  9938 ;; Tracked objects:
  9939 ;;		On entry : 1F/0
  9940 ;;		On exit  : 0/0
  9941 ;;		Unchanged: 0/0
  9942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9943 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;Total ram usage:        2 bytes
  9948 ;; Hardware stack levels used:    1
  9949 ;; Hardware stack levels required when called:    1
  9950 ;; This function calls:
  9951 ;;		___lwmod
  9952 ;; This function is called by:
  9953 ;;		_runRTC
  9954 ;; This function uses a non-reentrant model
  9955 ;;
  9956                           
  9957                           
  9958                           ;psect for function _checkIsYearLeap
  9959  0E4B                     _checkIsYearLeap:	
  9960                           
  9961                           ;rtc.c: 18: if (year&0x03)
  9962                           
  9963                           ;incstack = 0
  9964                           ; Regs used in _checkIsYearLeap: [wreg+status,2+status,0+pclath+cstack]
  9965  0E4B  0875               	movf	checkIsYearLeap@year,w
  9966  0E4C  3903               	andlw	3
  9967  0E4D  1903               	btfsc	3,2
  9968  0E4E  3400               	retlw	0
  9969                           
  9970                           ;rtc.c: 19: {
  9971                           ;rtc.c: 20: if (year%100 == 0)
  9972  0E4F  3064               	movlw	100
  9973  0E50  00F0               	movwf	___lwmod@divisor
  9974  0E51  01F1               	clrf	___lwmod@divisor+1
  9975  0E52  2687  318E         	fcall	PL46	;call to abstracted procedure
  9976  0E54  2667  318E         	fcall	___lwmod
  9977  0E56  0870               	movf	?___lwmod,w
  9978  0E57  0471               	iorwf	?___lwmod+1,w
  9979  0E58  1D03               	btfss	3,2
  9980  0E59  3401               	retlw	1
  9981                           
  9982                           ;rtc.c: 21: {
  9983                           ;rtc.c: 22: if (year%400 == 0)
  9984  0E5A  3090               	movlw	144
  9985  0E5B  00F0               	movwf	___lwmod@divisor
  9986  0E5C  3001               	movlw	1
  9987  0E5D  00F1               	movwf	___lwmod@divisor+1
  9988  0E5E  2687  318E         	fcall	PL46	;call to abstracted procedure
  9989  0E60  2667  318E         	fcall	___lwmod
  9990  0E62  0870               	movf	?___lwmod,w
  9991  0E63  0471               	iorwf	?___lwmod+1,w
  9992  0E64  1903               	btfsc	3,2
  9993                           
  9994                           ;rtc.c: 23: {
  9995                           ;rtc.c: 24: return 1;
  9996  0E65  3401               	retlw	1
  9997                           
  9998                           ;rtc.c: 30: }
  9999                           ;rtc.c: 31: }
 10000                           ;rtc.c: 32: return 0;
 10001  0E66  3400               	retlw	0
 10002  0E67                     __end_of_checkIsYearLeap:	
 10003  0E67                     __ptext53:	
 10004 ;; *************** function ___lwmod *****************
 10005 ;; Defined at:
 10006 ;;		line 6 in file "/Applications/microchip/xc8/v1.40/sources/common/lwmod.c"
 10007 ;; Parameters:    Size  Location     Type
 10008 ;;  divisor         2    0[COMMON] unsigned int 
 10009 ;;  dividend        2    2[COMMON] unsigned int 
 10010 ;; Auto vars:     Size  Location     Type
 10011 ;;  counter         1    4[COMMON] unsigned char 
 10012 ;; Return value:  Size  Location     Type
 10013 ;;                  2    0[COMMON] unsigned int 
 10014 ;; Registers used:
 10015 ;;		wreg, status,2, status,0
 10016 ;; Tracked objects:
 10017 ;;		On entry : 0/0
 10018 ;;		On exit  : 0/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10021 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;Total ram usage:        5 bytes
 10026 ;; Hardware stack levels used:    1
 10027 ;; This function calls:
 10028 ;;		Nothing
 10029 ;; This function is called by:
 10030 ;;		_checkIsYearLeap
 10031 ;; This function uses a non-reentrant model
 10032 ;;
 10033                           
 10034                           
 10035                           ;psect for function ___lwmod
 10036  0E67                     ___lwmod:	
 10037                           
 10038                           ;incstack = 0
 10039                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 10040  0E67  0870               	movf	___lwmod@divisor,w
 10041  0E68  0471               	iorwf	___lwmod@divisor+1,w
 10042  0E69  1903               	btfsc	3,2
 10043  0E6A  2E82               	goto	i1l2485
 10044  0E6B  01F4               	clrf	___lwmod@counter
 10045  0E6C                     L3:	
 10046  0E6C  0AF4               	incf	___lwmod@counter,f
 10047  0E6D  1BF1               	btfsc	___lwmod@divisor+1,7
 10048  0E6E  2E72               	goto	i1l2477
 10049  0E6F  35F0               	lslf	___lwmod@divisor,f
 10050  0E70  0DF1               	rlf	___lwmod@divisor+1,f
 10051  0E71  2E6C               	goto	L3
 10052  0E72                     i1l2477:	
 10053  0E72  0871               	movf	___lwmod@divisor+1,w
 10054  0E73  0273               	subwf	___lwmod@dividend+1,w
 10055  0E74  1D03               	skipz
 10056  0E75  2E78               	goto	u192_25
 10057  0E76  0870               	movf	___lwmod@divisor,w
 10058  0E77  0272               	subwf	___lwmod@dividend,w
 10059  0E78                     u192_25:	
 10060  0E78  1C03               	skipc
 10061  0E79  2E7E               	goto	i1l2481
 10062  0E7A  0870               	movf	___lwmod@divisor,w
 10063  0E7B  02F2               	subwf	___lwmod@dividend,f
 10064  0E7C  0871               	movf	___lwmod@divisor+1,w
 10065  0E7D  3BF3               	subwfb	___lwmod@dividend+1,f
 10066  0E7E                     i1l2481:	
 10067  0E7E  36F1               	lsrf	___lwmod@divisor+1,f
 10068  0E7F  0CF0               	rrf	___lwmod@divisor,f
 10069  0E80  0BF4               	decfsz	___lwmod@counter,f
 10070  0E81  2E72               	goto	i1l2477
 10071  0E82                     i1l2485:	
 10072  0E82  0873               	movf	___lwmod@dividend+1,w
 10073  0E83  00F1               	movwf	?___lwmod+1
 10074  0E84  0872               	movf	___lwmod@dividend,w
 10075  0E85  00F0               	movwf	?___lwmod
 10076  0E86  0008               	return
 10077  0E87                     __end_of___lwmod:	
 10078  0E87                     PL46:	
 10079  0E87  0876               	movf	checkIsYearLeap@year+1,w
 10080  0E88  00F3               	movwf	___lwmod@dividend+1
 10081  0E89  0875               	movf	checkIsYearLeap@year,w
 10082  0E8A  00F2               	movwf	___lwmod@dividend
 10083  0E8B  0008               	return
 10084  0E8C                     __end_ofPL46:	
 10085                           
 10086                           	psect	text54
 10087  0F27                     __ptext54:	
 10088 ;; *************** function _TMR2_UserInterruptHandler *****************
 10089 ;; Defined at:
 10090 ;;		line 73 in file "src/comman.c"
 10091 ;; Parameters:    Size  Location     Type
 10092 ;;		None
 10093 ;; Auto vars:     Size  Location     Type
 10094 ;;		None
 10095 ;; Return value:  Size  Location     Type
 10096 ;;                  1    wreg      void 
 10097 ;; Registers used:
 10098 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10099 ;; Tracked objects:
 10100 ;;		On entry : 1F/0
 10101 ;;		On exit  : 19/0
 10102 ;;		Unchanged: 0/0
 10103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;Total ram usage:        0 bytes
 10109 ;; Hardware stack levels used:    1
 10110 ;; Hardware stack levels required when called:    3
 10111 ;; This function calls:
 10112 ;;		_updateLed
 10113 ;; This function is called by:
 10114 ;;		_INTERRUPT_InterruptManager
 10115 ;; This function uses a non-reentrant model
 10116 ;;
 10117                           
 10118                           
 10119                           ;psect for function _TMR2_UserInterruptHandler
 10120  0F27                     _TMR2_UserInterruptHandler:	
 10121                           
 10122                           ;comman.c: 77: if(eusartRunPara.fWaitForAck)
 10123                           
 10124                           ;incstack = 0
 10125                           ; Regs used in _TMR2_UserInterruptHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10126  0F27  18DF               	btfsc	_eusartRunPara,1	;volatile
 10127                           
 10128                           ;comman.c: 78: {
 10129                           ;comman.c: 79: eusartRunPara.nOverTime ++;
 10130  0F28  0AE0               	incf	_eusartRunPara+1,f	;volatile
 10131                           
 10132                           ;comman.c: 80: }
 10133                           ;comman.c: 81: if(eusartRunPara.fRcving)
 10134  0F29  1EDF               	btfss	_eusartRunPara,5	;volatile
 10135  0F2A  2F33               	goto	i1l3021
 10136                           
 10137                           ;comman.c: 82: {
 10138                           ;comman.c: 83: eusartRunPara.nRcvInterval ++;
 10139  0F2B  0AE4               	incf	_eusartRunPara+5,f	;volatile
 10140                           
 10141                           ;comman.c: 84: if(eusartRunPara.nRcvInterval > 15)
 10142  0F2C  3010               	movlw	16
 10143  0F2D  0264               	subwf	_eusartRunPara+5,w	;volatile
 10144  0F2E  1C03               	skipc
 10145  0F2F  2F33               	goto	i1l3021
 10146                           
 10147                           ;comman.c: 85: {
 10148                           ;comman.c: 86: eusartRunPara.fRcving = 0;
 10149  0F30  12DF               	bcf	_eusartRunPara,5	;volatile
 10150                           
 10151                           ;comman.c: 87: eusartRunPara.nRcvState = 0;
 10152  0F31  01E5               	clrf	_eusartRunPara+6	;volatile
 10153                           
 10154                           ;comman.c: 88: eusartRunPara.nRcvIdx = 0;
 10155  0F32  01E3               	clrf	_eusartRunPara+4	;volatile
 10156  0F33                     i1l3021:	
 10157                           
 10158                           ;comman.c: 89: }
 10159                           ;comman.c: 90: }
 10160                           ;comman.c: 103: if (!gLedRunPara.find)
 10161  0F33  19C8               	btfsc	_gLedRunPara,3	;volatile
 10162  0F34  0008               	return
 10163                           
 10164                           ;comman.c: 104: {
 10165                           ;comman.c: 105: updateLed();
 10166  0F35  2F36               	ljmp	i1l2747
 10167  0F36                     __end_of_TMR2_UserInterruptHandler:	
 10168  0F36                     __ptext55:	
 10169 ;; *************** function _updateLed *****************
 10170 ;; Defined at:
 10171 ;;		line 49 in file "src/led.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;		None
 10174 ;; Auto vars:     Size  Location     Type
 10175 ;;  i               1    8[COMMON] unsigned char 
 10176 ;; Return value:  Size  Location     Type
 10177 ;;                  1    wreg      void 
 10178 ;; Registers used:
 10179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10180 ;; Tracked objects:
 10181 ;;		On entry : 1F/0
 10182 ;;		On exit  : 1F/6
 10183 ;;		Unchanged: 0/0
 10184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10186 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10188 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10189 ;;Total ram usage:        7 bytes
 10190 ;; Hardware stack levels used:    1
 10191 ;; Hardware stack levels required when called:    2
 10192 ;; This function calls:
 10193 ;;		_updatePWM
 10194 ;; This function is called by:
 10195 ;;		_TMR2_UserInterruptHandler
 10196 ;; This function uses a non-reentrant model
 10197 ;;
 10198                           
 10199                           
 10200                           ;psect for function _updateLed
 10201  0F36                     _updateLed:	
 10202  0F36                     i1l2747:	
 10203                           ;incstack = 0
 10204                           ; Regs used in _updateLed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10205                           
 10206                           
 10207                           ;led.c: 51: for (unsigned char i = 0; i < 5; i++)
 10208  0F36  01F8               	clrf	updateLed@i
 10209  0F37                     i1l2753:	
 10210                           
 10211                           ;led.c: 52: {
 10212                           ;led.c: 53: if (gLedRunPara.nCurrentBrt[i] == gLedRunPara.nTargetBrt[i])
 10213  0F37  27DA  318F         	fcall	PL12	;call to abstracted procedure
 10214  0F39  3F40               	moviw [0]fsr1
 10215  0F3A  00F4               	movwf	??_updateLed+2
 10216  0F3B  3F41               	moviw [1]fsr1
 10217  0F3C  00F5               	movwf	??_updateLed+3
 10218  0F3D  0673               	xorwf	??_updateLed+1,w
 10219  0F3E  1D03               	skipz
 10220  0F3F  2F42               	goto	u211_25
 10221  0F40  0872               	movf	??_updateLed,w
 10222  0F41  0674               	xorwf	??_updateLed+2,w
 10223  0F42                     u211_25:	
 10224  0F42  1903               	btfsc	3,2
 10225  0F43  2F74               	goto	i1l2769
 10226                           
 10227                           ;led.c: 57: else
 10228                           ;led.c: 58: {
 10229                           ;led.c: 59: if (gLedRunPara.nCurrentBrt[i] + 4 < gLedRunPara.nTargetBrt[i])
 10230  0F44  27DA  318F         	fcall	PL12	;call to abstracted procedure
 10231  0F46  27C9  318F         	fcall	PL10	;call to abstracted procedure
 10232  0F48  1803               	skipnc
 10233  0F49  2F51               	goto	i1l2763
 10234                           
 10235                           ;led.c: 60: {
 10236                           ;led.c: 61: gLedRunPara.nCurrentBrt[i] += 4;
 10237  0F4A  27FA  318F         	fcall	PL44	;call to abstracted procedure
 10238  0F4C  0781               	addwf	1,f
 10239  0F4D  3141               	addfsr 1,1
 10240  0F4E  1803               	skipnc
 10241  0F4F  0A81               	incf	1,f
 10242                           
 10243                           ;led.c: 62: }
 10244  0F50  2F74               	goto	i1l2769
 10245  0F51                     i1l2763:	
 10246                           
 10247                           ;led.c: 63: else if(gLedRunPara.nTargetBrt[i] + 4 < gLedRunPara.nCurrentBrt[i])
 10248  0F51  3578               	lslf	updateLed@i,w
 10249  0F52  3E55               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 10250  0F53  0086               	movwf	6
 10251  0F54  0187               	clrf	7
 10252  0F55  3F40               	moviw [0]fsr1
 10253  0F56  00F2               	movwf	??_updateLed
 10254  0F57  3F41               	moviw [1]fsr1
 10255  0F58  00F3               	movwf	??_updateLed+1
 10256  0F59  3578               	lslf	updateLed@i,w
 10257  0F5A  3E4B               	addlw	(low ((_gLedRunPara| 0+3)))& (0+255)
 10258  0F5B  0086               	movwf	6
 10259  0F5C  27C9  318F         	fcall	PL10	;call to abstracted procedure
 10260  0F5E  1803               	skipnc
 10261  0F5F  2F68               	goto	i1l2767
 10262                           
 10263                           ;led.c: 64: {
 10264                           ;led.c: 65: gLedRunPara.nCurrentBrt[i] -= 4;
 10265  0F60  27FA  318F         	fcall	PL44	;call to abstracted procedure
 10266  0F62  0281               	subwf	1,f
 10267  0F63  3000               	movlw	0
 10268  0F64  3141               	addfsr 1,1
 10269  0F65  3B81               	subwfb	1,f
 10270  0F66  317F               	addfsr 1,-1
 10271                           
 10272                           ;led.c: 66: }
 10273  0F67  2F74               	goto	i1l2769
 10274  0F68                     i1l2767:	
 10275                           
 10276                           ;led.c: 67: else
 10277                           ;led.c: 68: {
 10278                           ;led.c: 69: gLedRunPara.nCurrentBrt[i] = gLedRunPara.nTargetBrt[i];
 10279  0F68  3578               	lslf	updateLed@i,w
 10280  0F69  3E4B               	addlw	(low ((_gLedRunPara| 0+3)))& (0+255)
 10281  0F6A  0086               	movwf	6
 10282  0F6B  0187               	clrf	7
 10283  0F6C  3578               	lslf	updateLed@i,w
 10284  0F6D  3E55               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 10285  0F6E  0084               	movwf	4
 10286  0F6F  0185               	clrf	5
 10287  0F70  3F40               	moviw [0]fsr1
 10288  0F71  3F80               	movwi [0]fsr0
 10289  0F72  3F41               	moviw [1]fsr1
 10290  0F73  3F81               	movwi [1]fsr0
 10291  0F74                     i1l2769:	
 10292  0F74  3005               	movlw	5
 10293  0F75  0AF8               	incf	updateLed@i,f
 10294  0F76  0278               	subwf	updateLed@i,w
 10295  0F77  1C03               	skipc
 10296  0F78  2F37               	goto	i1l2753
 10297                           
 10298                           ;led.c: 70: }
 10299                           ;led.c: 71: }
 10300                           ;led.c: 72: }
 10301                           ;led.c: 73: updatePWM();
 10302  0F79  2F7A               	ljmp	i1l2419
 10303  0F7A                     __end_of_updateLed:	
 10304  0F7A                     __ptext56:	
 10305 ;; *************** function _updatePWM *****************
 10306 ;; Defined at:
 10307 ;;		line 41 in file "src/led.c"
 10308 ;; Parameters:    Size  Location     Type
 10309 ;;		None
 10310 ;; Auto vars:     Size  Location     Type
 10311 ;;		None
 10312 ;; Return value:  Size  Location     Type
 10313 ;;                  1    wreg      void 
 10314 ;; Registers used:
 10315 ;;		wreg, status,2, status,0, pclath, cstack
 10316 ;; Tracked objects:
 10317 ;;		On entry : 1F/0
 10318 ;;		On exit  : 1F/6
 10319 ;;		Unchanged: 0/0
 10320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;Total ram usage:        0 bytes
 10326 ;; Hardware stack levels used:    1
 10327 ;; Hardware stack levels required when called:    1
 10328 ;; This function calls:
 10329 ;;		i1_PWM1_LoadDutyValue
 10330 ;;		i1_PWM2_LoadDutyValue
 10331 ;;		i1_PWM3_LoadDutyValue
 10332 ;;		i1_PWM4_LoadDutyValue
 10333 ;; This function is called by:
 10334 ;;		_updateLed
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           
 10339                           ;psect for function _updatePWM
 10340  0F7A                     _updatePWM:	
 10341  0F7A                     i1l2419:	
 10342                           ;incstack = 0
 10343                           ; Regs used in _updatePWM: [wreg+status,2+status,0+pclath+cstack]
 10344                           
 10345                           
 10346                           ;led.c: 43: PWM1_LoadDutyValue( gLedRunPara.nCurrentBrt[0] );
 10347  0F7A  0856               	movf	_gLedRunPara+14,w	;volatile
 10348  0F7B  00F1               	movwf	i1PWM1_LoadDutyValue@dutyValue+1
 10349  0F7C  0855               	movf	_gLedRunPara+13,w	;volatile
 10350  0F7D  00F0               	movwf	i1PWM1_LoadDutyValue@dutyValue
 10351  0F7E  2795  318F         	fcall	i1_PWM1_LoadDutyValue
 10352                           
 10353                           ;led.c: 44: PWM2_LoadDutyValue( gLedRunPara.nCurrentBrt[1] );
 10354  0F80  0020               	movlb	0	; select bank0
 10355  0F81  0858               	movf	_gLedRunPara+16,w	;volatile
 10356  0F82  00F1               	movwf	i1PWM2_LoadDutyValue@dutyValue+1
 10357  0F83  0857               	movf	_gLedRunPara+15,w	;volatile
 10358  0F84  00F0               	movwf	i1PWM2_LoadDutyValue@dutyValue
 10359  0F85  27A2  318F         	fcall	i1_PWM2_LoadDutyValue
 10360                           
 10361                           ;led.c: 45: PWM3_LoadDutyValue( gLedRunPara.nCurrentBrt[2] );
 10362  0F87  0020               	movlb	0	; select bank0
 10363  0F88  085A               	movf	_gLedRunPara+18,w	;volatile
 10364  0F89  00F1               	movwf	i1PWM3_LoadDutyValue@dutyValue+1
 10365  0F8A  0859               	movf	_gLedRunPara+17,w	;volatile
 10366  0F8B  00F0               	movwf	i1PWM3_LoadDutyValue@dutyValue
 10367  0F8C  27AF  318F         	fcall	i1_PWM3_LoadDutyValue
 10368                           
 10369                           ;led.c: 46: PWM4_LoadDutyValue( gLedRunPara.nCurrentBrt[3] );
 10370  0F8E  0020               	movlb	0	; select bank0
 10371  0F8F  085C               	movf	_gLedRunPara+20,w	;volatile
 10372  0F90  00F1               	movwf	i1PWM4_LoadDutyValue@dutyValue+1
 10373  0F91  085B               	movf	_gLedRunPara+19,w	;volatile
 10374  0F92  00F0               	movwf	i1PWM4_LoadDutyValue@dutyValue
 10375  0F93  27BC               	fcall	i1_PWM4_LoadDutyValue
 10376  0F94  0008               	return
 10377  0F95                     __end_of_updatePWM:	
 10378  0F95                     __ptext60:	
 10379 ;; *************** function i1_PWM1_LoadDutyValue *****************
 10380 ;; Defined at:
 10381 ;;		line 21 in file "src/pwm.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;  dutyValue       2    0[COMMON] unsigned int 
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;		None
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      void 
 10388 ;; Registers used:
 10389 ;;		wreg
 10390 ;; Tracked objects:
 10391 ;;		On entry : 1F/0
 10392 ;;		On exit  : 1F/5
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10395 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;Total ram usage:        2 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; This function calls:
 10402 ;;		Nothing
 10403 ;; This function is called by:
 10404 ;;		_updatePWM
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           
 10409                           ;psect for function i1_PWM1_LoadDutyValue
 10410  0F95                     i1_PWM1_LoadDutyValue:	
 10411                           
 10412                           ;pwm.c: 23: dutyValue &= 0x03FF;
 10413                           
 10414                           ;incstack = 0
 10415                           ; Regs used in i1_PWM1_LoadDutyValue: [wreg]
 10416  0F95  30FF               	movlw	255
 10417  0F96  05F0               	andwf	i1PWM1_LoadDutyValue@dutyValue,f
 10418  0F97  3003               	movlw	3
 10419  0F98  05F1               	andwf	i1PWM1_LoadDutyValue@dutyValue+1,f
 10420                           
 10421                           ;pwm.c: 26: if(CCP1CONbits.CCP1FMT)
 10422  0F99  0025               	movlb	5	; select bank5
 10423  0F9A  1E13               	btfss	19,4	;volatile
 10424  0F9B  2FA1               	goto	i1l2283
 10425                           
 10426                           ;pwm.c: 27: {
 10427                           ;pwm.c: 28: dutyValue <<= 6;
 10428  0F9C  3006               	movlw	6
 10429  0F9D                     u158_25:	
 10430  0F9D  35F0               	lslf	i1PWM1_LoadDutyValue@dutyValue,f
 10431  0F9E  0DF1               	rlf	i1PWM1_LoadDutyValue@dutyValue+1,f
 10432  0F9F  0B89               	decfsz	9,f
 10433  0FA0  2F9D               	goto	u158_25
 10434  0FA1                     i1l2283:	
 10435                           ;pwm.c: 29: CCPR1H = dutyValue >> 8;
 10436                           
 10437                           ;pwm.c: 30: CCPR1L = dutyValue;
 10438                           
 10439                           ;pwm.c: 31: }
 10440                           
 10441                           
 10442                           ;pwm.c: 32: else
 10443                           ;pwm.c: 33: {
 10444                           ;pwm.c: 34: CCPR1H = dutyValue >> 8;
 10445                           
 10446                           ;pwm.c: 35: CCPR1L = dutyValue;
 10447  0FA1  2FEB               	ljmp	PL36	;call to abstracted procedure
 10448  0FA2                     __end_ofi1_PWM1_LoadDutyValue:	
 10449  0FA2                     __ptext59:	
 10450 ;; *************** function i1_PWM2_LoadDutyValue *****************
 10451 ;; Defined at:
 10452 ;;		line 56 in file "src/pwm.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;  dutyValue       2    0[COMMON] unsigned int 
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;		None
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  1    wreg      void 
 10459 ;; Registers used:
 10460 ;;		wreg
 10461 ;; Tracked objects:
 10462 ;;		On entry : 1F/0
 10463 ;;		On exit  : 1F/5
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10466 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;Total ram usage:        2 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; This function calls:
 10473 ;;		Nothing
 10474 ;; This function is called by:
 10475 ;;		_updatePWM
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           
 10480                           ;psect for function i1_PWM2_LoadDutyValue
 10481  0FA2                     i1_PWM2_LoadDutyValue:	
 10482                           
 10483                           ;pwm.c: 58: dutyValue &= 0x03FF;
 10484                           
 10485                           ;incstack = 0
 10486                           ; Regs used in i1_PWM2_LoadDutyValue: [wreg]
 10487  0FA2  30FF               	movlw	255
 10488  0FA3  05F0               	andwf	i1PWM2_LoadDutyValue@dutyValue,f
 10489  0FA4  3003               	movlw	3
 10490  0FA5  05F1               	andwf	i1PWM2_LoadDutyValue@dutyValue+1,f
 10491                           
 10492                           ;pwm.c: 61: if(CCP2CONbits.CCP2FMT)
 10493  0FA6  0025               	movlb	5	; select bank5
 10494  0FA7  1E17               	btfss	23,4	;volatile
 10495  0FA8  2FAE               	goto	i1l2291
 10496                           
 10497                           ;pwm.c: 62: {
 10498                           ;pwm.c: 63: dutyValue <<= 6;
 10499  0FA9  3006               	movlw	6
 10500  0FAA                     u160_25:	
 10501  0FAA  35F0               	lslf	i1PWM2_LoadDutyValue@dutyValue,f
 10502  0FAB  0DF1               	rlf	i1PWM2_LoadDutyValue@dutyValue+1,f
 10503  0FAC  0B89               	decfsz	9,f
 10504  0FAD  2FAA               	goto	u160_25
 10505  0FAE                     i1l2291:	
 10506                           ;pwm.c: 64: CCPR2H = dutyValue >> 8;
 10507                           
 10508                           ;pwm.c: 65: CCPR2L = dutyValue;
 10509                           
 10510                           ;pwm.c: 66: }
 10511                           
 10512                           
 10513                           ;pwm.c: 67: else
 10514                           ;pwm.c: 68: {
 10515                           ;pwm.c: 69: CCPR2H = dutyValue >> 8;
 10516                           
 10517                           ;pwm.c: 70: CCPR2L = dutyValue;
 10518  0FAE  2FF5               	ljmp	PL40	;call to abstracted procedure
 10519  0FAF                     __end_ofi1_PWM2_LoadDutyValue:	
 10520  0FAF                     __ptext58:	
 10521 ;; *************** function i1_PWM3_LoadDutyValue *****************
 10522 ;; Defined at:
 10523 ;;		line 91 in file "src/pwm.c"
 10524 ;; Parameters:    Size  Location     Type
 10525 ;;  dutyValue       2    0[COMMON] unsigned int 
 10526 ;; Auto vars:     Size  Location     Type
 10527 ;;		None
 10528 ;; Return value:  Size  Location     Type
 10529 ;;                  1    wreg      void 
 10530 ;; Registers used:
 10531 ;;		wreg
 10532 ;; Tracked objects:
 10533 ;;		On entry : 1F/0
 10534 ;;		On exit  : 1F/6
 10535 ;;		Unchanged: 0/0
 10536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10537 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;Total ram usage:        2 bytes
 10542 ;; Hardware stack levels used:    1
 10543 ;; This function calls:
 10544 ;;		Nothing
 10545 ;; This function is called by:
 10546 ;;		_updatePWM
 10547 ;; This function uses a non-reentrant model
 10548 ;;
 10549                           
 10550                           
 10551                           ;psect for function i1_PWM3_LoadDutyValue
 10552  0FAF                     i1_PWM3_LoadDutyValue:	
 10553                           
 10554                           ;pwm.c: 93: dutyValue &= 0x03FF;
 10555                           
 10556                           ;incstack = 0
 10557                           ; Regs used in i1_PWM3_LoadDutyValue: [wreg]
 10558  0FAF  30FF               	movlw	255
 10559  0FB0  05F0               	andwf	i1PWM3_LoadDutyValue@dutyValue,f
 10560  0FB1  3003               	movlw	3
 10561  0FB2  05F1               	andwf	i1PWM3_LoadDutyValue@dutyValue+1,f
 10562                           
 10563                           ;pwm.c: 96: if(CCP3CONbits.CCP3FMT)
 10564  0FB3  0026               	movlb	6	; select bank6
 10565  0FB4  1E13               	btfss	19,4	;volatile
 10566  0FB5  2FBB               	goto	i1l2299
 10567                           
 10568                           ;pwm.c: 97: {
 10569                           ;pwm.c: 98: dutyValue <<= 6;
 10570  0FB6  3006               	movlw	6
 10571  0FB7                     u162_25:	
 10572  0FB7  35F0               	lslf	i1PWM3_LoadDutyValue@dutyValue,f
 10573  0FB8  0DF1               	rlf	i1PWM3_LoadDutyValue@dutyValue+1,f
 10574  0FB9  0B89               	decfsz	9,f
 10575  0FBA  2FB7               	goto	u162_25
 10576  0FBB                     i1l2299:	
 10577                           ;pwm.c: 99: CCPR3H = dutyValue >> 8;
 10578                           
 10579                           ;pwm.c: 100: CCPR3L = dutyValue;
 10580                           
 10581                           ;pwm.c: 101: }
 10582                           
 10583                           
 10584                           ;pwm.c: 102: else
 10585                           ;pwm.c: 103: {
 10586                           ;pwm.c: 104: CCPR3H = dutyValue >> 8;
 10587                           
 10588                           ;pwm.c: 105: CCPR3L = dutyValue;
 10589  0FBB  2FF0               	ljmp	PL38	;call to abstracted procedure
 10590  0FBC                     __end_ofi1_PWM3_LoadDutyValue:	
 10591  0FBC                     __ptext57:	
 10592 ;; *************** function i1_PWM4_LoadDutyValue *****************
 10593 ;; Defined at:
 10594 ;;		line 126 in file "src/pwm.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;  dutyValue       2    0[COMMON] unsigned int 
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;		None
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  1    wreg      void 
 10601 ;; Registers used:
 10602 ;;		wreg
 10603 ;; Tracked objects:
 10604 ;;		On entry : 1F/0
 10605 ;;		On exit  : 1F/6
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10608 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;Total ram usage:        2 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; This function calls:
 10615 ;;		Nothing
 10616 ;; This function is called by:
 10617 ;;		_updatePWM
 10618 ;; This function uses a non-reentrant model
 10619 ;;
 10620                           
 10621                           
 10622                           ;psect for function i1_PWM4_LoadDutyValue
 10623  0FBC                     i1_PWM4_LoadDutyValue:	
 10624                           
 10625                           ;pwm.c: 128: dutyValue &= 0x03FF;
 10626                           
 10627                           ;incstack = 0
 10628                           ; Regs used in i1_PWM4_LoadDutyValue: [wreg]
 10629  0FBC  30FF               	movlw	255
 10630  0FBD  05F0               	andwf	i1PWM4_LoadDutyValue@dutyValue,f
 10631  0FBE  3003               	movlw	3
 10632  0FBF  05F1               	andwf	i1PWM4_LoadDutyValue@dutyValue+1,f
 10633                           
 10634                           ;pwm.c: 131: if(CCP4CONbits.CCP4FMT)
 10635  0FC0  0026               	movlb	6	; select bank6
 10636  0FC1  1E17               	btfss	23,4	;volatile
 10637  0FC2  2FC8               	goto	i1l2307
 10638                           
 10639                           ;pwm.c: 132: {
 10640                           ;pwm.c: 133: dutyValue <<= 6;
 10641  0FC3  3006               	movlw	6
 10642  0FC4                     u164_25:	
 10643  0FC4  35F0               	lslf	i1PWM4_LoadDutyValue@dutyValue,f
 10644  0FC5  0DF1               	rlf	i1PWM4_LoadDutyValue@dutyValue+1,f
 10645  0FC6  0B89               	decfsz	9,f
 10646  0FC7  2FC4               	goto	u164_25
 10647  0FC8                     i1l2307:	
 10648                           ;pwm.c: 134: CCPR4H = dutyValue >> 8;
 10649                           
 10650                           ;pwm.c: 135: CCPR4L = dutyValue;
 10651                           
 10652                           ;pwm.c: 136: }
 10653                           
 10654                           
 10655                           ;pwm.c: 137: else
 10656                           ;pwm.c: 138: {
 10657                           ;pwm.c: 139: CCPR4H = dutyValue >> 8;
 10658                           
 10659                           ;pwm.c: 140: CCPR4L = dutyValue;
 10660  0FC8  2FE6               	ljmp	PL32	;call to abstracted procedure
 10661  0FC9                     __end_ofi1_PWM4_LoadDutyValue:	
 10662  0FC9                     PL10:	
 10663  0FC9  3F40               	moviw [0]fsr1
 10664  0FCA  00F4               	movwf	??_updateLed+2
 10665  0FCB  3F41               	moviw [1]fsr1
 10666  0FCC  00F5               	movwf	??_updateLed+3
 10667  0FCD  0874               	movf	??_updateLed+2,w
 10668  0FCE  3E04               	addlw	4
 10669  0FCF  00F6               	movwf	??_updateLed+4
 10670  0FD0  3000               	movlw	0
 10671  0FD1  3D75               	addwfc	??_updateLed+3,w
 10672  0FD2  00F7               	movwf	??_updateLed+5
 10673  0FD3  0873               	movf	??_updateLed+1,w
 10674  0FD4  0277               	subwf	??_updateLed+5,w
 10675  0FD5  1D03               	skipz
 10676  0FD6  0008               	return
 10677  0FD7  0872               	movf	??_updateLed,w
 10678  0FD8  0276               	subwf	??_updateLed+4,w
 10679  0FD9  0008               	return
 10680  0FDA                     __end_ofPL10:	
 10681  0FDA                     PL12:	
 10682  0FDA  3578               	lslf	updateLed@i,w
 10683  0FDB  3E4B               	addlw	(low ((_gLedRunPara| 0+3)))& (0+255)
 10684  0FDC  0086               	movwf	6
 10685  0FDD  0187               	clrf	7
 10686  0FDE  3F40               	moviw [0]fsr1
 10687  0FDF  00F2               	movwf	??_updateLed
 10688  0FE0  3F41               	moviw [1]fsr1
 10689  0FE1  00F3               	movwf	??_updateLed+1
 10690  0FE2  3578               	lslf	updateLed@i,w
 10691  0FE3  3E55               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 10692  0FE4  0086               	movwf	6
 10693  0FE5  0008               	return
 10694  0FE6                     __end_ofPL12:	
 10695  0FE6                     PL32:	
 10696  0FE6  0871               	movf	i1PWM4_LoadDutyValue@dutyValue+1,w
 10697  0FE7  0096               	movwf	22	;volatile
 10698  0FE8  0870               	movf	i1PWM4_LoadDutyValue@dutyValue,w
 10699  0FE9  0095               	movwf	21	;volatile
 10700  0FEA  0008               	return
 10701  0FEB                     __end_ofPL32:	
 10702  0FEB                     PL36:	
 10703  0FEB  0871               	movf	i1PWM1_LoadDutyValue@dutyValue+1,w
 10704  0FEC  0092               	movwf	18	;volatile
 10705  0FED  0870               	movf	i1PWM1_LoadDutyValue@dutyValue,w
 10706  0FEE  0091               	movwf	17	;volatile
 10707  0FEF  0008               	return
 10708  0FF0                     __end_ofPL36:	
 10709  0FF0                     PL38:	
 10710  0FF0  0871               	movf	i1PWM3_LoadDutyValue@dutyValue+1,w
 10711  0FF1  0092               	movwf	18	;volatile
 10712  0FF2  0870               	movf	i1PWM3_LoadDutyValue@dutyValue,w
 10713  0FF3  0091               	movwf	17	;volatile
 10714  0FF4  0008               	return
 10715  0FF5                     __end_ofPL38:	
 10716  0FF5                     PL40:	
 10717  0FF5  0871               	movf	i1PWM2_LoadDutyValue@dutyValue+1,w
 10718  0FF6  0096               	movwf	22	;volatile
 10719  0FF7  0870               	movf	i1PWM2_LoadDutyValue@dutyValue,w
 10720  0FF8  0095               	movwf	21	;volatile
 10721  0FF9  0008               	return
 10722  0FFA                     __end_ofPL40:	
 10723  0FFA                     PL44:	
 10724  0FFA  3578               	lslf	updateLed@i,w
 10725  0FFB  3E55               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 10726  0FFC  0086               	movwf	6
 10727  0FFD  3004               	movlw	4
 10728  0FFE  0187               	clrf	7
 10729  0FFF  0008               	return
 10730  1000                     __end_ofPL44:	
 10731                           
 10732                           	psect	text61
 10733  078E                     __ptext61:	
 10734 ;; *************** function _EUSART_RCV_ISR *****************
 10735 ;; Defined at:
 10736 ;;		line 33 in file "src/eusart.c"
 10737 ;; Parameters:    Size  Location     Type
 10738 ;;		None
 10739 ;; Auto vars:     Size  Location     Type
 10740 ;;		None
 10741 ;; Return value:  Size  Location     Type
 10742 ;;                  1    wreg      void 
 10743 ;; Registers used:
 10744 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10745 ;; Tracked objects:
 10746 ;;		On entry : 1F/0
 10747 ;;		On exit  : 1F/0
 10748 ;;		Unchanged: 0/0
 10749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;Total ram usage:        0 bytes
 10755 ;; Hardware stack levels used:    1
 10756 ;; This function calls:
 10757 ;;		Nothing
 10758 ;; This function is called by:
 10759 ;;		_INTERRUPT_InterruptManager
 10760 ;; This function uses a non-reentrant model
 10761 ;;
 10762                           
 10763                           
 10764                           ;psect for function _EUSART_RCV_ISR
 10765  078E                     _EUSART_RCV_ISR:	
 10766                           
 10767                           ;eusart.c: 35: if(1 == RC1STAbits.OERR == 1)
 10768                           
 10769                           ;incstack = 0
 10770                           ; Regs used in _EUSART_RCV_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10771  078E  0023               	movlb	3	; select bank3
 10772  078F  1C9D               	btfss	29,1	;volatile
 10773  0790  2F93               	goto	i1l3029
 10774                           
 10775                           ;eusart.c: 36: {
 10776                           ;eusart.c: 38: RC1STAbits.CREN = 0;
 10777  0791  121D               	bcf	29,4	;volatile
 10778                           
 10779                           ;eusart.c: 39: RC1STAbits.CREN = 1;
 10780  0792  161D               	bsf	29,4	;volatile
 10781  0793                     i1l3029:	
 10782                           
 10783                           ;eusart.c: 40: }
 10784                           ;eusart.c: 41: rxBuf[eusartRunPara.nRcvIdx++] = RCREG;
 10785  0793  0020               	movlb	0	; select bank0
 10786  0794  0863               	movf	_eusartRunPara+4,w	;volatile
 10787  0795  3EA7               	addlw	(low (_rxBuf| 0))& (0+255)
 10788  0796  0086               	movwf	6
 10789  0797  0187               	clrf	7
 10790  0798  0023               	movlb	3	; select bank3
 10791  0799  0819               	movf	25,w	;volatile
 10792  079A  0081               	movwf	1
 10793  079B  0020               	movlb	0	; select bank0
 10794  079C  0AE3               	incf	_eusartRunPara+4,f	;volatile
 10795  079D  0008               	return
 10796  079E                     __end_of_EUSART_RCV_ISR:	
 10797                           
 10798                           	psect	text62
 10799  0E8C                     __ptext62:	
 10800 ;; *************** function _DecodeCMD *****************
 10801 ;; Defined at:
 10802 ;;		line 175 in file "src/ble.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;		None
 10805 ;; Auto vars:     Size  Location     Type
 10806 ;;		None
 10807 ;; Return value:  Size  Location     Type
 10808 ;;                  1    wreg      void 
 10809 ;; Registers used:
 10810 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10811 ;; Tracked objects:
 10812 ;;		On entry : 1F/0
 10813 ;;		On exit  : 1F/0
 10814 ;;		Unchanged: 0/0
 10815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;Total ram usage:        0 bytes
 10821 ;; Hardware stack levels used:    1
 10822 ;; Hardware stack levels required when called:    1
 10823 ;; This function calls:
 10824 ;;		_strCmp
 10825 ;; This function is called by:
 10826 ;;		_INTERRUPT_InterruptManager
 10827 ;; This function uses a non-reentrant model
 10828 ;;
 10829                           
 10830                           
 10831                           ;psect for function _DecodeCMD
 10832  0E8C                     _DecodeCMD:	
 10833                           
 10834                           ;ble.c: 177: if(eusartRunPara.nCmd == 0)
 10835                           
 10836                           ;incstack = 0
 10837                           ; Regs used in _DecodeCMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10838  0E8C  0862               	movf	_eusartRunPara+3,w	;volatile
 10839  0E8D  1D03               	btfss	3,2
 10840  0E8E  2E91               	goto	i1l2827
 10841                           
 10842                           ;ble.c: 178: {
 10843                           ;ble.c: 179: eusartRunPara.nRcvIdx = 0;
 10844  0E8F  01E3               	clrf	_eusartRunPara+4	;volatile
 10845  0E90                     i1l2825:	
 10846                           
 10847                           ;ble.c: 180: return;
 10848  0E90  0008               	return
 10849  0E91                     i1l2827:	
 10850                           
 10851                           ;ble.c: 181: }
 10852                           ;ble.c: 182: if(eusartRunPara.nRcvIdx <= 2)
 10853  0E91  3003               	movlw	3
 10854  0E92  0263               	subwf	_eusartRunPara+4,w	;volatile
 10855  0E93  1C03               	btfss	3,0
 10856  0E94  0008               	return
 10857                           
 10858                           ;ble.c: 185: }
 10859                           ;ble.c: 186: if(rxBuf[eusartRunPara.nRcvIdx-2] == '\r' && rxBuf[eusartRunPara.nRcvIdx-1]
      +                           == '\n')
 10860  0E95  0863               	movf	_eusartRunPara+4,w	;volatile
 10861  0E96  3EA5               	addlw	(low ((_rxBuf| 0+254)))& (0+255)
 10862  0E97  0086               	movwf	6
 10863  0E98  300D               	movlw	13
 10864  0E99  0187               	clrf	7
 10865  0E9A  0601               	xorwf	1,w
 10866  0E9B  1D03               	btfss	3,2
 10867  0E9C  0008               	return
 10868  0E9D  0863               	movf	_eusartRunPara+4,w	;volatile
 10869  0E9E  3EA6               	addlw	(low ((_rxBuf| 0+255)))& (0+255)
 10870  0E9F  0086               	movwf	6
 10871  0EA0  300A               	movlw	10
 10872  0EA1  0601               	xorwf	1,w
 10873  0EA2  1D03               	btfss	3,2
 10874  0EA3  0008               	return
 10875                           
 10876                           ;ble.c: 187: {
 10877                           ;ble.c: 188: rxBuf[eusartRunPara.nRcvIdx] = '\0';
 10878  0EA4  0863               	movf	_eusartRunPara+4,w	;volatile
 10879  0EA5  3EA7               	addlw	(low (_rxBuf| 0))& (0+255)
 10880  0EA6  0086               	movwf	6
 10881  0EA7  0181               	clrf	1
 10882                           
 10883                           ;ble.c: 189: eusartRunPara.nRcvIdx = 0;
 10884  0EA8  01E3               	clrf	_eusartRunPara+4	;volatile
 10885                           
 10886                           ;ble.c: 190: switch(eusartRunPara.nRcvState)
 10887  0EA9  2EFC               	goto	i1l2877
 10888  0EAA                     i1l2839:	
 10889                           
 10890                           ;ble.c: 193: if(strCmp(rxBuf, "AT+OK\r\n") == 0)
 10891  0EAA  2722  318E         	fcall	PL42	;call to abstracted procedure
 10892  0EAC  2708  318E         	fcall	_strCmp
 10893  0EAE  3A00               	xorlw	0
 10894  0EAF  1D03               	skipz
 10895  0EB0  0008               	return
 10896  0EB1  2EB7               	goto	i1l2847
 10897  0EB2                     i1l97:	
 10898                           
 10899                           ;ble.c: 198: case 3:
 10900                           ;ble.c: 199: case 4:
 10901                           ;ble.c: 200: case 8:
 10902                           ;ble.c: 201: eusartRunPara.fAck = 1;
 10903  0EB2  155F               	bsf	_eusartRunPara,2	;volatile
 10904                           
 10905                           ;ble.c: 202: break;
 10906  0EB3  0008               	return
 10907  0EB4                     i1l101:	
 10908  0EB4                     i1l2843:	
 10909                           
 10910                           ;ble.c: 204: case 5:
 10911                           ;ble.c: 205: case 6:
 10912                           ;ble.c: 206: case 9:
 10913                           ;ble.c: 207: eusartRunPara.nRcvState = 1;
 10914  0EB4  3001               	movlw	1
 10915  0EB5  00E5               	movwf	_eusartRunPara+6	;volatile
 10916                           
 10917                           ;ble.c: 208: break;
 10918  0EB6  0008               	return
 10919  0EB7                     i1l2847:	
 10920  0EB7  0862               	movf	_eusartRunPara+3,w	;volatile
 10921                           
 10922                           ; Switch size 1, requested type "space"
 10923                           ; Number of cases is 8, Range of values is 1 to 9
 10924                           ; switch strategies available:
 10925                           ; Name         Instructions Cycles
 10926                           ; simple_byte           25    13 (average)
 10927                           ; direct_byte           27     9 (fixed)
 10928                           ; jumptable            263     9 (fixed)
 10929                           ;	Chosen strategy is simple_byte
 10930  0EB8  3A01               	xorlw	1	; case 1
 10931  0EB9  1903               	skipnz
 10932  0EBA  2EB2               	goto	i1l97
 10933  0EBB  3A03               	xorlw	3	; case 2
 10934  0EBC  1903               	skipnz
 10935  0EBD  2EB4               	goto	i1l101
 10936  0EBE  3A01               	xorlw	1	; case 3
 10937  0EBF  1903               	skipnz
 10938  0EC0  2EB2               	goto	i1l97
 10939  0EC1  3A07               	xorlw	7	; case 4
 10940  0EC2  1903               	skipnz
 10941  0EC3  2EB2               	goto	i1l97
 10942  0EC4  3A01               	xorlw	1	; case 5
 10943  0EC5  1903               	skipnz
 10944  0EC6  2EB4               	goto	i1l2843
 10945  0EC7  3A03               	xorlw	3	; case 6
 10946  0EC8  1903               	skipnz
 10947  0EC9  2EB4               	goto	i1l2843
 10948  0ECA  3A0E               	xorlw	14	; case 8
 10949  0ECB  1903               	skipnz
 10950  0ECC  2EB2               	goto	i1l97
 10951  0ECD  3A01               	xorlw	1	; case 9
 10952  0ECE  1903               	skipnz
 10953  0ECF  2EB4               	goto	i1l2843
 10954  0ED0  2E90               	goto	i1l2825
 10955  0ED1                     i1l2849:	
 10956                           
 10957                           ;ble.c: 218: if(strCmp(rxBuf, "AT+OK\r\n") == 0)
 10958  0ED1  2722  318E         	fcall	PL42	;call to abstracted procedure
 10959  0ED3  2708  318E         	fcall	_strCmp
 10960  0ED5  3A00               	xorlw	0
 10961  0ED6                     L4:	
 10962  0ED6  1D03               	skipz
 10963  0ED7  0008               	return
 10964  0ED8                     i1l2851:	
 10965                           
 10966                           ;ble.c: 219: {
 10967                           ;ble.c: 220: eusartRunPara.fAck = 1;
 10968  0ED8  155F               	bsf	_eusartRunPara,2	;volatile
 10969                           
 10970                           ;ble.c: 221: eusartRunPara.nRcvState = 0;
 10971  0ED9  01E5               	clrf	_eusartRunPara+6	;volatile
 10972  0EDA  0008               	return
 10973  0EDB                     i1l110:	
 10974                           ;ble.c: 224: case 5:
 10975                           
 10976  0EDB  2ED8               	goto	i1l2851
 10977  0EDC                     i1l2857:	
 10978                           ;ble.c: 225: eusartRunPara.fAck = 1;
 10979                           
 10980                           
 10981                           ;ble.c: 229: eusartRunPara.nRcvState = 2;
 10982  0EDC  3002               	movlw	2
 10983  0EDD  00E5               	movwf	_eusartRunPara+6	;volatile
 10984                           
 10985                           ;ble.c: 230: break;
 10986  0EDE  0008               	return
 10987  0EDF                     i1l112:	
 10988                           ;ble.c: 231: case 9:
 10989                           
 10990                           
 10991                           ;ble.c: 232: eusartRunPara.fAck = 1;
 10992  0EDF  155F               	bsf	_eusartRunPara,2	;volatile
 10993                           
 10994                           ;ble.c: 233: eusartRunPara.nRcvState = 0;
 10995  0EE0  01E5               	clrf	_eusartRunPara+6	;volatile
 10996                           
 10997                           ;ble.c: 234: if (strCmp(rxBuf, "3031313130313031") == 0)
 10998  0EE1  3035               	movlw	low (STR_3| (0+32768))
 10999  0EE2  00F0               	movwf	strCmp@s2
 11000  0EE3  3090               	movlw	high (STR_3| (0+32768))
 11001  0EE4  00F1               	movwf	strCmp@s2+1
 11002  0EE5  30A7               	movlw	(low (_rxBuf| 0))& (0+255)
 11003  0EE6  2708               	fcall	_strCmp
 11004  0EE7  3A00               	xorlw	0
 11005  0EE8  1903               	btfsc	3,2
 11006                           
 11007                           ;ble.c: 235: {
 11008                           ;ble.c: 236: eusartRunPara.fDev = 1;
 11009  0EE9  175F               	bsf	_eusartRunPara,6	;volatile
 11010  0EEA  0008               	return
 11011  0EEB                     i1l2867:	
 11012  0EEB  0862               	movf	_eusartRunPara+3,w	;volatile
 11013                           
 11014                           ; Switch size 1, requested type "space"
 11015                           ; Number of cases is 4, Range of values is 2 to 9
 11016                           ; switch strategies available:
 11017                           ; Name         Instructions Cycles
 11018                           ; simple_byte           13     7 (average)
 11019                           ; direct_byte           25     9 (fixed)
 11020                           ; jumptable            263     9 (fixed)
 11021                           ;	Chosen strategy is simple_byte
 11022  0EEC  3A02               	xorlw	2	; case 2
 11023  0EED  1903               	skipnz
 11024  0EEE  2ED1               	goto	i1l2849
 11025  0EEF  3A07               	xorlw	7	; case 5
 11026  0EF0  1903               	skipnz
 11027  0EF1  2EDB               	goto	i1l110
 11028  0EF2  3A03               	xorlw	3	; case 6
 11029  0EF3  1903               	skipnz
 11030  0EF4  2EDC               	goto	i1l2857
 11031  0EF5  3A0F               	xorlw	15	; case 9
 11032  0EF6  1903               	skipnz
 11033  0EF7  2EDF               	goto	i1l112
 11034  0EF8  2E90               	goto	i1l2825
 11035  0EF9                     i1l2869:	
 11036                           
 11037                           ;ble.c: 244: if(eusartRunPara.nCmd == 6)
 11038  0EF9  3006               	movlw	6
 11039  0EFA  0662               	xorwf	_eusartRunPara+3,w	;volatile
 11040  0EFB  2ED6               	goto	L4
 11041  0EFC                     i1l2877:	
 11042                           ;ble.c: 245: {
 11043                           ;ble.c: 246: eusartRunPara.fAck = 1;
 11044                           
 11045  0EFC  0865               	movf	_eusartRunPara+6,w	;volatile
 11046                           
 11047                           ; Switch size 1, requested type "space"
 11048                           ; Number of cases is 3, Range of values is 0 to 2
 11049                           ; switch strategies available:
 11050                           ; Name         Instructions Cycles
 11051                           ; simple_byte           10     6 (average)
 11052                           ; direct_byte           12     6 (fixed)
 11053                           ; jumptable            260     6 (fixed)
 11054                           ;	Chosen strategy is simple_byte
 11055  0EFD  3A00               	xorlw	0	; case 0
 11056  0EFE  1903               	skipnz
 11057  0EFF  2EAA               	goto	i1l2839
 11058  0F00  3A01               	xorlw	1	; case 1
 11059  0F01  1903               	skipnz
 11060  0F02  2EEB               	goto	i1l2867
 11061  0F03  3A03               	xorlw	3	; case 2
 11062  0F04  1903               	skipnz
 11063  0F05  2EF9               	goto	i1l2869
 11064  0F06  2F07               	goto	i1l87
 11065  0F07                     i1l87:	
 11066  0F07  0008               	return
 11067  0F08                     __end_of_DecodeCMD:	
 11068  0F08                     __ptext63:	
 11069 ;; *************** function _strCmp *****************
 11070 ;; Defined at:
 11071 ;;		line 135 in file "src/comman.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;  s1              1    wreg     PTR const unsigned char 
 11074 ;;		 -> rxBuf(32), 
 11075 ;;  s2              2    0[COMMON] PTR const unsigned char 
 11076 ;;		 -> STR_3(17), STR_2(8), STR_1(8), 
 11077 ;; Auto vars:     Size  Location     Type
 11078 ;;  s1              1    3[COMMON] PTR const unsigned char 
 11079 ;;		 -> rxBuf(32), 
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  1    wreg      unsigned char 
 11082 ;; Registers used:
 11083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11084 ;; Tracked objects:
 11085 ;;		On entry : 1F/0
 11086 ;;		On exit  : 1F/0
 11087 ;;		Unchanged: 1F/0
 11088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11089 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;Total ram usage:        4 bytes
 11094 ;; Hardware stack levels used:    1
 11095 ;; This function calls:
 11096 ;;		Nothing
 11097 ;; This function is called by:
 11098 ;;		_DecodeCMD
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           
 11103                           ;psect for function _strCmp
 11104  0F08                     _strCmp:	
 11105                           
 11106                           ;incstack = 0
 11107                           ; Regs used in _strCmp: [wreg-fsr1h+status,2+status,0+pclath]
 11108                           ;strCmp@s1 stored from wreg
 11109  0F08  00F3               	movwf	strCmp@s1
 11110  0F09                     i1l2589:	
 11111                           ;comman.c: 137: while(*s1 == *s2)
 11112                           
 11113  0F09  0870               	movf	strCmp@s2,w
 11114  0F0A  0084               	movwf	4
 11115  0F0B  0871               	movf	strCmp@s2+1,w
 11116  0F0C  0085               	movwf	5
 11117  0F0D  0800               	movf	0,w	;code access
 11118  0F0E  00F2               	movwf	??_strCmp
 11119  0F0F  0873               	movf	strCmp@s1,w
 11120  0F10  0086               	movwf	6
 11121  0F11  0187               	clrf	7
 11122  0F12  0801               	movf	1,w
 11123  0F13  0672               	xorwf	??_strCmp,w
 11124  0F14  1D03               	btfss	3,2
 11125  0F15  3401               	retlw	1
 11126                           
 11127                           ;comman.c: 138: {
 11128                           ;comman.c: 139: s1++;
 11129  0F16  0AF3               	incf	strCmp@s1,f
 11130                           
 11131                           ;comman.c: 140: s2++;
 11132  0F17  0AF0               	incf	strCmp@s2,f
 11133  0F18  1903               	skipnz
 11134  0F19  0AF1               	incf	strCmp@s2+1,f
 11135                           
 11136                           ;comman.c: 141: if(*s2 == '\0')
 11137  0F1A  0870               	movf	strCmp@s2,w
 11138  0F1B  0084               	movwf	4
 11139  0F1C  0871               	movf	strCmp@s2+1,w
 11140  0F1D  0085               	movwf	5
 11141  0F1E  0012               	moviw fsr0++
 11142  0F1F  1903               	btfsc	3,2
 11143                           
 11144                           ;comman.c: 142: return 0;
 11145  0F20  3400               	retlw	0
 11146  0F21  2F09               	goto	i1l2589
 11147  0F22                     __end_of_strCmp:	
 11148                           ;comman.c: 143: }
 11149                           ;comman.c: 144: return 1;
 11150                           
 11151  007E                     btemp	set	126	;btemp
 11152  007E                     int$flags	set	126
 11153  007E                     wtemp0	set	126
 11154  0F22                     PL42:	
 11155  0F22  3060               	movlw	low (STR_1| (0+32768))
 11156  0F23  00F0               	movwf	strCmp@s2
 11157  0F24  3090               	movlw	high (STR_1| (0+32768))
 11158  0F25  00F1               	movwf	strCmp@s2+1
 11159  0F26  34A7               	retlw	(low (_rxBuf| 0))& (0+255)
 11160  0F27                     __end_ofPL42:	


Data Sizes:
    Strings     109
    Constant    0
    Data        12
    BSS         191
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     40      78
    BANK1            80      0      51
    BANK2            80      0      32
    BANK3            80      0      80
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           41      0       0
    BANK12            0      0       0

Pointer List with Targets:

    eusartSendBuffer@buf	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_8(CODE[15]), STR_7(CODE[11]), STR_6(CODE[34]), STR_5(CODE[19]), 
		 -> STR_4(CODE[5]), 

    readBuffer@buf	PTR unsigned char  size(2) Largest target is 87
		 -> gLedPara.aPara(BIGRAM[80]), gLedPara.mPara(BIGRAM[7]), gLedPara(BIGRAM[87]), 

    writeBuffer@buf	PTR unsigned char  size(1) Largest target is 10
		 -> writeTimerPara@para(BANK0[10]), writeManualPara@para(BANK0[7]), 

    strCmp@s2	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[17]), STR_2(CODE[8]), STR_1(CODE[8]), 

    strCmp@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> rxBuf(BANK1[32]), 

    bleSendData@frame	PTR const unsigned char  size(1) Largest target is 32
		 -> txBuf(BANK2[32]), 

    bleSendCMD@pBuf	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_8(CODE[15]), STR_7(CODE[11]), STR_6(CODE[34]), STR_5(CODE[19]), 
		 -> STR_4(CODE[5]), 

    getCRC@pbuf	PTR unsigned char  size(2) Largest target is 32
		 -> rxBuf(BANK1[32]), txBuf(BANK2[32]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _runRTC->_checkIsYearLeap
    _checkIsYearLeap->___lwmod
    _TMR2_UserInterruptHandler->_updateLed
    _updatePWM->i1_PWM1_LoadDutyValue
    _updatePWM->i1_PWM2_LoadDutyValue
    _updatePWM->i1_PWM3_LoadDutyValue
    _updatePWM->i1_PWM4_LoadDutyValue
    _DecodeCMD->_strCmp

Critical Paths under _main in BANK0

    _main->_DecodeDATA
    _saveLedPara->_writeTimerPara
    _writeTimerPara->_writeBuffer
    _writeManualPara->_writeBuffer
    _writeBuffer->_writeByte
    _writeByte->_DATAEE_WriteByte
    _initLed->_initLedPara
    _initLedPara->_readLedPara
    _readLedPara->_readBuffer
    _readBuffer->___wmul
    _readByte->_DATAEE_ReadByte
    _initBLE->_bleSendCMD
    _bleSendCMD->_eusartSendBuffer
    _eusartSendBuffer->_eusartSendByte
    _turnOffLed->_PWM5_LoadDutyValue
    _turnMaxLed->_PWM5_LoadDutyValue
    _autoRun->_isValidTimer
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _DecodeDATA->_bleSendTimerData
    _updatePara->___wmul
    _bleSendTimerData->_isValidTimer
    _isValidTimer->___wmul
    _bleSendManualData->_getCRC
    _bleSendDeviceTime->_getCRC
    _getCRC->___bmul
    _bleSendData->___bmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   41345
                                             39 BANK0      1     1      0
                         _DecodeDATA
                  _SYSTEM_Initialize
                    _TMR0_StartTimer
                    _TMR2_StartTimer
                            _autoRun
                    _findDeviceFlash
                            _initBLE
                            _initLed
                            _initRTC
                        _saveLedPara
 ---------------------------------------------------------------------------------
 (1) _saveLedPara                                          2     2      0    5939
                                             23 BANK0      2     2      0
                             ___wmul
                    _writeManualPara
                     _writeTimerPara
 ---------------------------------------------------------------------------------
 (2) _writeTimerPara                                      12     1     11    1158
                                             11 BANK0     12     1     11
                             ___wmul (ARG)
                        _writeBuffer
 ---------------------------------------------------------------------------------
 (2) _writeManualPara                                      8     1      7    1047
                                             11 BANK0      8     1      7
                        _writeBuffer
 ---------------------------------------------------------------------------------
 (3) _writeBuffer                                          5     3      2     913
                                              6 BANK0      5     3      2
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            2     1      1     423
                                              4 BANK0      2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     4     1      3     290
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLed                                              0     0      0    4515
                        _initLedPara
 ---------------------------------------------------------------------------------
 (2) _initLedPara                                          3     3      0    4515
                                             21 BANK0      3     3      0
                        _readLedPara
 ---------------------------------------------------------------------------------
 (3) _readLedPara                                          5     5      0    4425
                                             16 BANK0      5     5      0
                             ___wmul
                         _readBuffer
 ---------------------------------------------------------------------------------
 (4) _readBuffer                                          10     7      3     691
                                              6 BANK0     10     7      3
                             ___wmul (ARG)
                           _readByte
 ---------------------------------------------------------------------------------
 (5) _readByte                                             2     2      0     201
                                              2 BANK0      2     2      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      2     0      2     156
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initBLE                                              2     2      0     734
                                              6 BANK0      2     2      0
                         _bleSendCMD
 ---------------------------------------------------------------------------------
 (2) _bleSendCMD                                           2     0      2     734
                                              4 BANK0      2     0      2
                   _eusartSendBuffer
 ---------------------------------------------------------------------------------
 (3) _eusartSendBuffer                                     3     1      2     245
                                              1 BANK0      3     1      2
                     _eusartSendByte
 ---------------------------------------------------------------------------------
 (1) _findDeviceFlash                                      0     0      0    3124
                         _turnMaxLed
                         _turnOffLed
 ---------------------------------------------------------------------------------
 (2) _turnOffLed                                           0     0      0    1562
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
                 _PWM5_LoadDutyValue
 ---------------------------------------------------------------------------------
 (2) _turnMaxLed                                           0     0      0    1562
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
                 _PWM5_LoadDutyValue
 ---------------------------------------------------------------------------------
 (3) _PWM5_LoadDutyValue                                   4     2      2     222
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _PWM4_LoadDutyValue                                   2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM3_LoadDutyValue                                   2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM2_LoadDutyValue                                   2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM1_LoadDutyValue                                   2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _autoRun                                              6     6      0    8009
                                             16 BANK0      6     6      0
                             ___wmul
                       _isValidTimer
                         _updatePara
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
                    _PWM5_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DecodeDATA                                          13    13      0   19001
                                             26 BANK0     13    13      0
                             ___bmul
                             ___wmul
                  _bleSendDeviceTime
                  _bleSendManualData
                   _bleSendTimerData
                             _getCRC
                         _updatePara
 ---------------------------------------------------------------------------------
 (2) _updatePara                                           3     3      0    3734
                                              6 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _bleSendTimerData                                    10    10      0    6348
                                             16 BANK0     10    10      0
                             ___bmul
                             ___wmul
                        _bleSendData
                             _getCRC
                       _isValidTimer
 ---------------------------------------------------------------------------------
 (2) _isValidTimer                                        10     0     10     385
                                              6 BANK0     10     0     10
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3644
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     463
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _bleSendManualData                                    1     1      0    1654
                                             10 BANK0      1     1      0
                        _bleSendData
                             _getCRC
 ---------------------------------------------------------------------------------
 (2) _bleSendDeviceTime                                    2     2      0    1699
                                             10 BANK0      2     2      0
                        _bleSendData
                             _getCRC
 ---------------------------------------------------------------------------------
 (2) _getCRC                                               7     4      3    1122
                                              3 BANK0      7     4      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _bleSendData                                          3     2      1     442
                                              3 BANK0      3     2      1
                             ___bmul (ARG)
                     _eusartSendByte
 ---------------------------------------------------------------------------------
 (4) _eusartSendByte                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           0     0      0    1865
                          _DecodeCMD
                     _EUSART_RCV_ISR
          _TMR2_UserInterruptHandler
                             _runRTC
 ---------------------------------------------------------------------------------
 (8) _runRTC                                               0     0      0     692
                    _checkIsYearLeap
 ---------------------------------------------------------------------------------
 (9) _checkIsYearLeap                                      2     0      2     692
                                              5 COMMON     2     0      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     515
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (8) _TMR2_UserInterruptHandler                            0     0      0     730
                          _updateLed
 ---------------------------------------------------------------------------------
 (9) _updateLed                                            7     7      0     730
                                              2 COMMON     7     7      0
                          _updatePWM
 ---------------------------------------------------------------------------------
 (10) _updatePWM                                           0     0      0     464
               i1_PWM1_LoadDutyValue
               i1_PWM2_LoadDutyValue
               i1_PWM3_LoadDutyValue
               i1_PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (11) i1_PWM4_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (11) i1_PWM3_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (11) i1_PWM2_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (11) i1_PWM1_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) _EUSART_RCV_ISR                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _DecodeCMD                                            0     0      0     443
                             _strCmp
 ---------------------------------------------------------------------------------
 (9) _strCmp                                               4     2      2     443
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DecodeDATA
     ___bmul
     ___wmul
     _bleSendDeviceTime
       _bleSendData
         ___bmul (ARG)
         _eusartSendByte (ARG)
       _getCRC
         ___bmul (ARG)
     _bleSendManualData
       _bleSendData
         ___bmul (ARG)
         _eusartSendByte (ARG)
       _getCRC
         ___bmul (ARG)
     _bleSendTimerData
       ___bmul
       ___wmul
       _bleSendData
         ___bmul (ARG)
         _eusartSendByte (ARG)
       _getCRC
         ___bmul (ARG)
       _isValidTimer
         ___wmul (ARG)
     _getCRC
       ___bmul (ARG)
     _updatePara
       ___wmul
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _PWM5_Initialize
     _TMR0_Initialize
     _TMR2_Initialize
   _TMR0_StartTimer
   _TMR2_StartTimer
   _autoRun
     ___wmul
     _isValidTimer
       ___wmul (ARG)
     _updatePara
       ___wmul
   _findDeviceFlash
     _turnMaxLed
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
       _PWM5_LoadDutyValue
     _turnOffLed
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
       _PWM5_LoadDutyValue
   _initBLE
     _bleSendCMD
       _eusartSendBuffer
         _eusartSendByte
   _initLed
     _initLedPara
       _readLedPara
         ___wmul
         _readBuffer
           ___wmul (ARG)
           _readByte (ARG)
             _DATAEE_ReadByte
   _initRTC
   _saveLedPara
     ___wmul
     _writeManualPara
       _writeBuffer
         _writeByte
           _DATAEE_WriteByte
     _writeTimerPara
       ___wmul (ARG)
       _writeBuffer (ARG)
         _writeByte
           _DATAEE_WriteByte

 _INTERRUPT_InterruptManager (ROOT)
   _DecodeCMD
     _strCmp
   _EUSART_RCV_ISR
   _TMR2_UserInterruptHandler
     _updateLed
       _updatePWM
         i1_PWM1_LoadDutyValue
         i1_PWM2_LoadDutyValue
         i1_PWM3_LoadDutyValue
         i1_PWM4_LoadDutyValue
   _runRTC
     _checkIsYearLeap
       ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     28      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      33       7       63.7%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      20       9       40.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      FC      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              29      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      FC      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Jan 15 22:10:29 2017

           __size_of_writeManualPara 0007                       ___bmul@product 0021  
                        __CFG_CP$OFF 0000                                   PL2 0716  
                                 PL4 0720                                   PL6 0726  
                                 PL8 072F                                   l41 01C9  
                                 l48 05CE                 i1_PWM1_LoadDutyValue 0F95  
                ___wmul@multiplicand 0022               ??i1_PWM4_LoadDutyValue 0072  
                                PL10 0FC9                                  PL20 0753  
                                PL12 0FDA                                  PL30 0779  
                                PL22 075B                                  PL14 073A  
                                PL40 0FF5                                  PL32 0FE6  
                                PL24 0763                                  PL16 0743  
                                PL50 0789                                  PL42 0F22  
                                PL34 077F                                  PL26 0769  
                                PL18 074B                                  PL44 0FFA  
                                PL36 0FEB                                  PL28 0771  
                                PL46 0E87                                  PL38 0FF0  
                        __CFG_LVP$ON 0000                                  PL48 0784  
         __size_of_bleSendDeviceTime 002B                                  l121 03D0  
                                l143 036D                                  l402 0168  
                                l441 008A                                  l354 04C5  
                                l515 01DF                                  l259 070C  
                                _GIE 005F                                  _RA2 0062  
                                _PR2 001E                         __CFG_CPD$OFF 0000  
                    _TMR2_Initialize 014D                      _PWM4_Initialize 013C  
                                wreg 0009                           _DecodeDATA 028F  
  __end_of_TMR2_UserInterruptHandler 0F36                                 l2315 03D3  
                               l2219 06F5                                 l2403 023A  
                               l2317 03E3                                 l3125 0547  
                               l3133 054B                                 l3109 04E7  
                               l2413 06A3                                 l2263 0553  
                               l2327 01CB                                 l2511 01BA  
                               l3223 00A0                                 l2337 05BF  
                               l2521 0592                                 l2513 058B  
                               l2601 049A                                 l3233 00AB  
                               l2267 0559                                 l2611 04C6  
                               l2427 05E2                                 l2435 05F2  
                               l2443 0602                                 l2451 063D  
                               l2259 06C5                                 l2541 03EF  
                               l2605 04C1                                 l2453 063F  
                               l2509 01B6                                 l3245 00B8  
                               l2615 04E0                                 l3239 00B1  
                               l2457 045B                                 l2529 03E5  
                               l3097 0207                                 l2547 03F0  
                               l2539 0420                                 l2573 060D  
                               l2565 0604                                 l2741 0253  
                               l2575 061E                                 l2559 0433  
                               l2911 02E0                                 l2595 0465  
                               l2931 0317                                 l2933 0318  
                               l2925 02FC                                 l2599 0493  
                               l2927 0309                                 l2783 066C  
                               l2961 0371                                 l2929 030A  
                               l2971 03A5                                 l2947 033C  
                               l2955 0337                                 l2883 0295  
                               l2779 026E                                 l2795 067C  
                               l2965 037F                                 l2789 067A  
                               l2895 02AF                                 l2799 0692  
                               l2897 02B0                                 l2979 03B6  
                               l2995 019D                                 STR_1 1060  
                       __CFG_WDTE$ON 0000                                 STR_2 1060  
                               STR_3 1035                                 STR_4 1068  
                               STR_5 1022                                 STR_6 1000  
                               STR_7 1055                                 STR_8 1046  
            __end_of_PWM1_Initialize 0128                                 _LATA 010C  
                               _LATB 010D                                 _LATC 010E  
                               u2400 0311                                 u2090 0120  
                               u2500 03AB                                 u3037 0099  
                               u2510 03AC                                 u3047 016F  
                               u2360 0302                                 u3057 017C  
                               u2370 0303                                 u3067 05BA  
                               u2460 0377                                 u2470 0378  
                               u2390 0310                                 u2710 01FF  
                               u1815 05DD                                 u2720 021A  
                               u1835 05ED                                 u2750 04FB  
                               u1855 05FD                                 u1875 0638  
                               u1980 042A                                 u2790 052E  
                               i1l87 0F07                                 i1l97 0EB2  
                      ?_isValidTimer 0026                                 _TMR2 001D  
                               _TRMT 0CF1                                 _TXIF 008C  
                               _WPUA 020C                                 _WPUB 020D  
                               _WPUC 020E                         __CFG_WRT$OFF 0000  
                               _main 007C                      _TMR0_StartTimer 0157  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 start 0031  
                    _PWM5_Initialize 0147                         ?_initLedPara 0070  
                      __CFG_CSWEN$ON 0000                    ___bmul@multiplier 0022  
                      __CFG_MCLRE$ON 0000           __end_of_PWM5_LoadDutyValue 0655  
                    _findDeviceFlash 015B                         ?_readLedPara 0070  
         __size_of_bleSendManualData 0028                ?i1_PWM1_LoadDutyValue 0070  
          __size_of_DATAEE_WriteByte 0021             __end_of_eusartSendBuffer 01DE  
            __end_of_PWM2_Initialize 0131              __end_of_TMR0_Initialize 026E  
               __size_of_bleSendData 0021       __size_of_OSCILLATOR_Initialize 000A  
      __end_of_OSCILLATOR_Initialize 00DB                          _writeBuffer 0238  
                              ?_main 0070        __size_ofi1_PWM3_LoadDutyValue 000D  
                              _T2CON 001F                                _LATC0 0870  
                              _LATB4 086C                     ??_eusartSendByte 0020  
                     __CFG_DEBUG$OFF 0000                                i1l101 0EB4  
                              i1l110 0EDB                                i1l112 0EDF  
                              i1l231 002F                                i1l225 0019  
                              i1l228 0024                      __end_of___lwmod 0E87  
                              _RCREG 0199                                _OSCEN 091D  
                 _PWM4_LoadDutyValue 062F                                _TMR0H 0016  
                              _TMR0L 0015                                _TRISA 008C  
                              _TRISB 008D                                _TRISC 008E  
                              _TXREG 019A                        __CFG_PWRTE$ON 0000  
                     __CFG_FCMEN$OFF 0000                                _aPara 01A0  
                              _mPara 00A0                      __end_of_initBLE 01AF  
                    _DATAEE_ReadByte 06E7                      __end_of_autoRun 0551  
                    __end_of_initRTC 01EF                      __end_of_initLed 01E6  
                              _rxBuf 00A7                  ?_PWM4_LoadDutyValue 0020  
                              _txBuf 0120                       ??_isValidTimer 0030  
       __end_ofi1_PWM2_LoadDutyValue 0FAF              __end_of_PWM3_Initialize 013C  
                     __CFG_BOREN$OFF 0000                       __CFG_BORV$HIGH 0000  
                   ?_checkIsYearLeap 0075                     ??_writeTimerPara 0036  
                        autoRun@hour 0033                                status 0003  
                              wtemp0 007E                    writeTimerPara@idx 002B  
                    _TMR2_StartTimer 0159                      __initialization 0033  
                 __size_of_DecodeCMD 007C                         __end_of_main 00BE  
               ??_PWM4_LoadDutyValue 0022              __end_of_PWM4_Initialize 0147  
            __end_of_TMR2_Initialize 0157          ?_INTERRUPT_InterruptManager 0070  
                       ?_saveLedPara 0070                               ??_main 0047  
                  ??_writeManualPara 0032                       _EUSART_RCV_ISR 078E  
                        ?_DecodeDATA 0070                   bleSendManualData@i 002A  
            __end_of_TMR0_StartTimer 0159                               _CCPR1H 0292  
                             _CCPR2H 0296                               _CCPR3H 0312  
                             _CCPR1L 0291                               _CCPR4H 0316  
                             _CCPR2L 0295                               _CCPR3L 0311  
                             _CCPR4L 0315                               _ANSELA 018C  
                             _ANSELB 018D                               _ANSELC 018E  
                 __CFG_RSTOSC$HFINT1 0000                               _T0CON0 0017  
                             _T0CON1 0018                               _RC1STA 019D  
                   ?_PWM1_Initialize 0070                               i1l3021 0F33  
                             _ODCONA 028C                               _ODCONB 028D  
                             i1l2307 0FC8                               _ODCONC 028E  
                             i1l3029 0793                               i1l3063 0E2B  
                             i1l3081 0E49                               i1l2283 0FA1  
                             i1l2291 0FAE                               i1l2419 0F7A  
                             i1l3079 0E48                               i1l2481 0E7E  
                             i1l2299 0FBB              __end_of_PWM5_Initialize 014D  
                             i1l2477 0E72                               i1l2485 0E82  
                             i1l2825 0E90                               i1l2753 0F37  
                             i1l2851 0ED8                               i1l2843 0EB4  
                             i1l2827 0E91                               i1l2763 0F51  
                             i1l2747 0F36                               i1l2589 0F09  
                             u211_25 0F42                               i1l2847 0EB7  
                             i1l2839 0EAA                               i1l2767 0F68  
                             i1l2857 0EDC                               i1l2849 0ED1  
                             i1l2769 0F74                               i1l2867 0EEB  
                             i1l2869 0EF9                               i1l2877 0EFC  
                             u160_25 0FAA                               u162_25 0FB7  
                             u164_25 0FC4                               u158_25 0F9D  
                             u192_25 0E78                       bleSendCMD@pBuf 0024  
                             _OSCFRQ 091F                          readBuffer@i 002F  
                             _TX1STA 019E              __end_of_findDeviceFlash 016B  
                             ___bmul 0459               ??i1_PWM1_LoadDutyValue 0072  
        __size_of_PWM3_LoadDutyValue 0010                               ___wmul 0551  
                             _getCRC 03D1                       __CFG_STVREN$ON 0000  
                          ??___lwmod 0074                     __end_of_readByte 06E7  
                   ?_TMR0_Initialize 0070                     ?_PWM2_Initialize 0070  
             __end_of_EUSART_RCV_ISR 079E                               _runRTC 0E05  
                             _strCmp 0F08              __end_of_DATAEE_ReadByte 06F5  
                          ??_initBLE 0026                            ??_autoRun 0030  
                          ??_initRTC 0020                            ??_initLed 0038  
                     bleSendData@len 0023          ??_TMR2_UserInterruptHandler 0079  
            __end_of_TMR2_StartTimer 015B                    bleSendTimerData@i 0037  
                  bleSendTimerData@j 0038                    __end_of_DecodeCMD 0F08  
                 writeTimerPara@addr 0036                   writeTimerPara@para 002C  
                   ?_PWM3_Initialize 0070                    _SYSTEM_Initialize 00BE  
            __end_of__initialization 0079                   ?_SYSTEM_Initialize 0070  
         __end_of_PWM2_LoadDutyValue 05F4          PWM1_LoadDutyValue@dutyValue 0020  
                ___bmul@multiplicand 0020                       __pcstackCOMMON 0070  
                       __pidataBANK1 0000                  ??_SYSTEM_Initialize 0021  
                __size_of_DecodeDATA 0142                 __size_of_initLedPara 002C  
                   _DATAEE_WriteByte 06F5                 __end_of_isValidTimer 058B  
                 _PWM1_LoadDutyValue 05D4            __size_of_bleSendTimerData 0074  
                   ?_TMR2_Initialize 0070                     ?_PWM4_Initialize 0070  
                         __end_ofPL2 0720                           __end_ofPL4 0726  
                         __end_ofPL6 072F                           __end_ofPL8 073A  
               __size_of_readLedPara 002B                 i1_PWM2_LoadDutyValue 0FA2  
                    ?_EUSART_RCV_ISR 0070          PWM4_LoadDutyValue@dutyValue 0020  
                ?_PWM1_LoadDutyValue 0020                           _bleSendCMD 01AF  
                   ?_TMR0_StartTimer 0070            __end_of_SYSTEM_Initialize 00D1  
                         __pbssBANK0 0048                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                           __pbssBANK3 01A0  
                   ?_PWM5_Initialize 0070                     ?_findDeviceFlash 0070  
               ??_PWM1_LoadDutyValue 0022                         initLedPara@i 0037  
                         __pmaintext 007C        i1PWM3_LoadDutyValue@dutyValue 0070  
          _TMR2_UserInterruptHandler 0F27                              ?___bmul 0020  
                            ?___wmul 0020                              ?_getCRC 0023  
                    __CFG_PPS1WAY$ON 0000                           __pintentry 0004  
                            _CCP1CON 0293                              _CCP2CON 0297  
                            _CCP3CON 0313                              _CCP4CON 0317  
              ?i1_PWM2_LoadDutyValue 0070                    ?_eusartSendBuffer 0021  
                            ?_runRTC 0070                         ?_writeBuffer 0026  
                            ?_strCmp 0070                     ?_DATAEE_ReadByte 0020  
                 ??_eusartSendBuffer 0023                 __size_of_saveLedPara 0039  
      __size_ofi1_PWM4_LoadDutyValue 000D                        _eusartRunPara 005F  
                       readLedPara@i 0034                   _PWM5_LoadDutyValue 063F  
                            _SP1BRGH 019C                              _SP1BRGL 019B  
                            _OSCCON1 0919                              _OSCCON3 091B  
                 __size_of_updatePWM 001B                   __size_of_updateLed 0044  
                            _NVMADRH 0892                              _NVMADRL 0891  
                            _OSCTUNE 091E                              _NVMDATL 0893  
                            _NVMCON2 0896                              _PWM5DCH 0618  
                            _PWM5DCL 0617                              _PWM5CON 0619  
                            _PPSLOCK 0E0F                     ?_TMR2_StartTimer 0070  
                ?_PWM5_LoadDutyValue 0020                         readByte@addr 0022  
       __end_ofi1_PWM3_LoadDutyValue 0FBC                 DATAEE_WriteByte@bAdd 0020  
                          ?_readByte 0070                   __size_of_writeByte 0008  
                    _writeManualPara 0228                           getCRC@pbuf 0023  
                      ??_bleSendData 0024                           _readBuffer 06C3  
                    __size_of___bmul 000C                   eusartSendByte@byte 0020  
                    __size_of___wmul 0015                      __size_of_getCRC 0014  
                            ___lwmod 0E67                 ??_PWM5_LoadDutyValue 0022  
                            __ptext1 01EF                              __ptext2 022F  
                            __ptext3 0228                              __ptext4 0238  
                            __ptext5 024B                              __ptext6 06F5  
                            __ptext7 01E6                              __ptext8 01E5  
                            __ptext9 066C                      __size_of_runRTC 0046  
                    __size_of_strCmp 001A                              _initBLE 016B  
                            _autoRun 04E6                              _initRTC 01E6  
                            getCRC@i 0029                              _initLed 01E5  
              _OSCILLATOR_Initialize 00D1                            _T2CONbits 001F  
           ??_PIN_MANAGER_Initialize 0020                          ?_bleSendCMD 0024  
                       ??_DecodeDATA 003A           __size_of_SYSTEM_Initialize 0013  
                            clrloop0 079F                 end_of_initialization 0079  
                        _gLedRunPara 0048                           ??_readByte 0022  
                  _EUSART_Initialize 0253                            _MONTH_DAY 00C7  
              __size_of_isValidTimer 0025                   ?_EUSART_Initialize 0070  
           __size_of_checkIsYearLeap 001C                    __end_of_updatePWM 0F95  
                  __end_of_updateLed 0F7A                       readBuffer@addr 002E  
                       writeBuffer@i 002A               ??i1_PWM2_LoadDutyValue 0072  
        __size_of_PWM4_LoadDutyValue 0010                         __pstringtext 1000  
                 __end_of_DecodeDATA 03D1                     _bleSendTimerData 03E5  
                ??_EUSART_Initialize 0020                  __end_of_bleSendData 05D4  
                  __end_of_writeByte 0253                           _updatePara 0465  
                   __CFG_FEXTOSC$OFF 0000             __end_of_DATAEE_WriteByte 0716  
                          _RXPPSbits 0E24              __end_of_writeManualPara 022F  
            __size_of_eusartSendByte 0007                         _isValidTimer 0566  
          __end_of_EUSART_Initialize 0263                            _DecodeCMD 0E8C  
                        _CCP1CONbits 0293                          _CCP2CONbits 0297  
                        _CCP3CONbits 0313                          _CCP4CONbits 0317  
         __end_of_PWM3_LoadDutyValue 0604             __size_of_PWM1_Initialize 0006  
                   ??_EUSART_RCV_ISR 0070                           _turnOffLed 0655  
                         _turnMaxLed 026E                          ?_readBuffer 0026  
                     readByte@result 0023                  __size_of_bleSendCMD 001C  
            __size_of_writeTimerPara 0009                       __end_of___bmul 0465  
      __size_ofi1_PWM1_LoadDutyValue 000D                       __end_of___wmul 0566  
                     __end_of_getCRC 03E5                   _PWM2_LoadDutyValue 05E4  
             ?_OSCILLATOR_Initialize 0070                 i1_PWM3_LoadDutyValue 0FAF  
                     __end_of_runRTC 0E4B                           autoRun@min 0034  
                     __end_of_strCmp 0F22                 __size_of_writeBuffer 0013  
                        updatePara@i 0028                          __end_ofPL10 0FDA  
                        __end_ofPL20 075B                          __end_ofPL12 0FE6  
                        __end_ofPL30 077F                          __end_ofPL22 0763  
                        __end_ofPL14 0743                          __end_ofPL40 0FFA  
                        __end_ofPL32 0FEB                          __end_ofPL24 0769  
                        __end_ofPL16 074B                          __end_ofPL50 078E  
                        __end_ofPL42 0F27                          __end_ofPL34 0784  
                        __end_ofPL26 0771                          __end_ofPL18 0753  
                        __end_ofPL44 1000                          __end_ofPL36 0FF0  
                        __end_ofPL28 0779                          __end_ofPL46 0E8C  
                        __end_ofPL38 0FF5                          __end_ofPL48 0789  
                start_initialization 0033             __size_of_PWM2_Initialize 0009  
           __size_of_TMR0_Initialize 000B                  ?_PWM2_LoadDutyValue 0020  
    __size_of_PIN_MANAGER_Initialize 0047                           ?_DecodeCMD 0070  
                DATAEE_ReadByte@bAdd 0020                        ??_initLedPara 0035  
                       getCRC@result 0028                     __CFG_LPBOREN$OFF 0000  
               ??_PWM2_LoadDutyValue 0022             __size_of_PWM3_Initialize 000B  
                           ??___bmul 0021          PWM2_LoadDutyValue@dutyValue 0020  
                      ??_readLedPara 0030                             ??___wmul 0024  
                        _bleSendData 05B3                             ??_getCRC 0026  
                        _CCPTMRSbits 029F                          __pdataBANK1 00C7  
                           ??_runRTC 0077                ?i1_PWM3_LoadDutyValue 0070  
                           ??_strCmp 0072                    ??_checkIsYearLeap 0077  
        PWM5_LoadDutyValue@dutyValue 0020                          __pbssCOMMON 0079  
                          ___latbits 0002                          ?_updatePara 0070  
                      __pcstackBANK0 0020                     isValidTimer@para 0026  
           __size_of_PWM4_Initialize 000B             __size_of_TMR2_Initialize 000A  
                __size_of_readBuffer 001B            __size_of_eusartSendBuffer 0013  
                   ?_writeManualPara 002B           __size_of_EUSART_Initialize 0010  
      i1PWM1_LoadDutyValue@dutyValue 0070         __end_ofi1_PWM4_LoadDutyValue 0FC9  
                       saveLedPara@i 0038             __size_of_TMR0_StartTimer 0002  
                  __size_of_readByte 0009          __size_of_PWM1_LoadDutyValue 0010  
             _PIN_MANAGER_Initialize 00DB             __size_of_PWM5_Initialize 0006  
                        ?_turnOffLed 0070                          ?_turnMaxLed 0070  
      i1PWM4_LoadDutyValue@dutyValue 0070             __size_of_findDeviceFlash 0010  
                           ?___lwmod 0070                        ??_saveLedPara 0037  
                __end_of_initLedPara 0698                    ??_PWM1_Initialize 0020  
       ??_INTERRUPT_InterruptManager 0079                  __end_of_readLedPara 06C3  
                           ?_initBLE 0070                             _BAUD1CON 019F  
                           ?_autoRun 0070                             ?_initRTC 0070  
                           ?_initLed 0070                            getCRC@len 0025  
                       ??_bleSendCMD 0026             __size_of_DATAEE_ReadByte 000E  
                     _eusartSendByte 01DE                          DecodeDATA@i 0044  
                        DecodeDATA@j 0045             __end_of_bleSendTimerData 0459  
                  ??_TMR0_Initialize 0020                    ??_PWM2_Initialize 0020  
                        ??_DecodeCMD 0074                       ___wmul@product 0024  
                          clear_ram0 079E                             _PIE0bits 0090  
                           _PIE1bits 0091             __size_of_TMR2_StartTimer 0002  
__size_of_INTERRUPT_InterruptManager 002D                             _PIR0bits 0010  
                           _PIR1bits 0011                  __size_of_updatePara 0081  
                      readBuffer@buf 0026                        readBuffer@len 0028  
                     _writeTimerPara 022F                   __end_of_bleSendCMD 01CB  
             ??i1_PWM3_LoadDutyValue 0072          __size_of_PWM5_LoadDutyValue 0016  
                          _updatePWM 0F7A                            _updateLed 0F36  
                  ??_PWM3_Initialize 0020                    ___wmul@multiplier 0020  
                __end_of_saveLedPara 0228                   findDeviceFlash@tog 006D  
              DATAEE_WriteByte@bData 0022               __end_of_eusartSendByte 01E5  
                          _writeByte 024B                  __size_of_turnMaxLed 0021  
                __size_of_turnOffLed 0017                           updateLed@i 0078  
                  ?_DATAEE_WriteByte 0020                  eusartSendBuffer@buf 0021  
                  ??_TMR2_Initialize 0020                    ??_PWM4_Initialize 0020  
                 ??_DATAEE_WriteByte 0023                      writeBuffer@addr 0029  
             __end_of_writeTimerPara 0238                          _initLedPara 066C  
         __end_of_PWM4_LoadDutyValue 063F                         ??_readBuffer 0029  
                           _gLedPara 2399                          _readLedPara 0698  
            ??_OSCILLATOR_Initialize 0020                    ??_TMR0_StartTimer 0020  
                         ?_updatePWM 0070                     __size_of___lwmod 0020  
                         ?_updateLed 0070        __size_ofi1_PWM2_LoadDutyValue 000D  
                  ??_PWM5_Initialize 0020                   _PWM3_LoadDutyValue 05F4  
               i1_PWM4_LoadDutyValue 0FBC                    ??_findDeviceFlash 0024  
                   __size_of_initBLE 0044                     __size_of_autoRun 006B  
                         _T0CON0bits 0017                     __size_of_initRTC 0009  
                  _bleSendDeviceTime 0604                     __size_of_initLed 0001  
               bleSendDeviceTime@len 002A                   ?_bleSendDeviceTime 0070  
                           __ptext10 0698                             __ptext11 06C3  
                           __ptext20 063F                             __ptext12 06DE  
                           __ptext21 062F                             __ptext13 06E7  
                           __ptext30 0263                             __ptext22 05F4  
                           __ptext14 016B                             __ptext31 0147  
                           __ptext23 05E4                             __ptext15 01AF  
                           __ptext40 0465                             __ptext32 013C  
                           __ptext24 05D4                             __ptext16 01CB  
                           __ptext41 03E5                             __ptext33 0131  
                           __ptext25 04E6                             __ptext17 015B  
                           __ptext42 0566                             __ptext34 0128  
                           __ptext26 0159                             __ptext18 0655  
                           __ptext51 0E05                             __ptext43 0551  
                           __ptext35 0122                             __ptext27 0157  
                           __ptext19 026E                             __ptext60 0F95  
                           __ptext52 0E4B                             __ptext44 0459  
                           __ptext36 00DB                             __ptext28 00BE  
                           __ptext61 078E                             __ptext53 0E67  
                           __ptext45 058B                             __ptext37 00D1  
                           __ptext29 014D                             __ptext62 0E8C  
                           __ptext54 0F27                             __ptext46 0604  
                           __ptext38 0253                             __ptext63 0F08  
                           __ptext55 0F36                             __ptext47 03D1  
                           __ptext39 028F                             __ptext56 0F7A  
                           __ptext48 05B3                             __ptext57 0FBC  
                           __ptext49 01DE                             __ptext58 0FAF  
                ?_PWM3_LoadDutyValue 0020                             __ptext59 0FA2  
                    ?_eusartSendByte 0070                           ?_writeByte 0024  
       __end_ofi1_PWM1_LoadDutyValue 0FA2                     _eusartSendBuffer 01CB  
                 __end_of_readBuffer 06DE          DATAEE_WriteByte@GIEBitValue 0023  
                      DecodeDATA@len 0046                             _keyValue 0079  
                           _readByte 06DE                  ??_bleSendDeviceTime 002A  
                      __size_of_main 0042                    ??_DATAEE_ReadByte 0022  
                    _checkIsYearLeap 0E4B                      ?_writeTimerPara 002B  
                         _RC1STAbits 019D                           _RC2PPSbits 0EA2  
               ??_PWM3_LoadDutyValue 0022                           _RC3PPSbits 0EA3  
                         _RC4PPSbits 0EA4                         ?_bleSendData 0023  
                           int$flags 007E                           _RC5PPSbits 0EA5  
                         _RC6PPSbits 0EA6                    ??_TMR2_StartTimer 0020  
                         _RC7PPSbits 0EA7   __end_of_INTERRUPT_InterruptManager 0031  
         _INTERRUPT_InterruptManager 0004                          _saveLedPara 01EF  
                      ??_writeBuffer 0028                    _bleSendManualData 058B  
        PIN_MANAGER_Initialize@state 0020            __end_of_bleSendDeviceTime 062F  
              ?i1_PWM4_LoadDutyValue 0070                             autoRun@i 0035  
                 ?_bleSendManualData 0070                           _INTCONbits 000B  
                        _NVMCON1bits 0895                         ??_updatePara 0026  
                     writeBuffer@buf 0026                       writeBuffer@len 0027  
                checkIsYearLeap@year 0075                  ??_bleSendManualData 002A  
                           intlevel1 0000                     ___lwmod@dividend 0072  
            ?_PIN_MANAGER_Initialize 0070                    __CFG_CLKOUTEN$OFF 0000  
                        _PPSLOCKbits 0E0F                      _PWM1_Initialize 0122  
        __size_of_PWM2_LoadDutyValue 0010                         ??_turnOffLed 0024  
                       ??_turnMaxLed 0024                   __end_of_updatePara 04E6  
          __end_of_bleSendManualData 05B3                             strCmp@s1 0073  
                           strCmp@s2 0070          PWM3_LoadDutyValue@dutyValue 0020  
                   bleSendData@frame 0025                          ??_updatePWM 0072  
                        ??_updateLed 0072                  bleSendTimerData@len 0039  
                 bleSendDeviceTime@i 002B                      ___lwmod@divisor 0070  
            __size_of_EUSART_RCV_ISR 0010                      _TMR0_Initialize 0263  
                    _PWM2_Initialize 0128                        writeByte@addr 0025  
                    ___lwmod@counter 0074                        writeByte@byte 0024  
 __size_of_TMR2_UserInterruptHandler 000F                  __end_of_writeBuffer 024B  
         ?_TMR2_UserInterruptHandler 0070                          ??_writeByte 0025  
                 __end_of_turnMaxLed 028F                   __end_of_turnOffLed 066C  
                writeManualPara@addr 0032       __end_of_PIN_MANAGER_Initialize 0122  
            __end_of_checkIsYearLeap 0E67                       keyScan@lastKey 007A  
                writeManualPara@para 002B                    ?_bleSendTimerData 0070  
                        _PWMTMRSbits 061F           __end_of_PWM1_LoadDutyValue 05E4  
                       _gCurrentTime 0066                   ??_bleSendTimerData 0030  
      i1PWM2_LoadDutyValue@dutyValue 0070                      _PWM3_Initialize 0131  
