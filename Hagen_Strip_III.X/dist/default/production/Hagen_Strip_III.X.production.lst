

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Jan  7 16:00:49 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	swtext1,local,class=CONST,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	intentry,global,class=CODE,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	dabs	1,0x7E,2
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0017                     	;# 
   127  0018                     	;# 
   128  0019                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001C                     	;# 
   133  001D                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  008C                     	;# 
   137  008D                     	;# 
   138  008E                     	;# 
   139  0090                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0094                     	;# 
   144  0097                     	;# 
   145  009B                     	;# 
   146  009B                     	;# 
   147  009C                     	;# 
   148  009D                     	;# 
   149  009E                     	;# 
   150  009F                     	;# 
   151  010C                     	;# 
   152  010D                     	;# 
   153  010E                     	;# 
   154  0111                     	;# 
   155  0112                     	;# 
   156  0113                     	;# 
   157  0114                     	;# 
   158  0115                     	;# 
   159  0116                     	;# 
   160  0117                     	;# 
   161  0118                     	;# 
   162  0119                     	;# 
   163  018C                     	;# 
   164  018D                     	;# 
   165  018E                     	;# 
   166  0197                     	;# 
   167  0199                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  019A                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019C                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019E                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020C                     	;# 
   193  020D                     	;# 
   194  020E                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  0219                     	;# 
   212  021A                     	;# 
   213  021B                     	;# 
   214  021C                     	;# 
   215  021D                     	;# 
   216  021D                     	;# 
   217  021E                     	;# 
   218  021F                     	;# 
   219  028C                     	;# 
   220  028D                     	;# 
   221  028E                     	;# 
   222  0291                     	;# 
   223  0291                     	;# 
   224  0292                     	;# 
   225  0293                     	;# 
   226  0294                     	;# 
   227  0295                     	;# 
   228  0295                     	;# 
   229  0296                     	;# 
   230  0297                     	;# 
   231  0298                     	;# 
   232  029F                     	;# 
   233  030C                     	;# 
   234  030D                     	;# 
   235  030E                     	;# 
   236  0311                     	;# 
   237  0311                     	;# 
   238  0312                     	;# 
   239  0313                     	;# 
   240  0314                     	;# 
   241  0315                     	;# 
   242  0315                     	;# 
   243  0316                     	;# 
   244  0317                     	;# 
   245  0318                     	;# 
   246  038C                     	;# 
   247  038D                     	;# 
   248  038E                     	;# 
   249  0391                     	;# 
   250  0392                     	;# 
   251  0393                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  0397                     	;# 
   256  0398                     	;# 
   257  0399                     	;# 
   258  039A                     	;# 
   259  039C                     	;# 
   260  039D                     	;# 
   261  039E                     	;# 
   262  039F                     	;# 
   263  040C                     	;# 
   264  040D                     	;# 
   265  040E                     	;# 
   266  0411                     	;# 
   267  0411                     	;# 
   268  0412                     	;# 
   269  0413                     	;# 
   270  0414                     	;# 
   271  0415                     	;# 
   272  0416                     	;# 
   273  0417                     	;# 
   274  0418                     	;# 
   275  0418                     	;# 
   276  0419                     	;# 
   277  041A                     	;# 
   278  041B                     	;# 
   279  041C                     	;# 
   280  041D                     	;# 
   281  041E                     	;# 
   282  041F                     	;# 
   283  048C                     	;# 
   284  048D                     	;# 
   285  048E                     	;# 
   286  0498                     	;# 
   287  0498                     	;# 
   288  0499                     	;# 
   289  049A                     	;# 
   290  049B                     	;# 
   291  049B                     	;# 
   292  049C                     	;# 
   293  049D                     	;# 
   294  049E                     	;# 
   295  049F                     	;# 
   296  0617                     	;# 
   297  0618                     	;# 
   298  0619                     	;# 
   299  0619                     	;# 
   300  061A                     	;# 
   301  061B                     	;# 
   302  061C                     	;# 
   303  061C                     	;# 
   304  061F                     	;# 
   305  0691                     	;# 
   306  0692                     	;# 
   307  0693                     	;# 
   308  0694                     	;# 
   309  0695                     	;# 
   310  0696                     	;# 
   311  0697                     	;# 
   312  0698                     	;# 
   313  0699                     	;# 
   314  0711                     	;# 
   315  0712                     	;# 
   316  0713                     	;# 
   317  0714                     	;# 
   318  0715                     	;# 
   319  0716                     	;# 
   320  0717                     	;# 
   321  0718                     	;# 
   322  0719                     	;# 
   323  0891                     	;# 
   324  0891                     	;# 
   325  0892                     	;# 
   326  0893                     	;# 
   327  0893                     	;# 
   328  0894                     	;# 
   329  0895                     	;# 
   330  0896                     	;# 
   331  089B                     	;# 
   332  0911                     	;# 
   333  0912                     	;# 
   334  0913                     	;# 
   335  0914                     	;# 
   336  0915                     	;# 
   337  0916                     	;# 
   338  0918                     	;# 
   339  0919                     	;# 
   340  091A                     	;# 
   341  091B                     	;# 
   342  091C                     	;# 
   343  091D                     	;# 
   344  091E                     	;# 
   345  091F                     	;# 
   346  0E0F                     	;# 
   347  0E10                     	;# 
   348  0E11                     	;# 
   349  0E12                     	;# 
   350  0E13                     	;# 
   351  0E14                     	;# 
   352  0E15                     	;# 
   353  0E16                     	;# 
   354  0E17                     	;# 
   355  0E18                     	;# 
   356  0E19                     	;# 
   357  0E1A                     	;# 
   358  0E1B                     	;# 
   359  0E1C                     	;# 
   360  0E1D                     	;# 
   361  0E1E                     	;# 
   362  0E1F                     	;# 
   363  0E20                     	;# 
   364  0E21                     	;# 
   365  0E22                     	;# 
   366  0E24                     	;# 
   367  0E25                     	;# 
   368  0E28                     	;# 
   369  0E29                     	;# 
   370  0E2A                     	;# 
   371  0E2B                     	;# 
   372  0E2C                     	;# 
   373  0E2D                     	;# 
   374  0E2E                     	;# 
   375  0E2F                     	;# 
   376  0E90                     	;# 
   377  0E91                     	;# 
   378  0E92                     	;# 
   379  0E94                     	;# 
   380  0E95                     	;# 
   381  0E9C                     	;# 
   382  0E9D                     	;# 
   383  0E9E                     	;# 
   384  0E9F                     	;# 
   385  0EA0                     	;# 
   386  0EA1                     	;# 
   387  0EA2                     	;# 
   388  0EA3                     	;# 
   389  0EA4                     	;# 
   390  0EA5                     	;# 
   391  0EA6                     	;# 
   392  0EA7                     	;# 
   393  0F0F                     	;# 
   394  0F10                     	;# 
   395  0F11                     	;# 
   396  0F12                     	;# 
   397  0F13                     	;# 
   398  0F14                     	;# 
   399  0F15                     	;# 
   400  0F16                     	;# 
   401  0F17                     	;# 
   402  0F18                     	;# 
   403  0F19                     	;# 
   404  0F1A                     	;# 
   405  0F1B                     	;# 
   406  0F1C                     	;# 
   407  0F1D                     	;# 
   408  0F1E                     	;# 
   409  0F1F                     	;# 
   410  0F20                     	;# 
   411  0F21                     	;# 
   412  0F22                     	;# 
   413  0F23                     	;# 
   414  0F24                     	;# 
   415  0F25                     	;# 
   416  0F26                     	;# 
   417  0F27                     	;# 
   418  0F28                     	;# 
   419  0F29                     	;# 
   420  0F2A                     	;# 
   421  0F2B                     	;# 
   422  0F2C                     	;# 
   423  0F2D                     	;# 
   424  0F2E                     	;# 
   425  0F2F                     	;# 
   426  0F30                     	;# 
   427  0F31                     	;# 
   428  0F32                     	;# 
   429  0F33                     	;# 
   430  0F34                     	;# 
   431  0F35                     	;# 
   432  0F36                     	;# 
   433  0F37                     	;# 
   434  0FE4                     	;# 
   435  0FE5                     	;# 
   436  0FE6                     	;# 
   437  0FE7                     	;# 
   438  0FE8                     	;# 
   439  0FE9                     	;# 
   440  0FEA                     	;# 
   441  0FEB                     	;# 
   442  0FED                     	;# 
   443  0FEE                     	;# 
   444  0FEF                     	;# 
   445  0000                     	;# 
   446  0001                     	;# 
   447  0002                     	;# 
   448  0003                     	;# 
   449  0004                     	;# 
   450  0005                     	;# 
   451  0006                     	;# 
   452  0007                     	;# 
   453  0008                     	;# 
   454  0009                     	;# 
   455  000A                     	;# 
   456  000B                     	;# 
   457  000C                     	;# 
   458  000D                     	;# 
   459  000E                     	;# 
   460  0010                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0014                     	;# 
   465  0015                     	;# 
   466  0016                     	;# 
   467  0017                     	;# 
   468  0018                     	;# 
   469  0019                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001C                     	;# 
   474  001D                     	;# 
   475  001E                     	;# 
   476  001F                     	;# 
   477  008C                     	;# 
   478  008D                     	;# 
   479  008E                     	;# 
   480  0090                     	;# 
   481  0091                     	;# 
   482  0092                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0097                     	;# 
   486  009B                     	;# 
   487  009B                     	;# 
   488  009C                     	;# 
   489  009D                     	;# 
   490  009E                     	;# 
   491  009F                     	;# 
   492  010C                     	;# 
   493  010D                     	;# 
   494  010E                     	;# 
   495  0111                     	;# 
   496  0112                     	;# 
   497  0113                     	;# 
   498  0114                     	;# 
   499  0115                     	;# 
   500  0116                     	;# 
   501  0117                     	;# 
   502  0118                     	;# 
   503  0119                     	;# 
   504  018C                     	;# 
   505  018D                     	;# 
   506  018E                     	;# 
   507  0197                     	;# 
   508  0199                     	;# 
   509  0199                     	;# 
   510  0199                     	;# 
   511  019A                     	;# 
   512  019A                     	;# 
   513  019A                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019C                     	;# 
   520  019C                     	;# 
   521  019C                     	;# 
   522  019D                     	;# 
   523  019D                     	;# 
   524  019D                     	;# 
   525  019E                     	;# 
   526  019E                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  019F                     	;# 
   533  020C                     	;# 
   534  020D                     	;# 
   535  020E                     	;# 
   536  0211                     	;# 
   537  0211                     	;# 
   538  0212                     	;# 
   539  0212                     	;# 
   540  0213                     	;# 
   541  0213                     	;# 
   542  0214                     	;# 
   543  0214                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0215                     	;# 
   548  0216                     	;# 
   549  0216                     	;# 
   550  0217                     	;# 
   551  0217                     	;# 
   552  0219                     	;# 
   553  021A                     	;# 
   554  021B                     	;# 
   555  021C                     	;# 
   556  021D                     	;# 
   557  021D                     	;# 
   558  021E                     	;# 
   559  021F                     	;# 
   560  028C                     	;# 
   561  028D                     	;# 
   562  028E                     	;# 
   563  0291                     	;# 
   564  0291                     	;# 
   565  0292                     	;# 
   566  0293                     	;# 
   567  0294                     	;# 
   568  0295                     	;# 
   569  0295                     	;# 
   570  0296                     	;# 
   571  0297                     	;# 
   572  0298                     	;# 
   573  029F                     	;# 
   574  030C                     	;# 
   575  030D                     	;# 
   576  030E                     	;# 
   577  0311                     	;# 
   578  0311                     	;# 
   579  0312                     	;# 
   580  0313                     	;# 
   581  0314                     	;# 
   582  0315                     	;# 
   583  0315                     	;# 
   584  0316                     	;# 
   585  0317                     	;# 
   586  0318                     	;# 
   587  038C                     	;# 
   588  038D                     	;# 
   589  038E                     	;# 
   590  0391                     	;# 
   591  0392                     	;# 
   592  0393                     	;# 
   593  0394                     	;# 
   594  0395                     	;# 
   595  0396                     	;# 
   596  0397                     	;# 
   597  0398                     	;# 
   598  0399                     	;# 
   599  039A                     	;# 
   600  039C                     	;# 
   601  039D                     	;# 
   602  039E                     	;# 
   603  039F                     	;# 
   604  040C                     	;# 
   605  040D                     	;# 
   606  040E                     	;# 
   607  0411                     	;# 
   608  0411                     	;# 
   609  0412                     	;# 
   610  0413                     	;# 
   611  0414                     	;# 
   612  0415                     	;# 
   613  0416                     	;# 
   614  0417                     	;# 
   615  0418                     	;# 
   616  0418                     	;# 
   617  0419                     	;# 
   618  041A                     	;# 
   619  041B                     	;# 
   620  041C                     	;# 
   621  041D                     	;# 
   622  041E                     	;# 
   623  041F                     	;# 
   624  048C                     	;# 
   625  048D                     	;# 
   626  048E                     	;# 
   627  0498                     	;# 
   628  0498                     	;# 
   629  0499                     	;# 
   630  049A                     	;# 
   631  049B                     	;# 
   632  049B                     	;# 
   633  049C                     	;# 
   634  049D                     	;# 
   635  049E                     	;# 
   636  049F                     	;# 
   637  0617                     	;# 
   638  0618                     	;# 
   639  0619                     	;# 
   640  0619                     	;# 
   641  061A                     	;# 
   642  061B                     	;# 
   643  061C                     	;# 
   644  061C                     	;# 
   645  061F                     	;# 
   646  0691                     	;# 
   647  0692                     	;# 
   648  0693                     	;# 
   649  0694                     	;# 
   650  0695                     	;# 
   651  0696                     	;# 
   652  0697                     	;# 
   653  0698                     	;# 
   654  0699                     	;# 
   655  0711                     	;# 
   656  0712                     	;# 
   657  0713                     	;# 
   658  0714                     	;# 
   659  0715                     	;# 
   660  0716                     	;# 
   661  0717                     	;# 
   662  0718                     	;# 
   663  0719                     	;# 
   664  0891                     	;# 
   665  0891                     	;# 
   666  0892                     	;# 
   667  0893                     	;# 
   668  0893                     	;# 
   669  0894                     	;# 
   670  0895                     	;# 
   671  0896                     	;# 
   672  089B                     	;# 
   673  0911                     	;# 
   674  0912                     	;# 
   675  0913                     	;# 
   676  0914                     	;# 
   677  0915                     	;# 
   678  0916                     	;# 
   679  0918                     	;# 
   680  0919                     	;# 
   681  091A                     	;# 
   682  091B                     	;# 
   683  091C                     	;# 
   684  091D                     	;# 
   685  091E                     	;# 
   686  091F                     	;# 
   687  0E0F                     	;# 
   688  0E10                     	;# 
   689  0E11                     	;# 
   690  0E12                     	;# 
   691  0E13                     	;# 
   692  0E14                     	;# 
   693  0E15                     	;# 
   694  0E16                     	;# 
   695  0E17                     	;# 
   696  0E18                     	;# 
   697  0E19                     	;# 
   698  0E1A                     	;# 
   699  0E1B                     	;# 
   700  0E1C                     	;# 
   701  0E1D                     	;# 
   702  0E1E                     	;# 
   703  0E1F                     	;# 
   704  0E20                     	;# 
   705  0E21                     	;# 
   706  0E22                     	;# 
   707  0E24                     	;# 
   708  0E25                     	;# 
   709  0E28                     	;# 
   710  0E29                     	;# 
   711  0E2A                     	;# 
   712  0E2B                     	;# 
   713  0E2C                     	;# 
   714  0E2D                     	;# 
   715  0E2E                     	;# 
   716  0E2F                     	;# 
   717  0E90                     	;# 
   718  0E91                     	;# 
   719  0E92                     	;# 
   720  0E94                     	;# 
   721  0E95                     	;# 
   722  0E9C                     	;# 
   723  0E9D                     	;# 
   724  0E9E                     	;# 
   725  0E9F                     	;# 
   726  0EA0                     	;# 
   727  0EA1                     	;# 
   728  0EA2                     	;# 
   729  0EA3                     	;# 
   730  0EA4                     	;# 
   731  0EA5                     	;# 
   732  0EA6                     	;# 
   733  0EA7                     	;# 
   734  0F0F                     	;# 
   735  0F10                     	;# 
   736  0F11                     	;# 
   737  0F12                     	;# 
   738  0F13                     	;# 
   739  0F14                     	;# 
   740  0F15                     	;# 
   741  0F16                     	;# 
   742  0F17                     	;# 
   743  0F18                     	;# 
   744  0F19                     	;# 
   745  0F1A                     	;# 
   746  0F1B                     	;# 
   747  0F1C                     	;# 
   748  0F1D                     	;# 
   749  0F1E                     	;# 
   750  0F1F                     	;# 
   751  0F20                     	;# 
   752  0F21                     	;# 
   753  0F22                     	;# 
   754  0F23                     	;# 
   755  0F24                     	;# 
   756  0F25                     	;# 
   757  0F26                     	;# 
   758  0F27                     	;# 
   759  0F28                     	;# 
   760  0F29                     	;# 
   761  0F2A                     	;# 
   762  0F2B                     	;# 
   763  0F2C                     	;# 
   764  0F2D                     	;# 
   765  0F2E                     	;# 
   766  0F2F                     	;# 
   767  0F30                     	;# 
   768  0F31                     	;# 
   769  0F32                     	;# 
   770  0F33                     	;# 
   771  0F34                     	;# 
   772  0F35                     	;# 
   773  0F36                     	;# 
   774  0F37                     	;# 
   775  0FE4                     	;# 
   776  0FE5                     	;# 
   777  0FE6                     	;# 
   778  0FE7                     	;# 
   779  0FE8                     	;# 
   780  0FE9                     	;# 
   781  0FEA                     	;# 
   782  0FEB                     	;# 
   783  0FED                     	;# 
   784  0FEE                     	;# 
   785  0FEF                     	;# 
   786  0000                     	;# 
   787  0001                     	;# 
   788  0002                     	;# 
   789  0003                     	;# 
   790  0004                     	;# 
   791  0005                     	;# 
   792  0006                     	;# 
   793  0007                     	;# 
   794  0008                     	;# 
   795  0009                     	;# 
   796  000A                     	;# 
   797  000B                     	;# 
   798  000C                     	;# 
   799  000D                     	;# 
   800  000E                     	;# 
   801  0010                     	;# 
   802  0011                     	;# 
   803  0012                     	;# 
   804  0013                     	;# 
   805  0014                     	;# 
   806  0015                     	;# 
   807  0016                     	;# 
   808  0017                     	;# 
   809  0018                     	;# 
   810  0019                     	;# 
   811  0019                     	;# 
   812  001A                     	;# 
   813  001B                     	;# 
   814  001C                     	;# 
   815  001D                     	;# 
   816  001E                     	;# 
   817  001F                     	;# 
   818  008C                     	;# 
   819  008D                     	;# 
   820  008E                     	;# 
   821  0090                     	;# 
   822  0091                     	;# 
   823  0092                     	;# 
   824  0093                     	;# 
   825  0094                     	;# 
   826  0097                     	;# 
   827  009B                     	;# 
   828  009B                     	;# 
   829  009C                     	;# 
   830  009D                     	;# 
   831  009E                     	;# 
   832  009F                     	;# 
   833  010C                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  0111                     	;# 
   837  0112                     	;# 
   838  0113                     	;# 
   839  0114                     	;# 
   840  0115                     	;# 
   841  0116                     	;# 
   842  0117                     	;# 
   843  0118                     	;# 
   844  0119                     	;# 
   845  018C                     	;# 
   846  018D                     	;# 
   847  018E                     	;# 
   848  0197                     	;# 
   849  0199                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  019A                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019D                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019E                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  019F                     	;# 
   874  020C                     	;# 
   875  020D                     	;# 
   876  020E                     	;# 
   877  0211                     	;# 
   878  0211                     	;# 
   879  0212                     	;# 
   880  0212                     	;# 
   881  0213                     	;# 
   882  0213                     	;# 
   883  0214                     	;# 
   884  0214                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0216                     	;# 
   890  0216                     	;# 
   891  0217                     	;# 
   892  0217                     	;# 
   893  0219                     	;# 
   894  021A                     	;# 
   895  021B                     	;# 
   896  021C                     	;# 
   897  021D                     	;# 
   898  021D                     	;# 
   899  021E                     	;# 
   900  021F                     	;# 
   901  028C                     	;# 
   902  028D                     	;# 
   903  028E                     	;# 
   904  0291                     	;# 
   905  0291                     	;# 
   906  0292                     	;# 
   907  0293                     	;# 
   908  0294                     	;# 
   909  0295                     	;# 
   910  0295                     	;# 
   911  0296                     	;# 
   912  0297                     	;# 
   913  0298                     	;# 
   914  029F                     	;# 
   915  030C                     	;# 
   916  030D                     	;# 
   917  030E                     	;# 
   918  0311                     	;# 
   919  0311                     	;# 
   920  0312                     	;# 
   921  0313                     	;# 
   922  0314                     	;# 
   923  0315                     	;# 
   924  0315                     	;# 
   925  0316                     	;# 
   926  0317                     	;# 
   927  0318                     	;# 
   928  038C                     	;# 
   929  038D                     	;# 
   930  038E                     	;# 
   931  0391                     	;# 
   932  0392                     	;# 
   933  0393                     	;# 
   934  0394                     	;# 
   935  0395                     	;# 
   936  0396                     	;# 
   937  0397                     	;# 
   938  0398                     	;# 
   939  0399                     	;# 
   940  039A                     	;# 
   941  039C                     	;# 
   942  039D                     	;# 
   943  039E                     	;# 
   944  039F                     	;# 
   945  040C                     	;# 
   946  040D                     	;# 
   947  040E                     	;# 
   948  0411                     	;# 
   949  0411                     	;# 
   950  0412                     	;# 
   951  0413                     	;# 
   952  0414                     	;# 
   953  0415                     	;# 
   954  0416                     	;# 
   955  0417                     	;# 
   956  0418                     	;# 
   957  0418                     	;# 
   958  0419                     	;# 
   959  041A                     	;# 
   960  041B                     	;# 
   961  041C                     	;# 
   962  041D                     	;# 
   963  041E                     	;# 
   964  041F                     	;# 
   965  048C                     	;# 
   966  048D                     	;# 
   967  048E                     	;# 
   968  0498                     	;# 
   969  0498                     	;# 
   970  0499                     	;# 
   971  049A                     	;# 
   972  049B                     	;# 
   973  049B                     	;# 
   974  049C                     	;# 
   975  049D                     	;# 
   976  049E                     	;# 
   977  049F                     	;# 
   978  0617                     	;# 
   979  0618                     	;# 
   980  0619                     	;# 
   981  0619                     	;# 
   982  061A                     	;# 
   983  061B                     	;# 
   984  061C                     	;# 
   985  061C                     	;# 
   986  061F                     	;# 
   987  0691                     	;# 
   988  0692                     	;# 
   989  0693                     	;# 
   990  0694                     	;# 
   991  0695                     	;# 
   992  0696                     	;# 
   993  0697                     	;# 
   994  0698                     	;# 
   995  0699                     	;# 
   996  0711                     	;# 
   997  0712                     	;# 
   998  0713                     	;# 
   999  0714                     	;# 
  1000  0715                     	;# 
  1001  0716                     	;# 
  1002  0717                     	;# 
  1003  0718                     	;# 
  1004  0719                     	;# 
  1005  0891                     	;# 
  1006  0891                     	;# 
  1007  0892                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0894                     	;# 
  1011  0895                     	;# 
  1012  0896                     	;# 
  1013  089B                     	;# 
  1014  0911                     	;# 
  1015  0912                     	;# 
  1016  0913                     	;# 
  1017  0914                     	;# 
  1018  0915                     	;# 
  1019  0916                     	;# 
  1020  0918                     	;# 
  1021  0919                     	;# 
  1022  091A                     	;# 
  1023  091B                     	;# 
  1024  091C                     	;# 
  1025  091D                     	;# 
  1026  091E                     	;# 
  1027  091F                     	;# 
  1028  0E0F                     	;# 
  1029  0E10                     	;# 
  1030  0E11                     	;# 
  1031  0E12                     	;# 
  1032  0E13                     	;# 
  1033  0E14                     	;# 
  1034  0E15                     	;# 
  1035  0E16                     	;# 
  1036  0E17                     	;# 
  1037  0E18                     	;# 
  1038  0E19                     	;# 
  1039  0E1A                     	;# 
  1040  0E1B                     	;# 
  1041  0E1C                     	;# 
  1042  0E1D                     	;# 
  1043  0E1E                     	;# 
  1044  0E1F                     	;# 
  1045  0E20                     	;# 
  1046  0E21                     	;# 
  1047  0E22                     	;# 
  1048  0E24                     	;# 
  1049  0E25                     	;# 
  1050  0E28                     	;# 
  1051  0E29                     	;# 
  1052  0E2A                     	;# 
  1053  0E2B                     	;# 
  1054  0E2C                     	;# 
  1055  0E2D                     	;# 
  1056  0E2E                     	;# 
  1057  0E2F                     	;# 
  1058  0E90                     	;# 
  1059  0E91                     	;# 
  1060  0E92                     	;# 
  1061  0E94                     	;# 
  1062  0E95                     	;# 
  1063  0E9C                     	;# 
  1064  0E9D                     	;# 
  1065  0E9E                     	;# 
  1066  0E9F                     	;# 
  1067  0EA0                     	;# 
  1068  0EA1                     	;# 
  1069  0EA2                     	;# 
  1070  0EA3                     	;# 
  1071  0EA4                     	;# 
  1072  0EA5                     	;# 
  1073  0EA6                     	;# 
  1074  0EA7                     	;# 
  1075  0F0F                     	;# 
  1076  0F10                     	;# 
  1077  0F11                     	;# 
  1078  0F12                     	;# 
  1079  0F13                     	;# 
  1080  0F14                     	;# 
  1081  0F15                     	;# 
  1082  0F16                     	;# 
  1083  0F17                     	;# 
  1084  0F18                     	;# 
  1085  0F19                     	;# 
  1086  0F1A                     	;# 
  1087  0F1B                     	;# 
  1088  0F1C                     	;# 
  1089  0F1D                     	;# 
  1090  0F1E                     	;# 
  1091  0F1F                     	;# 
  1092  0F20                     	;# 
  1093  0F21                     	;# 
  1094  0F22                     	;# 
  1095  0F23                     	;# 
  1096  0F24                     	;# 
  1097  0F25                     	;# 
  1098  0F26                     	;# 
  1099  0F27                     	;# 
  1100  0F28                     	;# 
  1101  0F29                     	;# 
  1102  0F2A                     	;# 
  1103  0F2B                     	;# 
  1104  0F2C                     	;# 
  1105  0F2D                     	;# 
  1106  0F2E                     	;# 
  1107  0F2F                     	;# 
  1108  0F30                     	;# 
  1109  0F31                     	;# 
  1110  0F32                     	;# 
  1111  0F33                     	;# 
  1112  0F34                     	;# 
  1113  0F35                     	;# 
  1114  0F36                     	;# 
  1115  0F37                     	;# 
  1116  0FE4                     	;# 
  1117  0FE5                     	;# 
  1118  0FE6                     	;# 
  1119  0FE7                     	;# 
  1120  0FE8                     	;# 
  1121  0FE9                     	;# 
  1122  0FEA                     	;# 
  1123  0FEB                     	;# 
  1124  0FED                     	;# 
  1125  0FEE                     	;# 
  1126  0FEF                     	;# 
  1127  0000                     	;# 
  1128  0001                     	;# 
  1129  0002                     	;# 
  1130  0003                     	;# 
  1131  0004                     	;# 
  1132  0005                     	;# 
  1133  0006                     	;# 
  1134  0007                     	;# 
  1135  0008                     	;# 
  1136  0009                     	;# 
  1137  000A                     	;# 
  1138  000B                     	;# 
  1139  000C                     	;# 
  1140  000D                     	;# 
  1141  000E                     	;# 
  1142  0010                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0014                     	;# 
  1147  0015                     	;# 
  1148  0016                     	;# 
  1149  0017                     	;# 
  1150  0018                     	;# 
  1151  0019                     	;# 
  1152  0019                     	;# 
  1153  001A                     	;# 
  1154  001B                     	;# 
  1155  001C                     	;# 
  1156  001D                     	;# 
  1157  001E                     	;# 
  1158  001F                     	;# 
  1159  008C                     	;# 
  1160  008D                     	;# 
  1161  008E                     	;# 
  1162  0090                     	;# 
  1163  0091                     	;# 
  1164  0092                     	;# 
  1165  0093                     	;# 
  1166  0094                     	;# 
  1167  0097                     	;# 
  1168  009B                     	;# 
  1169  009B                     	;# 
  1170  009C                     	;# 
  1171  009D                     	;# 
  1172  009E                     	;# 
  1173  009F                     	;# 
  1174  010C                     	;# 
  1175  010D                     	;# 
  1176  010E                     	;# 
  1177  0111                     	;# 
  1178  0112                     	;# 
  1179  0113                     	;# 
  1180  0114                     	;# 
  1181  0115                     	;# 
  1182  0116                     	;# 
  1183  0117                     	;# 
  1184  0118                     	;# 
  1185  0119                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0197                     	;# 
  1190  0199                     	;# 
  1191  0199                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019A                     	;# 
  1195  019A                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019C                     	;# 
  1202  019C                     	;# 
  1203  019C                     	;# 
  1204  019D                     	;# 
  1205  019D                     	;# 
  1206  019D                     	;# 
  1207  019E                     	;# 
  1208  019E                     	;# 
  1209  019E                     	;# 
  1210  019F                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  019F                     	;# 
  1214  019F                     	;# 
  1215  020C                     	;# 
  1216  020D                     	;# 
  1217  020E                     	;# 
  1218  0211                     	;# 
  1219  0211                     	;# 
  1220  0212                     	;# 
  1221  0212                     	;# 
  1222  0213                     	;# 
  1223  0213                     	;# 
  1224  0214                     	;# 
  1225  0214                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0215                     	;# 
  1230  0216                     	;# 
  1231  0216                     	;# 
  1232  0217                     	;# 
  1233  0217                     	;# 
  1234  0219                     	;# 
  1235  021A                     	;# 
  1236  021B                     	;# 
  1237  021C                     	;# 
  1238  021D                     	;# 
  1239  021D                     	;# 
  1240  021E                     	;# 
  1241  021F                     	;# 
  1242  028C                     	;# 
  1243  028D                     	;# 
  1244  028E                     	;# 
  1245  0291                     	;# 
  1246  0291                     	;# 
  1247  0292                     	;# 
  1248  0293                     	;# 
  1249  0294                     	;# 
  1250  0295                     	;# 
  1251  0295                     	;# 
  1252  0296                     	;# 
  1253  0297                     	;# 
  1254  0298                     	;# 
  1255  029F                     	;# 
  1256  030C                     	;# 
  1257  030D                     	;# 
  1258  030E                     	;# 
  1259  0311                     	;# 
  1260  0311                     	;# 
  1261  0312                     	;# 
  1262  0313                     	;# 
  1263  0314                     	;# 
  1264  0315                     	;# 
  1265  0315                     	;# 
  1266  0316                     	;# 
  1267  0317                     	;# 
  1268  0318                     	;# 
  1269  038C                     	;# 
  1270  038D                     	;# 
  1271  038E                     	;# 
  1272  0391                     	;# 
  1273  0392                     	;# 
  1274  0393                     	;# 
  1275  0394                     	;# 
  1276  0395                     	;# 
  1277  0396                     	;# 
  1278  0397                     	;# 
  1279  0398                     	;# 
  1280  0399                     	;# 
  1281  039A                     	;# 
  1282  039C                     	;# 
  1283  039D                     	;# 
  1284  039E                     	;# 
  1285  039F                     	;# 
  1286  040C                     	;# 
  1287  040D                     	;# 
  1288  040E                     	;# 
  1289  0411                     	;# 
  1290  0411                     	;# 
  1291  0412                     	;# 
  1292  0413                     	;# 
  1293  0414                     	;# 
  1294  0415                     	;# 
  1295  0416                     	;# 
  1296  0417                     	;# 
  1297  0418                     	;# 
  1298  0418                     	;# 
  1299  0419                     	;# 
  1300  041A                     	;# 
  1301  041B                     	;# 
  1302  041C                     	;# 
  1303  041D                     	;# 
  1304  041E                     	;# 
  1305  041F                     	;# 
  1306  048C                     	;# 
  1307  048D                     	;# 
  1308  048E                     	;# 
  1309  0498                     	;# 
  1310  0498                     	;# 
  1311  0499                     	;# 
  1312  049A                     	;# 
  1313  049B                     	;# 
  1314  049B                     	;# 
  1315  049C                     	;# 
  1316  049D                     	;# 
  1317  049E                     	;# 
  1318  049F                     	;# 
  1319  0617                     	;# 
  1320  0618                     	;# 
  1321  0619                     	;# 
  1322  0619                     	;# 
  1323  061A                     	;# 
  1324  061B                     	;# 
  1325  061C                     	;# 
  1326  061C                     	;# 
  1327  061F                     	;# 
  1328  0691                     	;# 
  1329  0692                     	;# 
  1330  0693                     	;# 
  1331  0694                     	;# 
  1332  0695                     	;# 
  1333  0696                     	;# 
  1334  0697                     	;# 
  1335  0698                     	;# 
  1336  0699                     	;# 
  1337  0711                     	;# 
  1338  0712                     	;# 
  1339  0713                     	;# 
  1340  0714                     	;# 
  1341  0715                     	;# 
  1342  0716                     	;# 
  1343  0717                     	;# 
  1344  0718                     	;# 
  1345  0719                     	;# 
  1346  0891                     	;# 
  1347  0891                     	;# 
  1348  0892                     	;# 
  1349  0893                     	;# 
  1350  0893                     	;# 
  1351  0894                     	;# 
  1352  0895                     	;# 
  1353  0896                     	;# 
  1354  089B                     	;# 
  1355  0911                     	;# 
  1356  0912                     	;# 
  1357  0913                     	;# 
  1358  0914                     	;# 
  1359  0915                     	;# 
  1360  0916                     	;# 
  1361  0918                     	;# 
  1362  0919                     	;# 
  1363  091A                     	;# 
  1364  091B                     	;# 
  1365  091C                     	;# 
  1366  091D                     	;# 
  1367  091E                     	;# 
  1368  091F                     	;# 
  1369  0E0F                     	;# 
  1370  0E10                     	;# 
  1371  0E11                     	;# 
  1372  0E12                     	;# 
  1373  0E13                     	;# 
  1374  0E14                     	;# 
  1375  0E15                     	;# 
  1376  0E16                     	;# 
  1377  0E17                     	;# 
  1378  0E18                     	;# 
  1379  0E19                     	;# 
  1380  0E1A                     	;# 
  1381  0E1B                     	;# 
  1382  0E1C                     	;# 
  1383  0E1D                     	;# 
  1384  0E1E                     	;# 
  1385  0E1F                     	;# 
  1386  0E20                     	;# 
  1387  0E21                     	;# 
  1388  0E22                     	;# 
  1389  0E24                     	;# 
  1390  0E25                     	;# 
  1391  0E28                     	;# 
  1392  0E29                     	;# 
  1393  0E2A                     	;# 
  1394  0E2B                     	;# 
  1395  0E2C                     	;# 
  1396  0E2D                     	;# 
  1397  0E2E                     	;# 
  1398  0E2F                     	;# 
  1399  0E90                     	;# 
  1400  0E91                     	;# 
  1401  0E92                     	;# 
  1402  0E94                     	;# 
  1403  0E95                     	;# 
  1404  0E9C                     	;# 
  1405  0E9D                     	;# 
  1406  0E9E                     	;# 
  1407  0E9F                     	;# 
  1408  0EA0                     	;# 
  1409  0EA1                     	;# 
  1410  0EA2                     	;# 
  1411  0EA3                     	;# 
  1412  0EA4                     	;# 
  1413  0EA5                     	;# 
  1414  0EA6                     	;# 
  1415  0EA7                     	;# 
  1416  0F0F                     	;# 
  1417  0F10                     	;# 
  1418  0F11                     	;# 
  1419  0F12                     	;# 
  1420  0F13                     	;# 
  1421  0F14                     	;# 
  1422  0F15                     	;# 
  1423  0F16                     	;# 
  1424  0F17                     	;# 
  1425  0F18                     	;# 
  1426  0F19                     	;# 
  1427  0F1A                     	;# 
  1428  0F1B                     	;# 
  1429  0F1C                     	;# 
  1430  0F1D                     	;# 
  1431  0F1E                     	;# 
  1432  0F1F                     	;# 
  1433  0F20                     	;# 
  1434  0F21                     	;# 
  1435  0F22                     	;# 
  1436  0F23                     	;# 
  1437  0F24                     	;# 
  1438  0F25                     	;# 
  1439  0F26                     	;# 
  1440  0F27                     	;# 
  1441  0F28                     	;# 
  1442  0F29                     	;# 
  1443  0F2A                     	;# 
  1444  0F2B                     	;# 
  1445  0F2C                     	;# 
  1446  0F2D                     	;# 
  1447  0F2E                     	;# 
  1448  0F2F                     	;# 
  1449  0F30                     	;# 
  1450  0F31                     	;# 
  1451  0F32                     	;# 
  1452  0F33                     	;# 
  1453  0F34                     	;# 
  1454  0F35                     	;# 
  1455  0F36                     	;# 
  1456  0F37                     	;# 
  1457  0FE4                     	;# 
  1458  0FE5                     	;# 
  1459  0FE6                     	;# 
  1460  0FE7                     	;# 
  1461  0FE8                     	;# 
  1462  0FE9                     	;# 
  1463  0FEA                     	;# 
  1464  0FEB                     	;# 
  1465  0FED                     	;# 
  1466  0FEE                     	;# 
  1467  0FEF                     	;# 
  1468  0000                     	;# 
  1469  0001                     	;# 
  1470  0002                     	;# 
  1471  0003                     	;# 
  1472  0004                     	;# 
  1473  0005                     	;# 
  1474  0006                     	;# 
  1475  0007                     	;# 
  1476  0008                     	;# 
  1477  0009                     	;# 
  1478  000A                     	;# 
  1479  000B                     	;# 
  1480  000C                     	;# 
  1481  000D                     	;# 
  1482  000E                     	;# 
  1483  0010                     	;# 
  1484  0011                     	;# 
  1485  0012                     	;# 
  1486  0013                     	;# 
  1487  0014                     	;# 
  1488  0015                     	;# 
  1489  0016                     	;# 
  1490  0017                     	;# 
  1491  0018                     	;# 
  1492  0019                     	;# 
  1493  0019                     	;# 
  1494  001A                     	;# 
  1495  001B                     	;# 
  1496  001C                     	;# 
  1497  001D                     	;# 
  1498  001E                     	;# 
  1499  001F                     	;# 
  1500  008C                     	;# 
  1501  008D                     	;# 
  1502  008E                     	;# 
  1503  0090                     	;# 
  1504  0091                     	;# 
  1505  0092                     	;# 
  1506  0093                     	;# 
  1507  0094                     	;# 
  1508  0097                     	;# 
  1509  009B                     	;# 
  1510  009B                     	;# 
  1511  009C                     	;# 
  1512  009D                     	;# 
  1513  009E                     	;# 
  1514  009F                     	;# 
  1515  010C                     	;# 
  1516  010D                     	;# 
  1517  010E                     	;# 
  1518  0111                     	;# 
  1519  0112                     	;# 
  1520  0113                     	;# 
  1521  0114                     	;# 
  1522  0115                     	;# 
  1523  0116                     	;# 
  1524  0117                     	;# 
  1525  0118                     	;# 
  1526  0119                     	;# 
  1527  018C                     	;# 
  1528  018D                     	;# 
  1529  018E                     	;# 
  1530  0197                     	;# 
  1531  0199                     	;# 
  1532  0199                     	;# 
  1533  0199                     	;# 
  1534  019A                     	;# 
  1535  019A                     	;# 
  1536  019A                     	;# 
  1537  019B                     	;# 
  1538  019B                     	;# 
  1539  019B                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019C                     	;# 
  1543  019C                     	;# 
  1544  019C                     	;# 
  1545  019D                     	;# 
  1546  019D                     	;# 
  1547  019D                     	;# 
  1548  019E                     	;# 
  1549  019E                     	;# 
  1550  019E                     	;# 
  1551  019F                     	;# 
  1552  019F                     	;# 
  1553  019F                     	;# 
  1554  019F                     	;# 
  1555  019F                     	;# 
  1556  020C                     	;# 
  1557  020D                     	;# 
  1558  020E                     	;# 
  1559  0211                     	;# 
  1560  0211                     	;# 
  1561  0212                     	;# 
  1562  0212                     	;# 
  1563  0213                     	;# 
  1564  0213                     	;# 
  1565  0214                     	;# 
  1566  0214                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0216                     	;# 
  1572  0216                     	;# 
  1573  0217                     	;# 
  1574  0217                     	;# 
  1575  0219                     	;# 
  1576  021A                     	;# 
  1577  021B                     	;# 
  1578  021C                     	;# 
  1579  021D                     	;# 
  1580  021D                     	;# 
  1581  021E                     	;# 
  1582  021F                     	;# 
  1583  028C                     	;# 
  1584  028D                     	;# 
  1585  028E                     	;# 
  1586  0291                     	;# 
  1587  0291                     	;# 
  1588  0292                     	;# 
  1589  0293                     	;# 
  1590  0294                     	;# 
  1591  0295                     	;# 
  1592  0295                     	;# 
  1593  0296                     	;# 
  1594  0297                     	;# 
  1595  0298                     	;# 
  1596  029F                     	;# 
  1597  030C                     	;# 
  1598  030D                     	;# 
  1599  030E                     	;# 
  1600  0311                     	;# 
  1601  0311                     	;# 
  1602  0312                     	;# 
  1603  0313                     	;# 
  1604  0314                     	;# 
  1605  0315                     	;# 
  1606  0315                     	;# 
  1607  0316                     	;# 
  1608  0317                     	;# 
  1609  0318                     	;# 
  1610  038C                     	;# 
  1611  038D                     	;# 
  1612  038E                     	;# 
  1613  0391                     	;# 
  1614  0392                     	;# 
  1615  0393                     	;# 
  1616  0394                     	;# 
  1617  0395                     	;# 
  1618  0396                     	;# 
  1619  0397                     	;# 
  1620  0398                     	;# 
  1621  0399                     	;# 
  1622  039A                     	;# 
  1623  039C                     	;# 
  1624  039D                     	;# 
  1625  039E                     	;# 
  1626  039F                     	;# 
  1627  040C                     	;# 
  1628  040D                     	;# 
  1629  040E                     	;# 
  1630  0411                     	;# 
  1631  0411                     	;# 
  1632  0412                     	;# 
  1633  0413                     	;# 
  1634  0414                     	;# 
  1635  0415                     	;# 
  1636  0416                     	;# 
  1637  0417                     	;# 
  1638  0418                     	;# 
  1639  0418                     	;# 
  1640  0419                     	;# 
  1641  041A                     	;# 
  1642  041B                     	;# 
  1643  041C                     	;# 
  1644  041D                     	;# 
  1645  041E                     	;# 
  1646  041F                     	;# 
  1647  048C                     	;# 
  1648  048D                     	;# 
  1649  048E                     	;# 
  1650  0498                     	;# 
  1651  0498                     	;# 
  1652  0499                     	;# 
  1653  049A                     	;# 
  1654  049B                     	;# 
  1655  049B                     	;# 
  1656  049C                     	;# 
  1657  049D                     	;# 
  1658  049E                     	;# 
  1659  049F                     	;# 
  1660  0617                     	;# 
  1661  0618                     	;# 
  1662  0619                     	;# 
  1663  0619                     	;# 
  1664  061A                     	;# 
  1665  061B                     	;# 
  1666  061C                     	;# 
  1667  061C                     	;# 
  1668  061F                     	;# 
  1669  0691                     	;# 
  1670  0692                     	;# 
  1671  0693                     	;# 
  1672  0694                     	;# 
  1673  0695                     	;# 
  1674  0696                     	;# 
  1675  0697                     	;# 
  1676  0698                     	;# 
  1677  0699                     	;# 
  1678  0711                     	;# 
  1679  0712                     	;# 
  1680  0713                     	;# 
  1681  0714                     	;# 
  1682  0715                     	;# 
  1683  0716                     	;# 
  1684  0717                     	;# 
  1685  0718                     	;# 
  1686  0719                     	;# 
  1687  0891                     	;# 
  1688  0891                     	;# 
  1689  0892                     	;# 
  1690  0893                     	;# 
  1691  0893                     	;# 
  1692  0894                     	;# 
  1693  0895                     	;# 
  1694  0896                     	;# 
  1695  089B                     	;# 
  1696  0911                     	;# 
  1697  0912                     	;# 
  1698  0913                     	;# 
  1699  0914                     	;# 
  1700  0915                     	;# 
  1701  0916                     	;# 
  1702  0918                     	;# 
  1703  0919                     	;# 
  1704  091A                     	;# 
  1705  091B                     	;# 
  1706  091C                     	;# 
  1707  091D                     	;# 
  1708  091E                     	;# 
  1709  091F                     	;# 
  1710  0E0F                     	;# 
  1711  0E10                     	;# 
  1712  0E11                     	;# 
  1713  0E12                     	;# 
  1714  0E13                     	;# 
  1715  0E14                     	;# 
  1716  0E15                     	;# 
  1717  0E16                     	;# 
  1718  0E17                     	;# 
  1719  0E18                     	;# 
  1720  0E19                     	;# 
  1721  0E1A                     	;# 
  1722  0E1B                     	;# 
  1723  0E1C                     	;# 
  1724  0E1D                     	;# 
  1725  0E1E                     	;# 
  1726  0E1F                     	;# 
  1727  0E20                     	;# 
  1728  0E21                     	;# 
  1729  0E22                     	;# 
  1730  0E24                     	;# 
  1731  0E25                     	;# 
  1732  0E28                     	;# 
  1733  0E29                     	;# 
  1734  0E2A                     	;# 
  1735  0E2B                     	;# 
  1736  0E2C                     	;# 
  1737  0E2D                     	;# 
  1738  0E2E                     	;# 
  1739  0E2F                     	;# 
  1740  0E90                     	;# 
  1741  0E91                     	;# 
  1742  0E92                     	;# 
  1743  0E94                     	;# 
  1744  0E95                     	;# 
  1745  0E9C                     	;# 
  1746  0E9D                     	;# 
  1747  0E9E                     	;# 
  1748  0E9F                     	;# 
  1749  0EA0                     	;# 
  1750  0EA1                     	;# 
  1751  0EA2                     	;# 
  1752  0EA3                     	;# 
  1753  0EA4                     	;# 
  1754  0EA5                     	;# 
  1755  0EA6                     	;# 
  1756  0EA7                     	;# 
  1757  0F0F                     	;# 
  1758  0F10                     	;# 
  1759  0F11                     	;# 
  1760  0F12                     	;# 
  1761  0F13                     	;# 
  1762  0F14                     	;# 
  1763  0F15                     	;# 
  1764  0F16                     	;# 
  1765  0F17                     	;# 
  1766  0F18                     	;# 
  1767  0F19                     	;# 
  1768  0F1A                     	;# 
  1769  0F1B                     	;# 
  1770  0F1C                     	;# 
  1771  0F1D                     	;# 
  1772  0F1E                     	;# 
  1773  0F1F                     	;# 
  1774  0F20                     	;# 
  1775  0F21                     	;# 
  1776  0F22                     	;# 
  1777  0F23                     	;# 
  1778  0F24                     	;# 
  1779  0F25                     	;# 
  1780  0F26                     	;# 
  1781  0F27                     	;# 
  1782  0F28                     	;# 
  1783  0F29                     	;# 
  1784  0F2A                     	;# 
  1785  0F2B                     	;# 
  1786  0F2C                     	;# 
  1787  0F2D                     	;# 
  1788  0F2E                     	;# 
  1789  0F2F                     	;# 
  1790  0F30                     	;# 
  1791  0F31                     	;# 
  1792  0F32                     	;# 
  1793  0F33                     	;# 
  1794  0F34                     	;# 
  1795  0F35                     	;# 
  1796  0F36                     	;# 
  1797  0F37                     	;# 
  1798  0FE4                     	;# 
  1799  0FE5                     	;# 
  1800  0FE6                     	;# 
  1801  0FE7                     	;# 
  1802  0FE8                     	;# 
  1803  0FE9                     	;# 
  1804  0FEA                     	;# 
  1805  0FEB                     	;# 
  1806  0FED                     	;# 
  1807  0FEE                     	;# 
  1808  0FEF                     	;# 
  1809  0000                     	;# 
  1810  0001                     	;# 
  1811  0002                     	;# 
  1812  0003                     	;# 
  1813  0004                     	;# 
  1814  0005                     	;# 
  1815  0006                     	;# 
  1816  0007                     	;# 
  1817  0008                     	;# 
  1818  0009                     	;# 
  1819  000A                     	;# 
  1820  000B                     	;# 
  1821  000C                     	;# 
  1822  000D                     	;# 
  1823  000E                     	;# 
  1824  0010                     	;# 
  1825  0011                     	;# 
  1826  0012                     	;# 
  1827  0013                     	;# 
  1828  0014                     	;# 
  1829  0015                     	;# 
  1830  0016                     	;# 
  1831  0017                     	;# 
  1832  0018                     	;# 
  1833  0019                     	;# 
  1834  0019                     	;# 
  1835  001A                     	;# 
  1836  001B                     	;# 
  1837  001C                     	;# 
  1838  001D                     	;# 
  1839  001E                     	;# 
  1840  001F                     	;# 
  1841  008C                     	;# 
  1842  008D                     	;# 
  1843  008E                     	;# 
  1844  0090                     	;# 
  1845  0091                     	;# 
  1846  0092                     	;# 
  1847  0093                     	;# 
  1848  0094                     	;# 
  1849  0097                     	;# 
  1850  009B                     	;# 
  1851  009B                     	;# 
  1852  009C                     	;# 
  1853  009D                     	;# 
  1854  009E                     	;# 
  1855  009F                     	;# 
  1856  010C                     	;# 
  1857  010D                     	;# 
  1858  010E                     	;# 
  1859  0111                     	;# 
  1860  0112                     	;# 
  1861  0113                     	;# 
  1862  0114                     	;# 
  1863  0115                     	;# 
  1864  0116                     	;# 
  1865  0117                     	;# 
  1866  0118                     	;# 
  1867  0119                     	;# 
  1868  018C                     	;# 
  1869  018D                     	;# 
  1870  018E                     	;# 
  1871  0197                     	;# 
  1872  0199                     	;# 
  1873  0199                     	;# 
  1874  0199                     	;# 
  1875  019A                     	;# 
  1876  019A                     	;# 
  1877  019A                     	;# 
  1878  019B                     	;# 
  1879  019B                     	;# 
  1880  019B                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019C                     	;# 
  1884  019C                     	;# 
  1885  019C                     	;# 
  1886  019D                     	;# 
  1887  019D                     	;# 
  1888  019D                     	;# 
  1889  019E                     	;# 
  1890  019E                     	;# 
  1891  019E                     	;# 
  1892  019F                     	;# 
  1893  019F                     	;# 
  1894  019F                     	;# 
  1895  019F                     	;# 
  1896  019F                     	;# 
  1897  020C                     	;# 
  1898  020D                     	;# 
  1899  020E                     	;# 
  1900  0211                     	;# 
  1901  0211                     	;# 
  1902  0212                     	;# 
  1903  0212                     	;# 
  1904  0213                     	;# 
  1905  0213                     	;# 
  1906  0214                     	;# 
  1907  0214                     	;# 
  1908  0215                     	;# 
  1909  0215                     	;# 
  1910  0215                     	;# 
  1911  0215                     	;# 
  1912  0216                     	;# 
  1913  0216                     	;# 
  1914  0217                     	;# 
  1915  0217                     	;# 
  1916  0219                     	;# 
  1917  021A                     	;# 
  1918  021B                     	;# 
  1919  021C                     	;# 
  1920  021D                     	;# 
  1921  021D                     	;# 
  1922  021E                     	;# 
  1923  021F                     	;# 
  1924  028C                     	;# 
  1925  028D                     	;# 
  1926  028E                     	;# 
  1927  0291                     	;# 
  1928  0291                     	;# 
  1929  0292                     	;# 
  1930  0293                     	;# 
  1931  0294                     	;# 
  1932  0295                     	;# 
  1933  0295                     	;# 
  1934  0296                     	;# 
  1935  0297                     	;# 
  1936  0298                     	;# 
  1937  029F                     	;# 
  1938  030C                     	;# 
  1939  030D                     	;# 
  1940  030E                     	;# 
  1941  0311                     	;# 
  1942  0311                     	;# 
  1943  0312                     	;# 
  1944  0313                     	;# 
  1945  0314                     	;# 
  1946  0315                     	;# 
  1947  0315                     	;# 
  1948  0316                     	;# 
  1949  0317                     	;# 
  1950  0318                     	;# 
  1951  038C                     	;# 
  1952  038D                     	;# 
  1953  038E                     	;# 
  1954  0391                     	;# 
  1955  0392                     	;# 
  1956  0393                     	;# 
  1957  0394                     	;# 
  1958  0395                     	;# 
  1959  0396                     	;# 
  1960  0397                     	;# 
  1961  0398                     	;# 
  1962  0399                     	;# 
  1963  039A                     	;# 
  1964  039C                     	;# 
  1965  039D                     	;# 
  1966  039E                     	;# 
  1967  039F                     	;# 
  1968  040C                     	;# 
  1969  040D                     	;# 
  1970  040E                     	;# 
  1971  0411                     	;# 
  1972  0411                     	;# 
  1973  0412                     	;# 
  1974  0413                     	;# 
  1975  0414                     	;# 
  1976  0415                     	;# 
  1977  0416                     	;# 
  1978  0417                     	;# 
  1979  0418                     	;# 
  1980  0418                     	;# 
  1981  0419                     	;# 
  1982  041A                     	;# 
  1983  041B                     	;# 
  1984  041C                     	;# 
  1985  041D                     	;# 
  1986  041E                     	;# 
  1987  041F                     	;# 
  1988  048C                     	;# 
  1989  048D                     	;# 
  1990  048E                     	;# 
  1991  0498                     	;# 
  1992  0498                     	;# 
  1993  0499                     	;# 
  1994  049A                     	;# 
  1995  049B                     	;# 
  1996  049B                     	;# 
  1997  049C                     	;# 
  1998  049D                     	;# 
  1999  049E                     	;# 
  2000  049F                     	;# 
  2001  0617                     	;# 
  2002  0618                     	;# 
  2003  0619                     	;# 
  2004  0619                     	;# 
  2005  061A                     	;# 
  2006  061B                     	;# 
  2007  061C                     	;# 
  2008  061C                     	;# 
  2009  061F                     	;# 
  2010  0691                     	;# 
  2011  0692                     	;# 
  2012  0693                     	;# 
  2013  0694                     	;# 
  2014  0695                     	;# 
  2015  0696                     	;# 
  2016  0697                     	;# 
  2017  0698                     	;# 
  2018  0699                     	;# 
  2019  0711                     	;# 
  2020  0712                     	;# 
  2021  0713                     	;# 
  2022  0714                     	;# 
  2023  0715                     	;# 
  2024  0716                     	;# 
  2025  0717                     	;# 
  2026  0718                     	;# 
  2027  0719                     	;# 
  2028  0891                     	;# 
  2029  0891                     	;# 
  2030  0892                     	;# 
  2031  0893                     	;# 
  2032  0893                     	;# 
  2033  0894                     	;# 
  2034  0895                     	;# 
  2035  0896                     	;# 
  2036  089B                     	;# 
  2037  0911                     	;# 
  2038  0912                     	;# 
  2039  0913                     	;# 
  2040  0914                     	;# 
  2041  0915                     	;# 
  2042  0916                     	;# 
  2043  0918                     	;# 
  2044  0919                     	;# 
  2045  091A                     	;# 
  2046  091B                     	;# 
  2047  091C                     	;# 
  2048  091D                     	;# 
  2049  091E                     	;# 
  2050  091F                     	;# 
  2051  0E0F                     	;# 
  2052  0E10                     	;# 
  2053  0E11                     	;# 
  2054  0E12                     	;# 
  2055  0E13                     	;# 
  2056  0E14                     	;# 
  2057  0E15                     	;# 
  2058  0E16                     	;# 
  2059  0E17                     	;# 
  2060  0E18                     	;# 
  2061  0E19                     	;# 
  2062  0E1A                     	;# 
  2063  0E1B                     	;# 
  2064  0E1C                     	;# 
  2065  0E1D                     	;# 
  2066  0E1E                     	;# 
  2067  0E1F                     	;# 
  2068  0E20                     	;# 
  2069  0E21                     	;# 
  2070  0E22                     	;# 
  2071  0E24                     	;# 
  2072  0E25                     	;# 
  2073  0E28                     	;# 
  2074  0E29                     	;# 
  2075  0E2A                     	;# 
  2076  0E2B                     	;# 
  2077  0E2C                     	;# 
  2078  0E2D                     	;# 
  2079  0E2E                     	;# 
  2080  0E2F                     	;# 
  2081  0E90                     	;# 
  2082  0E91                     	;# 
  2083  0E92                     	;# 
  2084  0E94                     	;# 
  2085  0E95                     	;# 
  2086  0E9C                     	;# 
  2087  0E9D                     	;# 
  2088  0E9E                     	;# 
  2089  0E9F                     	;# 
  2090  0EA0                     	;# 
  2091  0EA1                     	;# 
  2092  0EA2                     	;# 
  2093  0EA3                     	;# 
  2094  0EA4                     	;# 
  2095  0EA5                     	;# 
  2096  0EA6                     	;# 
  2097  0EA7                     	;# 
  2098  0F0F                     	;# 
  2099  0F10                     	;# 
  2100  0F11                     	;# 
  2101  0F12                     	;# 
  2102  0F13                     	;# 
  2103  0F14                     	;# 
  2104  0F15                     	;# 
  2105  0F16                     	;# 
  2106  0F17                     	;# 
  2107  0F18                     	;# 
  2108  0F19                     	;# 
  2109  0F1A                     	;# 
  2110  0F1B                     	;# 
  2111  0F1C                     	;# 
  2112  0F1D                     	;# 
  2113  0F1E                     	;# 
  2114  0F1F                     	;# 
  2115  0F20                     	;# 
  2116  0F21                     	;# 
  2117  0F22                     	;# 
  2118  0F23                     	;# 
  2119  0F24                     	;# 
  2120  0F25                     	;# 
  2121  0F26                     	;# 
  2122  0F27                     	;# 
  2123  0F28                     	;# 
  2124  0F29                     	;# 
  2125  0F2A                     	;# 
  2126  0F2B                     	;# 
  2127  0F2C                     	;# 
  2128  0F2D                     	;# 
  2129  0F2E                     	;# 
  2130  0F2F                     	;# 
  2131  0F30                     	;# 
  2132  0F31                     	;# 
  2133  0F32                     	;# 
  2134  0F33                     	;# 
  2135  0F34                     	;# 
  2136  0F35                     	;# 
  2137  0F36                     	;# 
  2138  0F37                     	;# 
  2139  0FE4                     	;# 
  2140  0FE5                     	;# 
  2141  0FE6                     	;# 
  2142  0FE7                     	;# 
  2143  0FE8                     	;# 
  2144  0FE9                     	;# 
  2145  0FEA                     	;# 
  2146  0FEB                     	;# 
  2147  0FED                     	;# 
  2148  0FEE                     	;# 
  2149  0FEF                     	;# 
  2150  0000                     	;# 
  2151  0001                     	;# 
  2152  0002                     	;# 
  2153  0003                     	;# 
  2154  0004                     	;# 
  2155  0005                     	;# 
  2156  0006                     	;# 
  2157  0007                     	;# 
  2158  0008                     	;# 
  2159  0009                     	;# 
  2160  000A                     	;# 
  2161  000B                     	;# 
  2162  000C                     	;# 
  2163  000D                     	;# 
  2164  000E                     	;# 
  2165  0010                     	;# 
  2166  0011                     	;# 
  2167  0012                     	;# 
  2168  0013                     	;# 
  2169  0014                     	;# 
  2170  0015                     	;# 
  2171  0016                     	;# 
  2172  0017                     	;# 
  2173  0018                     	;# 
  2174  0019                     	;# 
  2175  0019                     	;# 
  2176  001A                     	;# 
  2177  001B                     	;# 
  2178  001C                     	;# 
  2179  001D                     	;# 
  2180  001E                     	;# 
  2181  001F                     	;# 
  2182  008C                     	;# 
  2183  008D                     	;# 
  2184  008E                     	;# 
  2185  0090                     	;# 
  2186  0091                     	;# 
  2187  0092                     	;# 
  2188  0093                     	;# 
  2189  0094                     	;# 
  2190  0097                     	;# 
  2191  009B                     	;# 
  2192  009B                     	;# 
  2193  009C                     	;# 
  2194  009D                     	;# 
  2195  009E                     	;# 
  2196  009F                     	;# 
  2197  010C                     	;# 
  2198  010D                     	;# 
  2199  010E                     	;# 
  2200  0111                     	;# 
  2201  0112                     	;# 
  2202  0113                     	;# 
  2203  0114                     	;# 
  2204  0115                     	;# 
  2205  0116                     	;# 
  2206  0117                     	;# 
  2207  0118                     	;# 
  2208  0119                     	;# 
  2209  018C                     	;# 
  2210  018D                     	;# 
  2211  018E                     	;# 
  2212  0197                     	;# 
  2213  0199                     	;# 
  2214  0199                     	;# 
  2215  0199                     	;# 
  2216  019A                     	;# 
  2217  019A                     	;# 
  2218  019A                     	;# 
  2219  019B                     	;# 
  2220  019B                     	;# 
  2221  019B                     	;# 
  2222  019B                     	;# 
  2223  019B                     	;# 
  2224  019C                     	;# 
  2225  019C                     	;# 
  2226  019C                     	;# 
  2227  019D                     	;# 
  2228  019D                     	;# 
  2229  019D                     	;# 
  2230  019E                     	;# 
  2231  019E                     	;# 
  2232  019E                     	;# 
  2233  019F                     	;# 
  2234  019F                     	;# 
  2235  019F                     	;# 
  2236  019F                     	;# 
  2237  019F                     	;# 
  2238  020C                     	;# 
  2239  020D                     	;# 
  2240  020E                     	;# 
  2241  0211                     	;# 
  2242  0211                     	;# 
  2243  0212                     	;# 
  2244  0212                     	;# 
  2245  0213                     	;# 
  2246  0213                     	;# 
  2247  0214                     	;# 
  2248  0214                     	;# 
  2249  0215                     	;# 
  2250  0215                     	;# 
  2251  0215                     	;# 
  2252  0215                     	;# 
  2253  0216                     	;# 
  2254  0216                     	;# 
  2255  0217                     	;# 
  2256  0217                     	;# 
  2257  0219                     	;# 
  2258  021A                     	;# 
  2259  021B                     	;# 
  2260  021C                     	;# 
  2261  021D                     	;# 
  2262  021D                     	;# 
  2263  021E                     	;# 
  2264  021F                     	;# 
  2265  028C                     	;# 
  2266  028D                     	;# 
  2267  028E                     	;# 
  2268  0291                     	;# 
  2269  0291                     	;# 
  2270  0292                     	;# 
  2271  0293                     	;# 
  2272  0294                     	;# 
  2273  0295                     	;# 
  2274  0295                     	;# 
  2275  0296                     	;# 
  2276  0297                     	;# 
  2277  0298                     	;# 
  2278  029F                     	;# 
  2279  030C                     	;# 
  2280  030D                     	;# 
  2281  030E                     	;# 
  2282  0311                     	;# 
  2283  0311                     	;# 
  2284  0312                     	;# 
  2285  0313                     	;# 
  2286  0314                     	;# 
  2287  0315                     	;# 
  2288  0315                     	;# 
  2289  0316                     	;# 
  2290  0317                     	;# 
  2291  0318                     	;# 
  2292  038C                     	;# 
  2293  038D                     	;# 
  2294  038E                     	;# 
  2295  0391                     	;# 
  2296  0392                     	;# 
  2297  0393                     	;# 
  2298  0394                     	;# 
  2299  0395                     	;# 
  2300  0396                     	;# 
  2301  0397                     	;# 
  2302  0398                     	;# 
  2303  0399                     	;# 
  2304  039A                     	;# 
  2305  039C                     	;# 
  2306  039D                     	;# 
  2307  039E                     	;# 
  2308  039F                     	;# 
  2309  040C                     	;# 
  2310  040D                     	;# 
  2311  040E                     	;# 
  2312  0411                     	;# 
  2313  0411                     	;# 
  2314  0412                     	;# 
  2315  0413                     	;# 
  2316  0414                     	;# 
  2317  0415                     	;# 
  2318  0416                     	;# 
  2319  0417                     	;# 
  2320  0418                     	;# 
  2321  0418                     	;# 
  2322  0419                     	;# 
  2323  041A                     	;# 
  2324  041B                     	;# 
  2325  041C                     	;# 
  2326  041D                     	;# 
  2327  041E                     	;# 
  2328  041F                     	;# 
  2329  048C                     	;# 
  2330  048D                     	;# 
  2331  048E                     	;# 
  2332  0498                     	;# 
  2333  0498                     	;# 
  2334  0499                     	;# 
  2335  049A                     	;# 
  2336  049B                     	;# 
  2337  049B                     	;# 
  2338  049C                     	;# 
  2339  049D                     	;# 
  2340  049E                     	;# 
  2341  049F                     	;# 
  2342  0617                     	;# 
  2343  0618                     	;# 
  2344  0619                     	;# 
  2345  0619                     	;# 
  2346  061A                     	;# 
  2347  061B                     	;# 
  2348  061C                     	;# 
  2349  061C                     	;# 
  2350  061F                     	;# 
  2351  0691                     	;# 
  2352  0692                     	;# 
  2353  0693                     	;# 
  2354  0694                     	;# 
  2355  0695                     	;# 
  2356  0696                     	;# 
  2357  0697                     	;# 
  2358  0698                     	;# 
  2359  0699                     	;# 
  2360  0711                     	;# 
  2361  0712                     	;# 
  2362  0713                     	;# 
  2363  0714                     	;# 
  2364  0715                     	;# 
  2365  0716                     	;# 
  2366  0717                     	;# 
  2367  0718                     	;# 
  2368  0719                     	;# 
  2369  0891                     	;# 
  2370  0891                     	;# 
  2371  0892                     	;# 
  2372  0893                     	;# 
  2373  0893                     	;# 
  2374  0894                     	;# 
  2375  0895                     	;# 
  2376  0896                     	;# 
  2377  089B                     	;# 
  2378  0911                     	;# 
  2379  0912                     	;# 
  2380  0913                     	;# 
  2381  0914                     	;# 
  2382  0915                     	;# 
  2383  0916                     	;# 
  2384  0918                     	;# 
  2385  0919                     	;# 
  2386  091A                     	;# 
  2387  091B                     	;# 
  2388  091C                     	;# 
  2389  091D                     	;# 
  2390  091E                     	;# 
  2391  091F                     	;# 
  2392  0E0F                     	;# 
  2393  0E10                     	;# 
  2394  0E11                     	;# 
  2395  0E12                     	;# 
  2396  0E13                     	;# 
  2397  0E14                     	;# 
  2398  0E15                     	;# 
  2399  0E16                     	;# 
  2400  0E17                     	;# 
  2401  0E18                     	;# 
  2402  0E19                     	;# 
  2403  0E1A                     	;# 
  2404  0E1B                     	;# 
  2405  0E1C                     	;# 
  2406  0E1D                     	;# 
  2407  0E1E                     	;# 
  2408  0E1F                     	;# 
  2409  0E20                     	;# 
  2410  0E21                     	;# 
  2411  0E22                     	;# 
  2412  0E24                     	;# 
  2413  0E25                     	;# 
  2414  0E28                     	;# 
  2415  0E29                     	;# 
  2416  0E2A                     	;# 
  2417  0E2B                     	;# 
  2418  0E2C                     	;# 
  2419  0E2D                     	;# 
  2420  0E2E                     	;# 
  2421  0E2F                     	;# 
  2422  0E90                     	;# 
  2423  0E91                     	;# 
  2424  0E92                     	;# 
  2425  0E94                     	;# 
  2426  0E95                     	;# 
  2427  0E9C                     	;# 
  2428  0E9D                     	;# 
  2429  0E9E                     	;# 
  2430  0E9F                     	;# 
  2431  0EA0                     	;# 
  2432  0EA1                     	;# 
  2433  0EA2                     	;# 
  2434  0EA3                     	;# 
  2435  0EA4                     	;# 
  2436  0EA5                     	;# 
  2437  0EA6                     	;# 
  2438  0EA7                     	;# 
  2439  0F0F                     	;# 
  2440  0F10                     	;# 
  2441  0F11                     	;# 
  2442  0F12                     	;# 
  2443  0F13                     	;# 
  2444  0F14                     	;# 
  2445  0F15                     	;# 
  2446  0F16                     	;# 
  2447  0F17                     	;# 
  2448  0F18                     	;# 
  2449  0F19                     	;# 
  2450  0F1A                     	;# 
  2451  0F1B                     	;# 
  2452  0F1C                     	;# 
  2453  0F1D                     	;# 
  2454  0F1E                     	;# 
  2455  0F1F                     	;# 
  2456  0F20                     	;# 
  2457  0F21                     	;# 
  2458  0F22                     	;# 
  2459  0F23                     	;# 
  2460  0F24                     	;# 
  2461  0F25                     	;# 
  2462  0F26                     	;# 
  2463  0F27                     	;# 
  2464  0F28                     	;# 
  2465  0F29                     	;# 
  2466  0F2A                     	;# 
  2467  0F2B                     	;# 
  2468  0F2C                     	;# 
  2469  0F2D                     	;# 
  2470  0F2E                     	;# 
  2471  0F2F                     	;# 
  2472  0F30                     	;# 
  2473  0F31                     	;# 
  2474  0F32                     	;# 
  2475  0F33                     	;# 
  2476  0F34                     	;# 
  2477  0F35                     	;# 
  2478  0F36                     	;# 
  2479  0F37                     	;# 
  2480  0FE4                     	;# 
  2481  0FE5                     	;# 
  2482  0FE6                     	;# 
  2483  0FE7                     	;# 
  2484  0FE8                     	;# 
  2485  0FE9                     	;# 
  2486  0FEA                     	;# 
  2487  0FEB                     	;# 
  2488  0FED                     	;# 
  2489  0FEE                     	;# 
  2490  0FEF                     	;# 
  2491  0000                     	;# 
  2492  0001                     	;# 
  2493  0002                     	;# 
  2494  0003                     	;# 
  2495  0004                     	;# 
  2496  0005                     	;# 
  2497  0006                     	;# 
  2498  0007                     	;# 
  2499  0008                     	;# 
  2500  0009                     	;# 
  2501  000A                     	;# 
  2502  000B                     	;# 
  2503  000C                     	;# 
  2504  000D                     	;# 
  2505  000E                     	;# 
  2506  0010                     	;# 
  2507  0011                     	;# 
  2508  0012                     	;# 
  2509  0013                     	;# 
  2510  0014                     	;# 
  2511  0015                     	;# 
  2512  0016                     	;# 
  2513  0017                     	;# 
  2514  0018                     	;# 
  2515  0019                     	;# 
  2516  0019                     	;# 
  2517  001A                     	;# 
  2518  001B                     	;# 
  2519  001C                     	;# 
  2520  001D                     	;# 
  2521  001E                     	;# 
  2522  001F                     	;# 
  2523  008C                     	;# 
  2524  008D                     	;# 
  2525  008E                     	;# 
  2526  0090                     	;# 
  2527  0091                     	;# 
  2528  0092                     	;# 
  2529  0093                     	;# 
  2530  0094                     	;# 
  2531  0097                     	;# 
  2532  009B                     	;# 
  2533  009B                     	;# 
  2534  009C                     	;# 
  2535  009D                     	;# 
  2536  009E                     	;# 
  2537  009F                     	;# 
  2538  010C                     	;# 
  2539  010D                     	;# 
  2540  010E                     	;# 
  2541  0111                     	;# 
  2542  0112                     	;# 
  2543  0113                     	;# 
  2544  0114                     	;# 
  2545  0115                     	;# 
  2546  0116                     	;# 
  2547  0117                     	;# 
  2548  0118                     	;# 
  2549  0119                     	;# 
  2550  018C                     	;# 
  2551  018D                     	;# 
  2552  018E                     	;# 
  2553  0197                     	;# 
  2554  0199                     	;# 
  2555  0199                     	;# 
  2556  0199                     	;# 
  2557  019A                     	;# 
  2558  019A                     	;# 
  2559  019A                     	;# 
  2560  019B                     	;# 
  2561  019B                     	;# 
  2562  019B                     	;# 
  2563  019B                     	;# 
  2564  019B                     	;# 
  2565  019C                     	;# 
  2566  019C                     	;# 
  2567  019C                     	;# 
  2568  019D                     	;# 
  2569  019D                     	;# 
  2570  019D                     	;# 
  2571  019E                     	;# 
  2572  019E                     	;# 
  2573  019E                     	;# 
  2574  019F                     	;# 
  2575  019F                     	;# 
  2576  019F                     	;# 
  2577  019F                     	;# 
  2578  019F                     	;# 
  2579  020C                     	;# 
  2580  020D                     	;# 
  2581  020E                     	;# 
  2582  0211                     	;# 
  2583  0211                     	;# 
  2584  0212                     	;# 
  2585  0212                     	;# 
  2586  0213                     	;# 
  2587  0213                     	;# 
  2588  0214                     	;# 
  2589  0214                     	;# 
  2590  0215                     	;# 
  2591  0215                     	;# 
  2592  0215                     	;# 
  2593  0215                     	;# 
  2594  0216                     	;# 
  2595  0216                     	;# 
  2596  0217                     	;# 
  2597  0217                     	;# 
  2598  0219                     	;# 
  2599  021A                     	;# 
  2600  021B                     	;# 
  2601  021C                     	;# 
  2602  021D                     	;# 
  2603  021D                     	;# 
  2604  021E                     	;# 
  2605  021F                     	;# 
  2606  028C                     	;# 
  2607  028D                     	;# 
  2608  028E                     	;# 
  2609  0291                     	;# 
  2610  0291                     	;# 
  2611  0292                     	;# 
  2612  0293                     	;# 
  2613  0294                     	;# 
  2614  0295                     	;# 
  2615  0295                     	;# 
  2616  0296                     	;# 
  2617  0297                     	;# 
  2618  0298                     	;# 
  2619  029F                     	;# 
  2620  030C                     	;# 
  2621  030D                     	;# 
  2622  030E                     	;# 
  2623  0311                     	;# 
  2624  0311                     	;# 
  2625  0312                     	;# 
  2626  0313                     	;# 
  2627  0314                     	;# 
  2628  0315                     	;# 
  2629  0315                     	;# 
  2630  0316                     	;# 
  2631  0317                     	;# 
  2632  0318                     	;# 
  2633  038C                     	;# 
  2634  038D                     	;# 
  2635  038E                     	;# 
  2636  0391                     	;# 
  2637  0392                     	;# 
  2638  0393                     	;# 
  2639  0394                     	;# 
  2640  0395                     	;# 
  2641  0396                     	;# 
  2642  0397                     	;# 
  2643  0398                     	;# 
  2644  0399                     	;# 
  2645  039A                     	;# 
  2646  039C                     	;# 
  2647  039D                     	;# 
  2648  039E                     	;# 
  2649  039F                     	;# 
  2650  040C                     	;# 
  2651  040D                     	;# 
  2652  040E                     	;# 
  2653  0411                     	;# 
  2654  0411                     	;# 
  2655  0412                     	;# 
  2656  0413                     	;# 
  2657  0414                     	;# 
  2658  0415                     	;# 
  2659  0416                     	;# 
  2660  0417                     	;# 
  2661  0418                     	;# 
  2662  0418                     	;# 
  2663  0419                     	;# 
  2664  041A                     	;# 
  2665  041B                     	;# 
  2666  041C                     	;# 
  2667  041D                     	;# 
  2668  041E                     	;# 
  2669  041F                     	;# 
  2670  048C                     	;# 
  2671  048D                     	;# 
  2672  048E                     	;# 
  2673  0498                     	;# 
  2674  0498                     	;# 
  2675  0499                     	;# 
  2676  049A                     	;# 
  2677  049B                     	;# 
  2678  049B                     	;# 
  2679  049C                     	;# 
  2680  049D                     	;# 
  2681  049E                     	;# 
  2682  049F                     	;# 
  2683  0617                     	;# 
  2684  0618                     	;# 
  2685  0619                     	;# 
  2686  0619                     	;# 
  2687  061A                     	;# 
  2688  061B                     	;# 
  2689  061C                     	;# 
  2690  061C                     	;# 
  2691  061F                     	;# 
  2692  0691                     	;# 
  2693  0692                     	;# 
  2694  0693                     	;# 
  2695  0694                     	;# 
  2696  0695                     	;# 
  2697  0696                     	;# 
  2698  0697                     	;# 
  2699  0698                     	;# 
  2700  0699                     	;# 
  2701  0711                     	;# 
  2702  0712                     	;# 
  2703  0713                     	;# 
  2704  0714                     	;# 
  2705  0715                     	;# 
  2706  0716                     	;# 
  2707  0717                     	;# 
  2708  0718                     	;# 
  2709  0719                     	;# 
  2710  0891                     	;# 
  2711  0891                     	;# 
  2712  0892                     	;# 
  2713  0893                     	;# 
  2714  0893                     	;# 
  2715  0894                     	;# 
  2716  0895                     	;# 
  2717  0896                     	;# 
  2718  089B                     	;# 
  2719  0911                     	;# 
  2720  0912                     	;# 
  2721  0913                     	;# 
  2722  0914                     	;# 
  2723  0915                     	;# 
  2724  0916                     	;# 
  2725  0918                     	;# 
  2726  0919                     	;# 
  2727  091A                     	;# 
  2728  091B                     	;# 
  2729  091C                     	;# 
  2730  091D                     	;# 
  2731  091E                     	;# 
  2732  091F                     	;# 
  2733  0E0F                     	;# 
  2734  0E10                     	;# 
  2735  0E11                     	;# 
  2736  0E12                     	;# 
  2737  0E13                     	;# 
  2738  0E14                     	;# 
  2739  0E15                     	;# 
  2740  0E16                     	;# 
  2741  0E17                     	;# 
  2742  0E18                     	;# 
  2743  0E19                     	;# 
  2744  0E1A                     	;# 
  2745  0E1B                     	;# 
  2746  0E1C                     	;# 
  2747  0E1D                     	;# 
  2748  0E1E                     	;# 
  2749  0E1F                     	;# 
  2750  0E20                     	;# 
  2751  0E21                     	;# 
  2752  0E22                     	;# 
  2753  0E24                     	;# 
  2754  0E25                     	;# 
  2755  0E28                     	;# 
  2756  0E29                     	;# 
  2757  0E2A                     	;# 
  2758  0E2B                     	;# 
  2759  0E2C                     	;# 
  2760  0E2D                     	;# 
  2761  0E2E                     	;# 
  2762  0E2F                     	;# 
  2763  0E90                     	;# 
  2764  0E91                     	;# 
  2765  0E92                     	;# 
  2766  0E94                     	;# 
  2767  0E95                     	;# 
  2768  0E9C                     	;# 
  2769  0E9D                     	;# 
  2770  0E9E                     	;# 
  2771  0E9F                     	;# 
  2772  0EA0                     	;# 
  2773  0EA1                     	;# 
  2774  0EA2                     	;# 
  2775  0EA3                     	;# 
  2776  0EA4                     	;# 
  2777  0EA5                     	;# 
  2778  0EA6                     	;# 
  2779  0EA7                     	;# 
  2780  0F0F                     	;# 
  2781  0F10                     	;# 
  2782  0F11                     	;# 
  2783  0F12                     	;# 
  2784  0F13                     	;# 
  2785  0F14                     	;# 
  2786  0F15                     	;# 
  2787  0F16                     	;# 
  2788  0F17                     	;# 
  2789  0F18                     	;# 
  2790  0F19                     	;# 
  2791  0F1A                     	;# 
  2792  0F1B                     	;# 
  2793  0F1C                     	;# 
  2794  0F1D                     	;# 
  2795  0F1E                     	;# 
  2796  0F1F                     	;# 
  2797  0F20                     	;# 
  2798  0F21                     	;# 
  2799  0F22                     	;# 
  2800  0F23                     	;# 
  2801  0F24                     	;# 
  2802  0F25                     	;# 
  2803  0F26                     	;# 
  2804  0F27                     	;# 
  2805  0F28                     	;# 
  2806  0F29                     	;# 
  2807  0F2A                     	;# 
  2808  0F2B                     	;# 
  2809  0F2C                     	;# 
  2810  0F2D                     	;# 
  2811  0F2E                     	;# 
  2812  0F2F                     	;# 
  2813  0F30                     	;# 
  2814  0F31                     	;# 
  2815  0F32                     	;# 
  2816  0F33                     	;# 
  2817  0F34                     	;# 
  2818  0F35                     	;# 
  2819  0F36                     	;# 
  2820  0F37                     	;# 
  2821  0FE4                     	;# 
  2822  0FE5                     	;# 
  2823  0FE6                     	;# 
  2824  0FE7                     	;# 
  2825  0FE8                     	;# 
  2826  0FE9                     	;# 
  2827  0FEA                     	;# 
  2828  0FEB                     	;# 
  2829  0FED                     	;# 
  2830  0FEE                     	;# 
  2831  0FEF                     	;# 
  2832  0000                     	;# 
  2833  0001                     	;# 
  2834  0002                     	;# 
  2835  0003                     	;# 
  2836  0004                     	;# 
  2837  0005                     	;# 
  2838  0006                     	;# 
  2839  0007                     	;# 
  2840  0008                     	;# 
  2841  0009                     	;# 
  2842  000A                     	;# 
  2843  000B                     	;# 
  2844  000C                     	;# 
  2845  000D                     	;# 
  2846  000E                     	;# 
  2847  0010                     	;# 
  2848  0011                     	;# 
  2849  0012                     	;# 
  2850  0013                     	;# 
  2851  0014                     	;# 
  2852  0015                     	;# 
  2853  0016                     	;# 
  2854  0017                     	;# 
  2855  0018                     	;# 
  2856  0019                     	;# 
  2857  0019                     	;# 
  2858  001A                     	;# 
  2859  001B                     	;# 
  2860  001C                     	;# 
  2861  001D                     	;# 
  2862  001E                     	;# 
  2863  001F                     	;# 
  2864  008C                     	;# 
  2865  008D                     	;# 
  2866  008E                     	;# 
  2867  0090                     	;# 
  2868  0091                     	;# 
  2869  0092                     	;# 
  2870  0093                     	;# 
  2871  0094                     	;# 
  2872  0097                     	;# 
  2873  009B                     	;# 
  2874  009B                     	;# 
  2875  009C                     	;# 
  2876  009D                     	;# 
  2877  009E                     	;# 
  2878  009F                     	;# 
  2879  010C                     	;# 
  2880  010D                     	;# 
  2881  010E                     	;# 
  2882  0111                     	;# 
  2883  0112                     	;# 
  2884  0113                     	;# 
  2885  0114                     	;# 
  2886  0115                     	;# 
  2887  0116                     	;# 
  2888  0117                     	;# 
  2889  0118                     	;# 
  2890  0119                     	;# 
  2891  018C                     	;# 
  2892  018D                     	;# 
  2893  018E                     	;# 
  2894  0197                     	;# 
  2895  0199                     	;# 
  2896  0199                     	;# 
  2897  0199                     	;# 
  2898  019A                     	;# 
  2899  019A                     	;# 
  2900  019A                     	;# 
  2901  019B                     	;# 
  2902  019B                     	;# 
  2903  019B                     	;# 
  2904  019B                     	;# 
  2905  019B                     	;# 
  2906  019C                     	;# 
  2907  019C                     	;# 
  2908  019C                     	;# 
  2909  019D                     	;# 
  2910  019D                     	;# 
  2911  019D                     	;# 
  2912  019E                     	;# 
  2913  019E                     	;# 
  2914  019E                     	;# 
  2915  019F                     	;# 
  2916  019F                     	;# 
  2917  019F                     	;# 
  2918  019F                     	;# 
  2919  019F                     	;# 
  2920  020C                     	;# 
  2921  020D                     	;# 
  2922  020E                     	;# 
  2923  0211                     	;# 
  2924  0211                     	;# 
  2925  0212                     	;# 
  2926  0212                     	;# 
  2927  0213                     	;# 
  2928  0213                     	;# 
  2929  0214                     	;# 
  2930  0214                     	;# 
  2931  0215                     	;# 
  2932  0215                     	;# 
  2933  0215                     	;# 
  2934  0215                     	;# 
  2935  0216                     	;# 
  2936  0216                     	;# 
  2937  0217                     	;# 
  2938  0217                     	;# 
  2939  0219                     	;# 
  2940  021A                     	;# 
  2941  021B                     	;# 
  2942  021C                     	;# 
  2943  021D                     	;# 
  2944  021D                     	;# 
  2945  021E                     	;# 
  2946  021F                     	;# 
  2947  028C                     	;# 
  2948  028D                     	;# 
  2949  028E                     	;# 
  2950  0291                     	;# 
  2951  0291                     	;# 
  2952  0292                     	;# 
  2953  0293                     	;# 
  2954  0294                     	;# 
  2955  0295                     	;# 
  2956  0295                     	;# 
  2957  0296                     	;# 
  2958  0297                     	;# 
  2959  0298                     	;# 
  2960  029F                     	;# 
  2961  030C                     	;# 
  2962  030D                     	;# 
  2963  030E                     	;# 
  2964  0311                     	;# 
  2965  0311                     	;# 
  2966  0312                     	;# 
  2967  0313                     	;# 
  2968  0314                     	;# 
  2969  0315                     	;# 
  2970  0315                     	;# 
  2971  0316                     	;# 
  2972  0317                     	;# 
  2973  0318                     	;# 
  2974  038C                     	;# 
  2975  038D                     	;# 
  2976  038E                     	;# 
  2977  0391                     	;# 
  2978  0392                     	;# 
  2979  0393                     	;# 
  2980  0394                     	;# 
  2981  0395                     	;# 
  2982  0396                     	;# 
  2983  0397                     	;# 
  2984  0398                     	;# 
  2985  0399                     	;# 
  2986  039A                     	;# 
  2987  039C                     	;# 
  2988  039D                     	;# 
  2989  039E                     	;# 
  2990  039F                     	;# 
  2991  040C                     	;# 
  2992  040D                     	;# 
  2993  040E                     	;# 
  2994  0411                     	;# 
  2995  0411                     	;# 
  2996  0412                     	;# 
  2997  0413                     	;# 
  2998  0414                     	;# 
  2999  0415                     	;# 
  3000  0416                     	;# 
  3001  0417                     	;# 
  3002  0418                     	;# 
  3003  0418                     	;# 
  3004  0419                     	;# 
  3005  041A                     	;# 
  3006  041B                     	;# 
  3007  041C                     	;# 
  3008  041D                     	;# 
  3009  041E                     	;# 
  3010  041F                     	;# 
  3011  048C                     	;# 
  3012  048D                     	;# 
  3013  048E                     	;# 
  3014  0498                     	;# 
  3015  0498                     	;# 
  3016  0499                     	;# 
  3017  049A                     	;# 
  3018  049B                     	;# 
  3019  049B                     	;# 
  3020  049C                     	;# 
  3021  049D                     	;# 
  3022  049E                     	;# 
  3023  049F                     	;# 
  3024  0617                     	;# 
  3025  0618                     	;# 
  3026  0619                     	;# 
  3027  0619                     	;# 
  3028  061A                     	;# 
  3029  061B                     	;# 
  3030  061C                     	;# 
  3031  061C                     	;# 
  3032  061F                     	;# 
  3033  0691                     	;# 
  3034  0692                     	;# 
  3035  0693                     	;# 
  3036  0694                     	;# 
  3037  0695                     	;# 
  3038  0696                     	;# 
  3039  0697                     	;# 
  3040  0698                     	;# 
  3041  0699                     	;# 
  3042  0711                     	;# 
  3043  0712                     	;# 
  3044  0713                     	;# 
  3045  0714                     	;# 
  3046  0715                     	;# 
  3047  0716                     	;# 
  3048  0717                     	;# 
  3049  0718                     	;# 
  3050  0719                     	;# 
  3051  0891                     	;# 
  3052  0891                     	;# 
  3053  0892                     	;# 
  3054  0893                     	;# 
  3055  0893                     	;# 
  3056  0894                     	;# 
  3057  0895                     	;# 
  3058  0896                     	;# 
  3059  089B                     	;# 
  3060  0911                     	;# 
  3061  0912                     	;# 
  3062  0913                     	;# 
  3063  0914                     	;# 
  3064  0915                     	;# 
  3065  0916                     	;# 
  3066  0918                     	;# 
  3067  0919                     	;# 
  3068  091A                     	;# 
  3069  091B                     	;# 
  3070  091C                     	;# 
  3071  091D                     	;# 
  3072  091E                     	;# 
  3073  091F                     	;# 
  3074  0E0F                     	;# 
  3075  0E10                     	;# 
  3076  0E11                     	;# 
  3077  0E12                     	;# 
  3078  0E13                     	;# 
  3079  0E14                     	;# 
  3080  0E15                     	;# 
  3081  0E16                     	;# 
  3082  0E17                     	;# 
  3083  0E18                     	;# 
  3084  0E19                     	;# 
  3085  0E1A                     	;# 
  3086  0E1B                     	;# 
  3087  0E1C                     	;# 
  3088  0E1D                     	;# 
  3089  0E1E                     	;# 
  3090  0E1F                     	;# 
  3091  0E20                     	;# 
  3092  0E21                     	;# 
  3093  0E22                     	;# 
  3094  0E24                     	;# 
  3095  0E25                     	;# 
  3096  0E28                     	;# 
  3097  0E29                     	;# 
  3098  0E2A                     	;# 
  3099  0E2B                     	;# 
  3100  0E2C                     	;# 
  3101  0E2D                     	;# 
  3102  0E2E                     	;# 
  3103  0E2F                     	;# 
  3104  0E90                     	;# 
  3105  0E91                     	;# 
  3106  0E92                     	;# 
  3107  0E94                     	;# 
  3108  0E95                     	;# 
  3109  0E9C                     	;# 
  3110  0E9D                     	;# 
  3111  0E9E                     	;# 
  3112  0E9F                     	;# 
  3113  0EA0                     	;# 
  3114  0EA1                     	;# 
  3115  0EA2                     	;# 
  3116  0EA3                     	;# 
  3117  0EA4                     	;# 
  3118  0EA5                     	;# 
  3119  0EA6                     	;# 
  3120  0EA7                     	;# 
  3121  0F0F                     	;# 
  3122  0F10                     	;# 
  3123  0F11                     	;# 
  3124  0F12                     	;# 
  3125  0F13                     	;# 
  3126  0F14                     	;# 
  3127  0F15                     	;# 
  3128  0F16                     	;# 
  3129  0F17                     	;# 
  3130  0F18                     	;# 
  3131  0F19                     	;# 
  3132  0F1A                     	;# 
  3133  0F1B                     	;# 
  3134  0F1C                     	;# 
  3135  0F1D                     	;# 
  3136  0F1E                     	;# 
  3137  0F1F                     	;# 
  3138  0F20                     	;# 
  3139  0F21                     	;# 
  3140  0F22                     	;# 
  3141  0F23                     	;# 
  3142  0F24                     	;# 
  3143  0F25                     	;# 
  3144  0F26                     	;# 
  3145  0F27                     	;# 
  3146  0F28                     	;# 
  3147  0F29                     	;# 
  3148  0F2A                     	;# 
  3149  0F2B                     	;# 
  3150  0F2C                     	;# 
  3151  0F2D                     	;# 
  3152  0F2E                     	;# 
  3153  0F2F                     	;# 
  3154  0F30                     	;# 
  3155  0F31                     	;# 
  3156  0F32                     	;# 
  3157  0F33                     	;# 
  3158  0F34                     	;# 
  3159  0F35                     	;# 
  3160  0F36                     	;# 
  3161  0F37                     	;# 
  3162  0FE4                     	;# 
  3163  0FE5                     	;# 
  3164  0FE6                     	;# 
  3165  0FE7                     	;# 
  3166  0FE8                     	;# 
  3167  0FE9                     	;# 
  3168  0FEA                     	;# 
  3169  0FEB                     	;# 
  3170  0FED                     	;# 
  3171  0FEE                     	;# 
  3172  0FEF                     	;# 
  3173  0000                     	;# 
  3174  0001                     	;# 
  3175  0002                     	;# 
  3176  0003                     	;# 
  3177  0004                     	;# 
  3178  0005                     	;# 
  3179  0006                     	;# 
  3180  0007                     	;# 
  3181  0008                     	;# 
  3182  0009                     	;# 
  3183  000A                     	;# 
  3184  000B                     	;# 
  3185  000C                     	;# 
  3186  000D                     	;# 
  3187  000E                     	;# 
  3188  0010                     	;# 
  3189  0011                     	;# 
  3190  0012                     	;# 
  3191  0013                     	;# 
  3192  0014                     	;# 
  3193  0015                     	;# 
  3194  0016                     	;# 
  3195  0017                     	;# 
  3196  0018                     	;# 
  3197  0019                     	;# 
  3198  0019                     	;# 
  3199  001A                     	;# 
  3200  001B                     	;# 
  3201  001C                     	;# 
  3202  001D                     	;# 
  3203  001E                     	;# 
  3204  001F                     	;# 
  3205  008C                     	;# 
  3206  008D                     	;# 
  3207  008E                     	;# 
  3208  0090                     	;# 
  3209  0091                     	;# 
  3210  0092                     	;# 
  3211  0093                     	;# 
  3212  0094                     	;# 
  3213  0097                     	;# 
  3214  009B                     	;# 
  3215  009B                     	;# 
  3216  009C                     	;# 
  3217  009D                     	;# 
  3218  009E                     	;# 
  3219  009F                     	;# 
  3220  010C                     	;# 
  3221  010D                     	;# 
  3222  010E                     	;# 
  3223  0111                     	;# 
  3224  0112                     	;# 
  3225  0113                     	;# 
  3226  0114                     	;# 
  3227  0115                     	;# 
  3228  0116                     	;# 
  3229  0117                     	;# 
  3230  0118                     	;# 
  3231  0119                     	;# 
  3232  018C                     	;# 
  3233  018D                     	;# 
  3234  018E                     	;# 
  3235  0197                     	;# 
  3236  0199                     	;# 
  3237  0199                     	;# 
  3238  0199                     	;# 
  3239  019A                     	;# 
  3240  019A                     	;# 
  3241  019A                     	;# 
  3242  019B                     	;# 
  3243  019B                     	;# 
  3244  019B                     	;# 
  3245  019B                     	;# 
  3246  019B                     	;# 
  3247  019C                     	;# 
  3248  019C                     	;# 
  3249  019C                     	;# 
  3250  019D                     	;# 
  3251  019D                     	;# 
  3252  019D                     	;# 
  3253  019E                     	;# 
  3254  019E                     	;# 
  3255  019E                     	;# 
  3256  019F                     	;# 
  3257  019F                     	;# 
  3258  019F                     	;# 
  3259  019F                     	;# 
  3260  019F                     	;# 
  3261  020C                     	;# 
  3262  020D                     	;# 
  3263  020E                     	;# 
  3264  0211                     	;# 
  3265  0211                     	;# 
  3266  0212                     	;# 
  3267  0212                     	;# 
  3268  0213                     	;# 
  3269  0213                     	;# 
  3270  0214                     	;# 
  3271  0214                     	;# 
  3272  0215                     	;# 
  3273  0215                     	;# 
  3274  0215                     	;# 
  3275  0215                     	;# 
  3276  0216                     	;# 
  3277  0216                     	;# 
  3278  0217                     	;# 
  3279  0217                     	;# 
  3280  0219                     	;# 
  3281  021A                     	;# 
  3282  021B                     	;# 
  3283  021C                     	;# 
  3284  021D                     	;# 
  3285  021D                     	;# 
  3286  021E                     	;# 
  3287  021F                     	;# 
  3288  028C                     	;# 
  3289  028D                     	;# 
  3290  028E                     	;# 
  3291  0291                     	;# 
  3292  0291                     	;# 
  3293  0292                     	;# 
  3294  0293                     	;# 
  3295  0294                     	;# 
  3296  0295                     	;# 
  3297  0295                     	;# 
  3298  0296                     	;# 
  3299  0297                     	;# 
  3300  0298                     	;# 
  3301  029F                     	;# 
  3302  030C                     	;# 
  3303  030D                     	;# 
  3304  030E                     	;# 
  3305  0311                     	;# 
  3306  0311                     	;# 
  3307  0312                     	;# 
  3308  0313                     	;# 
  3309  0314                     	;# 
  3310  0315                     	;# 
  3311  0315                     	;# 
  3312  0316                     	;# 
  3313  0317                     	;# 
  3314  0318                     	;# 
  3315  038C                     	;# 
  3316  038D                     	;# 
  3317  038E                     	;# 
  3318  0391                     	;# 
  3319  0392                     	;# 
  3320  0393                     	;# 
  3321  0394                     	;# 
  3322  0395                     	;# 
  3323  0396                     	;# 
  3324  0397                     	;# 
  3325  0398                     	;# 
  3326  0399                     	;# 
  3327  039A                     	;# 
  3328  039C                     	;# 
  3329  039D                     	;# 
  3330  039E                     	;# 
  3331  039F                     	;# 
  3332  040C                     	;# 
  3333  040D                     	;# 
  3334  040E                     	;# 
  3335  0411                     	;# 
  3336  0411                     	;# 
  3337  0412                     	;# 
  3338  0413                     	;# 
  3339  0414                     	;# 
  3340  0415                     	;# 
  3341  0416                     	;# 
  3342  0417                     	;# 
  3343  0418                     	;# 
  3344  0418                     	;# 
  3345  0419                     	;# 
  3346  041A                     	;# 
  3347  041B                     	;# 
  3348  041C                     	;# 
  3349  041D                     	;# 
  3350  041E                     	;# 
  3351  041F                     	;# 
  3352  048C                     	;# 
  3353  048D                     	;# 
  3354  048E                     	;# 
  3355  0498                     	;# 
  3356  0498                     	;# 
  3357  0499                     	;# 
  3358  049A                     	;# 
  3359  049B                     	;# 
  3360  049B                     	;# 
  3361  049C                     	;# 
  3362  049D                     	;# 
  3363  049E                     	;# 
  3364  049F                     	;# 
  3365  0617                     	;# 
  3366  0618                     	;# 
  3367  0619                     	;# 
  3368  0619                     	;# 
  3369  061A                     	;# 
  3370  061B                     	;# 
  3371  061C                     	;# 
  3372  061C                     	;# 
  3373  061F                     	;# 
  3374  0691                     	;# 
  3375  0692                     	;# 
  3376  0693                     	;# 
  3377  0694                     	;# 
  3378  0695                     	;# 
  3379  0696                     	;# 
  3380  0697                     	;# 
  3381  0698                     	;# 
  3382  0699                     	;# 
  3383  0711                     	;# 
  3384  0712                     	;# 
  3385  0713                     	;# 
  3386  0714                     	;# 
  3387  0715                     	;# 
  3388  0716                     	;# 
  3389  0717                     	;# 
  3390  0718                     	;# 
  3391  0719                     	;# 
  3392  0891                     	;# 
  3393  0891                     	;# 
  3394  0892                     	;# 
  3395  0893                     	;# 
  3396  0893                     	;# 
  3397  0894                     	;# 
  3398  0895                     	;# 
  3399  0896                     	;# 
  3400  089B                     	;# 
  3401  0911                     	;# 
  3402  0912                     	;# 
  3403  0913                     	;# 
  3404  0914                     	;# 
  3405  0915                     	;# 
  3406  0916                     	;# 
  3407  0918                     	;# 
  3408  0919                     	;# 
  3409  091A                     	;# 
  3410  091B                     	;# 
  3411  091C                     	;# 
  3412  091D                     	;# 
  3413  091E                     	;# 
  3414  091F                     	;# 
  3415  0E0F                     	;# 
  3416  0E10                     	;# 
  3417  0E11                     	;# 
  3418  0E12                     	;# 
  3419  0E13                     	;# 
  3420  0E14                     	;# 
  3421  0E15                     	;# 
  3422  0E16                     	;# 
  3423  0E17                     	;# 
  3424  0E18                     	;# 
  3425  0E19                     	;# 
  3426  0E1A                     	;# 
  3427  0E1B                     	;# 
  3428  0E1C                     	;# 
  3429  0E1D                     	;# 
  3430  0E1E                     	;# 
  3431  0E1F                     	;# 
  3432  0E20                     	;# 
  3433  0E21                     	;# 
  3434  0E22                     	;# 
  3435  0E24                     	;# 
  3436  0E25                     	;# 
  3437  0E28                     	;# 
  3438  0E29                     	;# 
  3439  0E2A                     	;# 
  3440  0E2B                     	;# 
  3441  0E2C                     	;# 
  3442  0E2D                     	;# 
  3443  0E2E                     	;# 
  3444  0E2F                     	;# 
  3445  0E90                     	;# 
  3446  0E91                     	;# 
  3447  0E92                     	;# 
  3448  0E94                     	;# 
  3449  0E95                     	;# 
  3450  0E9C                     	;# 
  3451  0E9D                     	;# 
  3452  0E9E                     	;# 
  3453  0E9F                     	;# 
  3454  0EA0                     	;# 
  3455  0EA1                     	;# 
  3456  0EA2                     	;# 
  3457  0EA3                     	;# 
  3458  0EA4                     	;# 
  3459  0EA5                     	;# 
  3460  0EA6                     	;# 
  3461  0EA7                     	;# 
  3462  0F0F                     	;# 
  3463  0F10                     	;# 
  3464  0F11                     	;# 
  3465  0F12                     	;# 
  3466  0F13                     	;# 
  3467  0F14                     	;# 
  3468  0F15                     	;# 
  3469  0F16                     	;# 
  3470  0F17                     	;# 
  3471  0F18                     	;# 
  3472  0F19                     	;# 
  3473  0F1A                     	;# 
  3474  0F1B                     	;# 
  3475  0F1C                     	;# 
  3476  0F1D                     	;# 
  3477  0F1E                     	;# 
  3478  0F1F                     	;# 
  3479  0F20                     	;# 
  3480  0F21                     	;# 
  3481  0F22                     	;# 
  3482  0F23                     	;# 
  3483  0F24                     	;# 
  3484  0F25                     	;# 
  3485  0F26                     	;# 
  3486  0F27                     	;# 
  3487  0F28                     	;# 
  3488  0F29                     	;# 
  3489  0F2A                     	;# 
  3490  0F2B                     	;# 
  3491  0F2C                     	;# 
  3492  0F2D                     	;# 
  3493  0F2E                     	;# 
  3494  0F2F                     	;# 
  3495  0F30                     	;# 
  3496  0F31                     	;# 
  3497  0F32                     	;# 
  3498  0F33                     	;# 
  3499  0F34                     	;# 
  3500  0F35                     	;# 
  3501  0F36                     	;# 
  3502  0F37                     	;# 
  3503  0FE4                     	;# 
  3504  0FE5                     	;# 
  3505  0FE6                     	;# 
  3506  0FE7                     	;# 
  3507  0FE8                     	;# 
  3508  0FE9                     	;# 
  3509  0FEA                     	;# 
  3510  0FEB                     	;# 
  3511  0FED                     	;# 
  3512  0FEE                     	;# 
  3513  0FEF                     	;# 
  3514  0000                     	;# 
  3515  0001                     	;# 
  3516  0002                     	;# 
  3517  0003                     	;# 
  3518  0004                     	;# 
  3519  0005                     	;# 
  3520  0006                     	;# 
  3521  0007                     	;# 
  3522  0008                     	;# 
  3523  0009                     	;# 
  3524  000A                     	;# 
  3525  000B                     	;# 
  3526  000C                     	;# 
  3527  000D                     	;# 
  3528  000E                     	;# 
  3529  0010                     	;# 
  3530  0011                     	;# 
  3531  0012                     	;# 
  3532  0013                     	;# 
  3533  0014                     	;# 
  3534  0015                     	;# 
  3535  0016                     	;# 
  3536  0017                     	;# 
  3537  0018                     	;# 
  3538  0019                     	;# 
  3539  0019                     	;# 
  3540  001A                     	;# 
  3541  001B                     	;# 
  3542  001C                     	;# 
  3543  001D                     	;# 
  3544  001E                     	;# 
  3545  001F                     	;# 
  3546  008C                     	;# 
  3547  008D                     	;# 
  3548  008E                     	;# 
  3549  0090                     	;# 
  3550  0091                     	;# 
  3551  0092                     	;# 
  3552  0093                     	;# 
  3553  0094                     	;# 
  3554  0097                     	;# 
  3555  009B                     	;# 
  3556  009B                     	;# 
  3557  009C                     	;# 
  3558  009D                     	;# 
  3559  009E                     	;# 
  3560  009F                     	;# 
  3561  010C                     	;# 
  3562  010D                     	;# 
  3563  010E                     	;# 
  3564  0111                     	;# 
  3565  0112                     	;# 
  3566  0113                     	;# 
  3567  0114                     	;# 
  3568  0115                     	;# 
  3569  0116                     	;# 
  3570  0117                     	;# 
  3571  0118                     	;# 
  3572  0119                     	;# 
  3573  018C                     	;# 
  3574  018D                     	;# 
  3575  018E                     	;# 
  3576  0197                     	;# 
  3577  0199                     	;# 
  3578  0199                     	;# 
  3579  0199                     	;# 
  3580  019A                     	;# 
  3581  019A                     	;# 
  3582  019A                     	;# 
  3583  019B                     	;# 
  3584  019B                     	;# 
  3585  019B                     	;# 
  3586  019B                     	;# 
  3587  019B                     	;# 
  3588  019C                     	;# 
  3589  019C                     	;# 
  3590  019C                     	;# 
  3591  019D                     	;# 
  3592  019D                     	;# 
  3593  019D                     	;# 
  3594  019E                     	;# 
  3595  019E                     	;# 
  3596  019E                     	;# 
  3597  019F                     	;# 
  3598  019F                     	;# 
  3599  019F                     	;# 
  3600  019F                     	;# 
  3601  019F                     	;# 
  3602  020C                     	;# 
  3603  020D                     	;# 
  3604  020E                     	;# 
  3605  0211                     	;# 
  3606  0211                     	;# 
  3607  0212                     	;# 
  3608  0212                     	;# 
  3609  0213                     	;# 
  3610  0213                     	;# 
  3611  0214                     	;# 
  3612  0214                     	;# 
  3613  0215                     	;# 
  3614  0215                     	;# 
  3615  0215                     	;# 
  3616  0215                     	;# 
  3617  0216                     	;# 
  3618  0216                     	;# 
  3619  0217                     	;# 
  3620  0217                     	;# 
  3621  0219                     	;# 
  3622  021A                     	;# 
  3623  021B                     	;# 
  3624  021C                     	;# 
  3625  021D                     	;# 
  3626  021D                     	;# 
  3627  021E                     	;# 
  3628  021F                     	;# 
  3629  028C                     	;# 
  3630  028D                     	;# 
  3631  028E                     	;# 
  3632  0291                     	;# 
  3633  0291                     	;# 
  3634  0292                     	;# 
  3635  0293                     	;# 
  3636  0294                     	;# 
  3637  0295                     	;# 
  3638  0295                     	;# 
  3639  0296                     	;# 
  3640  0297                     	;# 
  3641  0298                     	;# 
  3642  029F                     	;# 
  3643  030C                     	;# 
  3644  030D                     	;# 
  3645  030E                     	;# 
  3646  0311                     	;# 
  3647  0311                     	;# 
  3648  0312                     	;# 
  3649  0313                     	;# 
  3650  0314                     	;# 
  3651  0315                     	;# 
  3652  0315                     	;# 
  3653  0316                     	;# 
  3654  0317                     	;# 
  3655  0318                     	;# 
  3656  038C                     	;# 
  3657  038D                     	;# 
  3658  038E                     	;# 
  3659  0391                     	;# 
  3660  0392                     	;# 
  3661  0393                     	;# 
  3662  0394                     	;# 
  3663  0395                     	;# 
  3664  0396                     	;# 
  3665  0397                     	;# 
  3666  0398                     	;# 
  3667  0399                     	;# 
  3668  039A                     	;# 
  3669  039C                     	;# 
  3670  039D                     	;# 
  3671  039E                     	;# 
  3672  039F                     	;# 
  3673  040C                     	;# 
  3674  040D                     	;# 
  3675  040E                     	;# 
  3676  0411                     	;# 
  3677  0411                     	;# 
  3678  0412                     	;# 
  3679  0413                     	;# 
  3680  0414                     	;# 
  3681  0415                     	;# 
  3682  0416                     	;# 
  3683  0417                     	;# 
  3684  0418                     	;# 
  3685  0418                     	;# 
  3686  0419                     	;# 
  3687  041A                     	;# 
  3688  041B                     	;# 
  3689  041C                     	;# 
  3690  041D                     	;# 
  3691  041E                     	;# 
  3692  041F                     	;# 
  3693  048C                     	;# 
  3694  048D                     	;# 
  3695  048E                     	;# 
  3696  0498                     	;# 
  3697  0498                     	;# 
  3698  0499                     	;# 
  3699  049A                     	;# 
  3700  049B                     	;# 
  3701  049B                     	;# 
  3702  049C                     	;# 
  3703  049D                     	;# 
  3704  049E                     	;# 
  3705  049F                     	;# 
  3706  0617                     	;# 
  3707  0618                     	;# 
  3708  0619                     	;# 
  3709  0619                     	;# 
  3710  061A                     	;# 
  3711  061B                     	;# 
  3712  061C                     	;# 
  3713  061C                     	;# 
  3714  061F                     	;# 
  3715  0691                     	;# 
  3716  0692                     	;# 
  3717  0693                     	;# 
  3718  0694                     	;# 
  3719  0695                     	;# 
  3720  0696                     	;# 
  3721  0697                     	;# 
  3722  0698                     	;# 
  3723  0699                     	;# 
  3724  0711                     	;# 
  3725  0712                     	;# 
  3726  0713                     	;# 
  3727  0714                     	;# 
  3728  0715                     	;# 
  3729  0716                     	;# 
  3730  0717                     	;# 
  3731  0718                     	;# 
  3732  0719                     	;# 
  3733  0891                     	;# 
  3734  0891                     	;# 
  3735  0892                     	;# 
  3736  0893                     	;# 
  3737  0893                     	;# 
  3738  0894                     	;# 
  3739  0895                     	;# 
  3740  0896                     	;# 
  3741  089B                     	;# 
  3742  0911                     	;# 
  3743  0912                     	;# 
  3744  0913                     	;# 
  3745  0914                     	;# 
  3746  0915                     	;# 
  3747  0916                     	;# 
  3748  0918                     	;# 
  3749  0919                     	;# 
  3750  091A                     	;# 
  3751  091B                     	;# 
  3752  091C                     	;# 
  3753  091D                     	;# 
  3754  091E                     	;# 
  3755  091F                     	;# 
  3756  0E0F                     	;# 
  3757  0E10                     	;# 
  3758  0E11                     	;# 
  3759  0E12                     	;# 
  3760  0E13                     	;# 
  3761  0E14                     	;# 
  3762  0E15                     	;# 
  3763  0E16                     	;# 
  3764  0E17                     	;# 
  3765  0E18                     	;# 
  3766  0E19                     	;# 
  3767  0E1A                     	;# 
  3768  0E1B                     	;# 
  3769  0E1C                     	;# 
  3770  0E1D                     	;# 
  3771  0E1E                     	;# 
  3772  0E1F                     	;# 
  3773  0E20                     	;# 
  3774  0E21                     	;# 
  3775  0E22                     	;# 
  3776  0E24                     	;# 
  3777  0E25                     	;# 
  3778  0E28                     	;# 
  3779  0E29                     	;# 
  3780  0E2A                     	;# 
  3781  0E2B                     	;# 
  3782  0E2C                     	;# 
  3783  0E2D                     	;# 
  3784  0E2E                     	;# 
  3785  0E2F                     	;# 
  3786  0E90                     	;# 
  3787  0E91                     	;# 
  3788  0E92                     	;# 
  3789  0E94                     	;# 
  3790  0E95                     	;# 
  3791  0E9C                     	;# 
  3792  0E9D                     	;# 
  3793  0E9E                     	;# 
  3794  0E9F                     	;# 
  3795  0EA0                     	;# 
  3796  0EA1                     	;# 
  3797  0EA2                     	;# 
  3798  0EA3                     	;# 
  3799  0EA4                     	;# 
  3800  0EA5                     	;# 
  3801  0EA6                     	;# 
  3802  0EA7                     	;# 
  3803  0F0F                     	;# 
  3804  0F10                     	;# 
  3805  0F11                     	;# 
  3806  0F12                     	;# 
  3807  0F13                     	;# 
  3808  0F14                     	;# 
  3809  0F15                     	;# 
  3810  0F16                     	;# 
  3811  0F17                     	;# 
  3812  0F18                     	;# 
  3813  0F19                     	;# 
  3814  0F1A                     	;# 
  3815  0F1B                     	;# 
  3816  0F1C                     	;# 
  3817  0F1D                     	;# 
  3818  0F1E                     	;# 
  3819  0F1F                     	;# 
  3820  0F20                     	;# 
  3821  0F21                     	;# 
  3822  0F22                     	;# 
  3823  0F23                     	;# 
  3824  0F24                     	;# 
  3825  0F25                     	;# 
  3826  0F26                     	;# 
  3827  0F27                     	;# 
  3828  0F28                     	;# 
  3829  0F29                     	;# 
  3830  0F2A                     	;# 
  3831  0F2B                     	;# 
  3832  0F2C                     	;# 
  3833  0F2D                     	;# 
  3834  0F2E                     	;# 
  3835  0F2F                     	;# 
  3836  0F30                     	;# 
  3837  0F31                     	;# 
  3838  0F32                     	;# 
  3839  0F33                     	;# 
  3840  0F34                     	;# 
  3841  0F35                     	;# 
  3842  0F36                     	;# 
  3843  0F37                     	;# 
  3844  0FE4                     	;# 
  3845  0FE5                     	;# 
  3846  0FE6                     	;# 
  3847  0FE7                     	;# 
  3848  0FE8                     	;# 
  3849  0FE9                     	;# 
  3850  0FEA                     	;# 
  3851  0FEB                     	;# 
  3852  0FED                     	;# 
  3853  0FEE                     	;# 
  3854  0FEF                     	;# 
  3855                           
  3856                           	psect	idataBANK3
  3857  0800                     __pidataBANK3:	
  3858                           
  3859                           ;initializer for _MONTH_DAY
  3860  0800  341F               	retlw	31
  3861  0801  341C               	retlw	28
  3862  0802  341F               	retlw	31
  3863  0803  341E               	retlw	30
  3864  0804  341F               	retlw	31
  3865  0805  341E               	retlw	30
  3866  0806  341F               	retlw	31
  3867  0807  341F               	retlw	31
  3868  0808  341E               	retlw	30
  3869  0809  341F               	retlw	31
  3870  080A  341E               	retlw	30
  3871  080B  341F               	retlw	31
  3872  000B                     _INTCONbits	set	11
  3873  0010                     _PIR0bits	set	16
  3874  0011                     _PIR1bits	set	17
  3875  000E                     _PORTC	set	14
  3876  001E                     _PR2	set	30
  3877  0017                     _T0CON0	set	23
  3878  0017                     _T0CON0bits	set	23
  3879  0018                     _T0CON1	set	24
  3880  001F                     _T2CON	set	31
  3881  001F                     _T2CONbits	set	31
  3882  0016                     _TMR0H	set	22
  3883  0015                     _TMR0L	set	21
  3884  001D                     _TMR2	set	29
  3885  005F                     _GIE	set	95
  3886  0062                     _RA2	set	98
  3887  008C                     _TXIF	set	140
  3888  0090                     _PIE0bits	set	144
  3889  0091                     _PIE1bits	set	145
  3890  008C                     _TRISA	set	140
  3891  008D                     _TRISB	set	141
  3892  008E                     _TRISC	set	142
  3893  010C                     _LATA	set	268
  3894  010D                     _LATB	set	269
  3895  010D                     _LATBbits	set	269
  3896  010E                     _LATC	set	270
  3897  010E                     _LATCbits	set	270
  3898  086D                     _LATB5	set	2157
  3899  0871                     _LATC1	set	2161
  3900  018C                     _ANSELA	set	396
  3901  018D                     _ANSELB	set	397
  3902  018E                     _ANSELC	set	398
  3903  019F                     _BAUD1CON	set	415
  3904  019D                     _RC1STA	set	413
  3905  019D                     _RC1STAbits	set	413
  3906  0199                     _RCREG	set	409
  3907  019C                     _SP1BRGH	set	412
  3908  019B                     _SP1BRGL	set	411
  3909  019E                     _TX1STA	set	414
  3910  019A                     _TXREG	set	410
  3911  0CF1                     _TRMT	set	3313
  3912  020C                     _WPUA	set	524
  3913  020D                     _WPUB	set	525
  3914  020E                     _WPUC	set	526
  3915  0293                     _CCP1CON	set	659
  3916  0293                     _CCP1CONbits	set	659
  3917  0297                     _CCP2CON	set	663
  3918  0297                     _CCP2CONbits	set	663
  3919  0292                     _CCPR1H	set	658
  3920  0291                     _CCPR1L	set	657
  3921  0296                     _CCPR2H	set	662
  3922  0295                     _CCPR2L	set	661
  3923  029F                     _CCPTMRSbits	set	671
  3924  028C                     _ODCONA	set	652
  3925  028D                     _ODCONB	set	653
  3926  028E                     _ODCONC	set	654
  3927  0313                     _CCP3CON	set	787
  3928  0313                     _CCP3CONbits	set	787
  3929  0317                     _CCP4CON	set	791
  3930  0317                     _CCP4CONbits	set	791
  3931  0312                     _CCPR3H	set	786
  3932  0311                     _CCPR3L	set	785
  3933  0316                     _CCPR4H	set	790
  3934  0315                     _CCPR4L	set	789
  3935  0892                     _NVMADRH	set	2194
  3936  0891                     _NVMADRL	set	2193
  3937  0895                     _NVMCON1bits	set	2197
  3938  0896                     _NVMCON2	set	2198
  3939  0893                     _NVMDATL	set	2195
  3940  0919                     _OSCCON1	set	2329
  3941  091B                     _OSCCON3	set	2331
  3942  091D                     _OSCEN	set	2333
  3943  091F                     _OSCFRQ	set	2335
  3944  091E                     _OSCTUNE	set	2334
  3945  0E0F                     _PPSLOCK	set	3599
  3946  0E0F                     _PPSLOCKbits	set	3599
  3947  0E24                     _RXPPSbits	set	3620
  3948  0E9C                     _RB4PPSbits	set	3740
  3949  0EA3                     _RC3PPSbits	set	3747
  3950  0EA4                     _RC4PPSbits	set	3748
  3951  0EA5                     _RC5PPSbits	set	3749
  3952  0EA6                     _RC6PPSbits	set	3750
  3953                           
  3954                           	psect	stringtext
  3955  1000                     __pstringtext:	
  3956  1000                     STR_6:	
  3957  1000  3441               	retlw	65	;'A'
  3958  1001  3454               	retlw	84	;'T'
  3959  1002  342B               	retlw	43	;'+'
  3960  1003  3441               	retlw	65	;'A'
  3961  1004  3444               	retlw	68	;'D'
  3962  1005  3456               	retlw	86	;'V'
  3963  1006  345F               	retlw	95	;'_'
  3964  1007  344D               	retlw	77	;'M'
  3965  1008  3446               	retlw	70	;'F'
  3966  1009  3452               	retlw	82	;'R'
  3967  100A  345F               	retlw	95	;'_'
  3968  100B  3453               	retlw	83	;'S'
  3969  100C  3450               	retlw	80	;'P'
  3970  100D  3443               	retlw	67	;'C'
  3971  100E  343D               	retlw	61	;'='
  3972  100F  3433               	retlw	51	;'3'
  3973  1010  3430               	retlw	48	;'0'
  3974  1011  3433               	retlw	51	;'3'
  3975  1012  3431               	retlw	49	;'1'
  3976  1013  3433               	retlw	51	;'3'
  3977  1014  3431               	retlw	49	;'1'
  3978  1015  3433               	retlw	51	;'3'
  3979  1016  3431               	retlw	49	;'1'
  3980  1017  3433               	retlw	51	;'3'
  3981  1018  3430               	retlw	48	;'0'
  3982  1019  3433               	retlw	51	;'3'
  3983  101A  3431               	retlw	49	;'1'
  3984  101B  3433               	retlw	51	;'3'
  3985  101C  3430               	retlw	48	;'0'
  3986  101D  3433               	retlw	51	;'3'
  3987  101E  3431               	retlw	49	;'1'
  3988  101F  340D               	retlw	13
  3989  1020  340A               	retlw	10
  3990  1021  3400               	retlw	0
  3991  1022                     STR_5:	
  3992  1022  3441               	retlw	65	;'A'
  3993  1023  3454               	retlw	84	;'T'
  3994  1024  342B               	retlw	43	;'+'
  3995  1025  3441               	retlw	65	;'A'
  3996  1026  3444               	retlw	68	;'D'
  3997  1027  3456               	retlw	86	;'V'
  3998  1028  345F               	retlw	95	;'_'
  3999  1029  344D               	retlw	77	;'M'
  4000  102A  3446               	retlw	70	;'F'
  4001  102B  3452               	retlw	82	;'R'
  4002  102C  345F               	retlw	95	;'_'
  4003  102D  3453               	retlw	83	;'S'
  4004  102E  3450               	retlw	80	;'P'
  4005  102F  3443               	retlw	67	;'C'
  4006  1030  343D               	retlw	61	;'='
  4007  1031  343F               	retlw	63	;'?'
  4008  1032  340D               	retlw	13
  4009  1033  340A               	retlw	10
  4010  1034  3400               	retlw	0
  4011  1035                     STR_3:	
  4012  1035  3433               	retlw	51	;'3'
  4013  1036  3430               	retlw	48	;'0'
  4014  1037  3433               	retlw	51	;'3'
  4015  1038  3431               	retlw	49	;'1'
  4016  1039  3433               	retlw	51	;'3'
  4017  103A  3431               	retlw	49	;'1'
  4018  103B  3433               	retlw	51	;'3'
  4019  103C  3431               	retlw	49	;'1'
  4020  103D  3433               	retlw	51	;'3'
  4021  103E  3430               	retlw	48	;'0'
  4022  103F  3433               	retlw	51	;'3'
  4023  1040  3431               	retlw	49	;'1'
  4024  1041  3433               	retlw	51	;'3'
  4025  1042  3430               	retlw	48	;'0'
  4026  1043  3433               	retlw	51	;'3'
  4027  1044  3431               	retlw	49	;'1'
  4028  1045  3400               	retlw	0
  4029  1046                     STR_8:	
  4030  1046  3441               	retlw	65	;'A'
  4031  1047  3454               	retlw	84	;'T'
  4032  1048  342B               	retlw	43	;'+'
  4033  1049  344D               	retlw	77	;'M'
  4034  104A  344F               	retlw	79	;'O'
  4035  104B  3444               	retlw	68	;'D'
  4036  104C  3445               	retlw	69	;'E'
  4037  104D  343D               	retlw	61	;'='
  4038  104E  3444               	retlw	68	;'D'
  4039  104F  3441               	retlw	65	;'A'
  4040  1050  3454               	retlw	84	;'T'
  4041  1051  3441               	retlw	65	;'A'
  4042  1052  340D               	retlw	13
  4043  1053  340A               	retlw	10
  4044  1054  3400               	retlw	0
  4045  1055                     STR_7:	
  4046  1055  3441               	retlw	65	;'A'
  4047  1056  3454               	retlw	84	;'T'
  4048  1057  342B               	retlw	43	;'+'
  4049  1058  3453               	retlw	83	;'S'
  4050  1059  3445               	retlw	69	;'E'
  4051  105A  3454               	retlw	84	;'T'
  4052  105B  343D               	retlw	61	;'='
  4053  105C  3431               	retlw	49	;'1'
  4054  105D  340D               	retlw	13
  4055  105E  340A               	retlw	10
  4056  105F  3400               	retlw	0
  4057  1060                     STR_1:	
  4058  1060  3441               	retlw	65	;'A'
  4059  1061  3454               	retlw	84	;'T'
  4060  1062  342B               	retlw	43	;'+'
  4061  1063  344F               	retlw	79	;'O'
  4062  1064  344B               	retlw	75	;'K'
  4063  1065  340D               	retlw	13
  4064  1066  340A               	retlw	10
  4065  1067  3400               	retlw	0
  4066  1068                     STR_4:	
  4067  1068  3441               	retlw	65	;'A'
  4068  1069  3454               	retlw	84	;'T'
  4069  106A  340D               	retlw	13
  4070  106B  340A               	retlw	10
  4071  106C  3400               	retlw	0
  4072  1060                     
  4073                           ; #config settings
  4074  0000                     
  4075                           	psect	cinit
  4076  003B                     start_initialization:	
  4077  003B                     __initialization:	
  4078                           
  4079                           ; Initialize objects allocated to BANK3
  4080  003B  3000               	movlw	low __pidataBANK3
  4081  003C  0084               	movwf	4
  4082  003D  3088               	movlw	(high __pidataBANK3)| (0+128)
  4083  003E  0085               	movwf	5
  4084  003F  30C0               	movlw	low __pdataBANK3
  4085  0040  0086               	movwf	6
  4086  0041  3001               	movlw	high __pdataBANK3
  4087  0042  0087               	movwf	7
  4088  0043  300C               	movlw	12
  4089  0044  3194  24AB  3180   	fcall	init_ram
  4090                           
  4091                           ; Clear objects allocated to COMMON
  4092  0047  01FC               	clrf	__pbssCOMMON& (0+127)
  4093  0048  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  4094                           
  4095                           ; Clear objects allocated to BANK0
  4096  0049  3064               	movlw	low __pbssBANK0
  4097  004A  0084               	movwf	4
  4098  004B  3000               	movlw	high __pbssBANK0
  4099  004C  0085               	movwf	5
  4100  004D  300C               	movlw	12
  4101  004E  3194  24A5  3180   	fcall	clear_ram0
  4102                           
  4103                           ; Clear objects allocated to BANK1
  4104  0051  30D0               	movlw	low __pbssBANK1
  4105  0052  0084               	movwf	4
  4106  0053  3000               	movlw	high __pbssBANK1
  4107  0054  0085               	movwf	5
  4108  0055  301C               	movlw	28
  4109  0056  3194  24A5  3180   	fcall	clear_ram0
  4110                           
  4111                           ; Clear objects allocated to BANK2
  4112  0059  3020               	movlw	low __pbssBANK2
  4113  005A  0084               	movwf	4
  4114  005B  3001               	movlw	high __pbssBANK2
  4115  005C  0085               	movwf	5
  4116  005D  304F               	movlw	79
  4117  005E  3194  24A5  3180   	fcall	clear_ram0
  4118                           
  4119                           ; Clear objects allocated to BANK3
  4120  0061  30A0               	movlw	low __pbssBANK3
  4121  0062  0084               	movwf	4
  4122  0063  3001               	movlw	high __pbssBANK3
  4123  0064  0085               	movwf	5
  4124  0065  3020               	movlw	32
  4125  0066  3194  24A5         	fcall	clear_ram0
  4126  0068                     end_of_initialization:	
  4127                           ;End of C runtime variable initialization code
  4128                           
  4129  0068                     __end_of__initialization:	
  4130  0068  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4131  0069  0020               	movlb	0
  4132  006A  318B  2BEE         	ljmp	_main	;jump to C main() function
  4133                           
  4134                           	psect	bssCOMMON
  4135  007C                     __pbssCOMMON:	
  4136  007C                     _keyValue:	
  4137  007C                     	ds	1
  4138  007D                     keyScan@lastKey:	
  4139  007D                     	ds	1
  4140                           
  4141                           	psect	bssBANK0
  4142  0064                     __pbssBANK0:	
  4143  0064                     _eusartRunPara:	
  4144  0064                     	ds	7
  4145  006B                     ReadKey@Cont:	
  4146  006B                     	ds	1
  4147  006C                     ReadKey@Trg:	
  4148  006C                     	ds	1
  4149  006D                     TMR2_UserInterruptHandler@cnt:	
  4150  006D                     	ds	1
  4151  006E                     findDeviceFlash@tog:	
  4152  006E                     	ds	1
  4153  006F                     keyScan@rptCount:	
  4154  006F                     	ds	1
  4155                           
  4156                           	psect	bssBANK1
  4157  00D0                     __pbssBANK1:	
  4158  00D0                     _gLedRunPara:	
  4159  00D0                     	ds	21
  4160  00E5                     _gCurrentTime:	
  4161  00E5                     	ds	7
  4162                           
  4163                           	psect	bssBANK2
  4164  0120                     __pbssBANK2:	
  4165  0120                     _gLedPara:	
  4166  0120                     	ds	47
  4167  014F                     _rxBuf:	
  4168  014F                     	ds	32
  4169                           
  4170                           	psect	bssBANK3
  4171  01A0                     __pbssBANK3:	
  4172  01A0                     _txBuf:	
  4173  01A0                     	ds	32
  4174                           
  4175                           	psect	dataBANK3
  4176  01C0                     __pdataBANK3:	
  4177  01C0                     _MONTH_DAY:	
  4178  01C0                     	ds	12
  4179                           
  4180                           	psect	inittext
  4181  14AB                     init_ram:	
  4182  14AB  00FE               	movwf	126
  4183  14AC                     initloop:	
  4184  14AC  0012               	moviw fsr0++
  4185  14AD  001E               	movwi fsr1++
  4186  14AE  0BFE               	decfsz	126,f
  4187  14AF  2CAC               	goto	initloop
  4188  14B0  3400               	retlw	0
  4189                           
  4190                           	psect	clrtext
  4191  14A5                     clear_ram0:	
  4192                           ;	Called with FSR0 containing the base address, and
  4193                           ;	WREG with the size to clear
  4194                           
  4195  14A5  0064               	clrwdt	;clear the watchdog before getting into this loop
  4196  14A6                     clrloop0:	
  4197  14A6  0180               	clrf	0	;clear RAM location pointed to by FSR
  4198  14A7  3101               	addfsr 0,1
  4199  14A8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4200  14A9  2CA6               	goto	clrloop0	;have we reached the end yet?
  4201  14AA  3400               	retlw	0	;all done for this memory range, return
  4202                           
  4203                           	psect	cstackBANK1
  4204  00A0                     __pcstackBANK1:	
  4205  00A0                     readLedPara@addr:	
  4206  00A0                     autoRun@val:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209                           
  4210                           ; 16 bytes @ 0x0
  4211  00A0                     	ds	1
  4212  00A1                     readLedPara@para:	
  4213                           
  4214                           ; 47 bytes @ 0x1
  4215  00A1                     	ds	15
  4216  00B0                     autoRun@tr:	
  4217                           
  4218                           ; 8 bytes @ 0x10
  4219  00B0                     	ds	8
  4220  00B8                     autoRun@duration:	
  4221                           
  4222                           ; 2 bytes @ 0x18
  4223  00B8                     	ds	2
  4224  00BA                     autoRun@dt:	
  4225                           
  4226                           ; 4 bytes @ 0x1A
  4227  00BA                     	ds	4
  4228  00BE                     autoRun@dbrt:	
  4229                           
  4230                           ; 1 bytes @ 0x1E
  4231  00BE                     	ds	1
  4232  00BF                     autoRun@sec:	
  4233                           
  4234                           ; 1 bytes @ 0x1F
  4235  00BF                     	ds	1
  4236  00C0                     autoRun@j:	
  4237                           
  4238                           ; 1 bytes @ 0x20
  4239  00C0                     	ds	1
  4240  00C1                     autoRun@et:	
  4241                           
  4242                           ; 2 bytes @ 0x21
  4243  00C1                     	ds	2
  4244  00C3                     autoRun@ct:	
  4245                           
  4246                           ; 2 bytes @ 0x23
  4247  00C3                     	ds	2
  4248  00C5                     autoRun@st:	
  4249                           
  4250                           ; 2 bytes @ 0x25
  4251  00C5                     	ds	2
  4252  00C7                     autoRun@k:	
  4253                           
  4254                           ; 1 bytes @ 0x27
  4255  00C7                     	ds	1
  4256  00C8                     autoRun@i:	
  4257                           
  4258                           ; 1 bytes @ 0x28
  4259  00C8                     	ds	8
  4260                           
  4261                           	psect	cstackCOMMON
  4262  0070                     __pcstackCOMMON:	
  4263  0070                     ?_eusartSendByte:	
  4264  0070                     ?_strCmp:	
  4265                           ; 1 bytes @ 0x0
  4266                           
  4267  0070                     ?_turnOnLedRamp:	
  4268                           ; 1 bytes @ 0x0
  4269                           
  4270  0070                     ?_turnOffLedRamp:	
  4271                           ; 1 bytes @ 0x0
  4272                           
  4273  0070                     ?_updatePWM:	
  4274                           ; 1 bytes @ 0x0
  4275                           
  4276  0070                     ?_indicateLedBle:	
  4277                           ; 1 bytes @ 0x0
  4278                           
  4279  0070                     ?_PIN_MANAGER_Initialize:	
  4280                           ; 1 bytes @ 0x0
  4281                           
  4282  0070                     ?_PWM1_Initialize:	
  4283                           ; 1 bytes @ 0x0
  4284                           
  4285  0070                     ?_PWM2_Initialize:	
  4286                           ; 1 bytes @ 0x0
  4287                           
  4288  0070                     ?_PWM4_Initialize:	
  4289                           ; 1 bytes @ 0x0
  4290                           
  4291  0070                     ?_PWM3_Initialize:	
  4292                           ; 1 bytes @ 0x0
  4293                           
  4294  0070                     ?_TMR2_Initialize:	
  4295                           ; 1 bytes @ 0x0
  4296                           
  4297  0070                     ?_TMR0_Initialize:	
  4298                           ; 1 bytes @ 0x0
  4299                           
  4300  0070                     ?_EUSART_Initialize:	
  4301                           ; 1 bytes @ 0x0
  4302                           
  4303  0070                     ?_keyScan:	
  4304                           ; 1 bytes @ 0x0
  4305                           
  4306  0070                     ?_keyAction:	
  4307                           ; 1 bytes @ 0x0
  4308                           
  4309  0070                     ?_updateLed:	
  4310                           ; 1 bytes @ 0x0
  4311                           
  4312  0070                     ?_EUSART_RCV_ISR:	
  4313                           ; 1 bytes @ 0x0
  4314                           
  4315  0070                     ??_EUSART_RCV_ISR:	
  4316                           ; 1 bytes @ 0x0
  4317                           
  4318  0070                     ?_runRTC:	
  4319                           ; 1 bytes @ 0x0
  4320                           
  4321  0070                     ?_indicateLedOff:	
  4322                           ; 1 bytes @ 0x0
  4323                           
  4324  0070                     ?_updateDayBright:	
  4325                           ; 1 bytes @ 0x0
  4326                           
  4327  0070                     ?_indicateLedDay:	
  4328                           ; 1 bytes @ 0x0
  4329                           
  4330  0070                     ?_updateDayRiseStatus:	
  4331                           ; 1 bytes @ 0x0
  4332                           
  4333  0070                     ?_updateNightBright:	
  4334                           ; 1 bytes @ 0x0
  4335                           
  4336  0070                     ?_indicateLedNight:	
  4337                           ; 1 bytes @ 0x0
  4338                           
  4339  0070                     ?_updateNightRiseStatus:	
  4340                           ; 1 bytes @ 0x0
  4341                           
  4342  0070                     ?_initRTC:	
  4343                           ; 1 bytes @ 0x0
  4344                           
  4345  0070                     ?_TMR0_StartTimer:	
  4346                           ; 1 bytes @ 0x0
  4347                           
  4348  0070                     ?_TMR2_StartTimer:	
  4349                           ; 1 bytes @ 0x0
  4350                           
  4351  0070                     ?_bleSendDeviceData:	
  4352                           ; 1 bytes @ 0x0
  4353                           
  4354  0070                     ?_bleSendDeviceTime:	
  4355                           ; 1 bytes @ 0x0
  4356                           
  4357  0070                     ?_DecodeCMD:	
  4358                           ; 1 bytes @ 0x0
  4359                           
  4360  0070                     ?_DecodeDATA:	
  4361                           ; 1 bytes @ 0x0
  4362                           
  4363  0070                     ?_initBLE:	
  4364                           ; 1 bytes @ 0x0
  4365                           
  4366  0070                     ?_OSCILLATOR_Initialize:	
  4367                           ; 1 bytes @ 0x0
  4368                           
  4369  0070                     ?_SYSTEM_Initialize:	
  4370                           ; 1 bytes @ 0x0
  4371                           
  4372  0070                     ?_TMR2_UserInterruptHandler:	
  4373                           ; 1 bytes @ 0x0
  4374                           
  4375  0070                     ?_INTERRUPT_InterruptManager:	
  4376                           ; 1 bytes @ 0x0
  4377                           
  4378  0070                     ?_readByte:	
  4379                           ; 1 bytes @ 0x0
  4380                           
  4381  0070                     ?_saveLedPara:	
  4382                           ; 1 bytes @ 0x0
  4383                           
  4384  0070                     ?_ReadKey:	
  4385                           ; 1 bytes @ 0x0
  4386                           
  4387  0070                     ??_ReadKey:	
  4388                           ; 1 bytes @ 0x0
  4389                           
  4390  0070                     ?_autoRun:	
  4391                           ; 1 bytes @ 0x0
  4392                           
  4393  0070                     ?_turnMaxLed:	
  4394                           ; 1 bytes @ 0x0
  4395                           
  4396  0070                     ?_turnOffLed:	
  4397                           ; 1 bytes @ 0x0
  4398                           
  4399  0070                     ?_initLedPara:	
  4400                           ; 1 bytes @ 0x0
  4401                           
  4402  0070                     ?_initLedStatus:	
  4403                           ; 1 bytes @ 0x0
  4404                           
  4405  0070                     ?_initLed:	
  4406                           ; 1 bytes @ 0x0
  4407                           
  4408  0070                     ?_findDeviceFlash:	
  4409                           ; 1 bytes @ 0x0
  4410                           
  4411  0070                     ?_preview:	
  4412                           ; 1 bytes @ 0x0
  4413                           
  4414  0070                     ?_main:	
  4415                           ; 1 bytes @ 0x0
  4416                           
  4417  0070                     ?i1_updatePWM:	
  4418                           ; 1 bytes @ 0x0
  4419                           
  4420  0070                     ?i1_indicateLedOff:	
  4421                           ; 1 bytes @ 0x0
  4422                           
  4423  0070                     ??i1_indicateLedOff:	
  4424                           ; 1 bytes @ 0x0
  4425                           
  4426  0070                     ?i1_indicateLedDay:	
  4427                           ; 1 bytes @ 0x0
  4428                           
  4429  0070                     ??i1_indicateLedDay:	
  4430                           ; 1 bytes @ 0x0
  4431                           
  4432  0070                     ?i1_indicateLedNight:	
  4433                           ; 1 bytes @ 0x0
  4434                           
  4435  0070                     ??i1_indicateLedNight:	
  4436                           ; 1 bytes @ 0x0
  4437                           
  4438  0070                     ?i1_indicateLedBle:	
  4439                           ; 1 bytes @ 0x0
  4440                           
  4441  0070                     ??i1_indicateLedBle:	
  4442                           ; 1 bytes @ 0x0
  4443                           
  4444  0070                     ?i1_updateDayBright:	
  4445                           ; 1 bytes @ 0x0
  4446                           
  4447  0070                     ?i1_updateDayRiseStatus:	
  4448                           ; 1 bytes @ 0x0
  4449                           
  4450  0070                     ??i1_updateDayRiseStatus:	
  4451                           ; 1 bytes @ 0x0
  4452                           
  4453  0070                     ?i1_updateNightBright:	
  4454                           ; 1 bytes @ 0x0
  4455                           
  4456  0070                     ?i1_updateNightRiseStatus:	
  4457                           ; 1 bytes @ 0x0
  4458                           
  4459  0070                     ??i1_updateNightRiseStatus:	
  4460                           ; 1 bytes @ 0x0
  4461                           
  4462  0070                     ?i1_PWM1_LoadDutyValue:	
  4463                           ; 1 bytes @ 0x0
  4464                           
  4465  0070                     ?i1_PWM2_LoadDutyValue:	
  4466                           ; 1 bytes @ 0x0
  4467                           
  4468  0070                     ?i1_PWM3_LoadDutyValue:	
  4469                           ; 1 bytes @ 0x0
  4470                           
  4471  0070                     ?i1_PWM4_LoadDutyValue:	
  4472                           ; 1 bytes @ 0x0
  4473                           
  4474  0070                     ?___lwmod:	
  4475                           ; 1 bytes @ 0x0
  4476                           
  4477  0070                     strCmp@s2:	
  4478                           ; 2 bytes @ 0x0
  4479                           
  4480  0070                     ___lwmod@divisor:	
  4481                           ; 2 bytes @ 0x0
  4482                           
  4483  0070                     i1PWM1_LoadDutyValue@dutyValue:	
  4484                           ; 2 bytes @ 0x0
  4485                           
  4486  0070                     i1PWM2_LoadDutyValue@dutyValue:	
  4487                           ; 2 bytes @ 0x0
  4488                           
  4489  0070                     i1PWM3_LoadDutyValue@dutyValue:	
  4490                           ; 2 bytes @ 0x0
  4491                           
  4492  0070                     i1PWM4_LoadDutyValue@dutyValue:	
  4493                           ; 2 bytes @ 0x0
  4494                           
  4495                           
  4496                           ; 2 bytes @ 0x0
  4497  0070                     	ds	1
  4498  0071                     ReadKey@ReadData:	
  4499                           
  4500                           ; 1 bytes @ 0x1
  4501  0071                     	ds	1
  4502  0072                     ??_strCmp:	
  4503  0072                     ??_keyScan:	
  4504                           ; 1 bytes @ 0x2
  4505                           
  4506  0072                     ??_updateLed:	
  4507                           ; 1 bytes @ 0x2
  4508                           
  4509  0072                     ??i1_updatePWM:	
  4510                           ; 1 bytes @ 0x2
  4511                           
  4512  0072                     ??i1_updateDayBright:	
  4513                           ; 1 bytes @ 0x2
  4514                           
  4515  0072                     ??i1_updateNightBright:	
  4516                           ; 1 bytes @ 0x2
  4517                           
  4518  0072                     ??i1_PWM1_LoadDutyValue:	
  4519                           ; 1 bytes @ 0x2
  4520                           
  4521  0072                     ??i1_PWM2_LoadDutyValue:	
  4522                           ; 1 bytes @ 0x2
  4523                           
  4524  0072                     ??i1_PWM3_LoadDutyValue:	
  4525                           ; 1 bytes @ 0x2
  4526                           
  4527  0072                     ??i1_PWM4_LoadDutyValue:	
  4528                           ; 1 bytes @ 0x2
  4529                           
  4530  0072                     ___lwmod@dividend:	
  4531                           ; 1 bytes @ 0x2
  4532                           
  4533                           
  4534                           ; 2 bytes @ 0x2
  4535  0072                     	ds	1
  4536  0073                     strCmp@s1:	
  4537  0073                     keyScan@keyNum:	
  4538                           ; 1 bytes @ 0x3
  4539                           
  4540  0073                     i1updateDayBright@i:	
  4541                           ; 1 bytes @ 0x3
  4542                           
  4543  0073                     i1updateNightBright@i:	
  4544                           ; 1 bytes @ 0x3
  4545                           
  4546                           
  4547                           ; 1 bytes @ 0x3
  4548  0073                     	ds	1
  4549  0074                     ??_keyAction:	
  4550  0074                     ??_DecodeCMD:	
  4551                           ; 1 bytes @ 0x4
  4552                           
  4553  0074                     ??___lwmod:	
  4554                           ; 1 bytes @ 0x4
  4555                           
  4556                           
  4557                           ; 1 bytes @ 0x4
  4558  0074                     	ds	1
  4559  0075                     ___lwmod@counter:	
  4560                           
  4561                           ; 1 bytes @ 0x5
  4562  0075                     	ds	1
  4563  0076                     ?_checkIsYearLeap:	
  4564  0076                     keyAction@sta:	
  4565                           ; 1 bytes @ 0x6
  4566                           
  4567  0076                     checkIsYearLeap@year:	
  4568                           ; 1 bytes @ 0x6
  4569                           
  4570                           
  4571                           ; 2 bytes @ 0x6
  4572  0076                     	ds	1
  4573  0077                     keyAction@i:	
  4574                           
  4575                           ; 1 bytes @ 0x7
  4576  0077                     	ds	1
  4577  0078                     ??_checkIsYearLeap:	
  4578  0078                     updateLed@i:	
  4579                           ; 1 bytes @ 0x8
  4580                           
  4581                           
  4582                           ; 1 bytes @ 0x8
  4583  0078                     	ds	1
  4584  0079                     ??_TMR2_UserInterruptHandler:	
  4585                           
  4586                           ; 1 bytes @ 0x9
  4587  0079                     	ds	1
  4588  007A                     ??_runRTC:	
  4589                           
  4590                           ; 1 bytes @ 0xA
  4591  007A                     	ds	1
  4592  007B                     ??_INTERRUPT_InterruptManager:	
  4593                           
  4594                           ; 1 bytes @ 0xB
  4595  007B                     	ds	1
  4596                           
  4597                           	psect	cstackBANK0
  4598  0020                     __pcstackBANK0:	
  4599  0020                     ??_eusartSendByte:	
  4600  0020                     ??_turnOnLedRamp:	
  4601                           ; 1 bytes @ 0x0
  4602                           
  4603  0020                     ??_turnOffLedRamp:	
  4604                           ; 1 bytes @ 0x0
  4605                           
  4606  0020                     ??_indicateLedBle:	
  4607                           ; 1 bytes @ 0x0
  4608                           
  4609  0020                     ??_PIN_MANAGER_Initialize:	
  4610                           ; 1 bytes @ 0x0
  4611                           
  4612  0020                     ??_PWM1_Initialize:	
  4613                           ; 1 bytes @ 0x0
  4614                           
  4615  0020                     ??_PWM2_Initialize:	
  4616                           ; 1 bytes @ 0x0
  4617                           
  4618  0020                     ??_PWM4_Initialize:	
  4619                           ; 1 bytes @ 0x0
  4620                           
  4621  0020                     ??_PWM3_Initialize:	
  4622                           ; 1 bytes @ 0x0
  4623                           
  4624  0020                     ??_TMR2_Initialize:	
  4625                           ; 1 bytes @ 0x0
  4626                           
  4627  0020                     ??_TMR0_Initialize:	
  4628                           ; 1 bytes @ 0x0
  4629                           
  4630  0020                     ??_EUSART_Initialize:	
  4631                           ; 1 bytes @ 0x0
  4632                           
  4633  0020                     ??_indicateLedOff:	
  4634                           ; 1 bytes @ 0x0
  4635                           
  4636  0020                     ??_indicateLedDay:	
  4637                           ; 1 bytes @ 0x0
  4638                           
  4639  0020                     ??_updateDayRiseStatus:	
  4640                           ; 1 bytes @ 0x0
  4641                           
  4642  0020                     ??_indicateLedNight:	
  4643                           ; 1 bytes @ 0x0
  4644                           
  4645  0020                     ??_updateNightRiseStatus:	
  4646                           ; 1 bytes @ 0x0
  4647                           
  4648  0020                     ?_PWM3_LoadDutyValue:	
  4649                           ; 1 bytes @ 0x0
  4650                           
  4651  0020                     ?_PWM2_LoadDutyValue:	
  4652                           ; 1 bytes @ 0x0
  4653                           
  4654  0020                     ?_PWM4_LoadDutyValue:	
  4655                           ; 1 bytes @ 0x0
  4656                           
  4657  0020                     ?_PWM1_LoadDutyValue:	
  4658                           ; 1 bytes @ 0x0
  4659                           
  4660  0020                     ??_initRTC:	
  4661                           ; 1 bytes @ 0x0
  4662                           
  4663  0020                     ??_TMR0_StartTimer:	
  4664                           ; 1 bytes @ 0x0
  4665                           
  4666  0020                     ??_TMR2_StartTimer:	
  4667                           ; 1 bytes @ 0x0
  4668                           
  4669  0020                     ?_getCRC:	
  4670                           ; 1 bytes @ 0x0
  4671                           
  4672  0020                     ??_OSCILLATOR_Initialize:	
  4673                           ; 1 bytes @ 0x0
  4674                           
  4675  0020                     ?_DATAEE_WriteByte:	
  4676                           ; 1 bytes @ 0x0
  4677                           
  4678  0020                     ?_DATAEE_ReadByte:	
  4679                           ; 1 bytes @ 0x0
  4680                           
  4681  0020                     ??_preview:	
  4682                           ; 1 bytes @ 0x0
  4683                           
  4684  0020                     ?___wmul:	
  4685                           ; 1 bytes @ 0x0
  4686                           
  4687  0020                     ?___lwdiv:	
  4688                           ; 2 bytes @ 0x0
  4689                           
  4690  0020                     ?___lmul:	
  4691                           ; 2 bytes @ 0x0
  4692                           
  4693  0020                     getCRC@len:	
  4694                           ; 4 bytes @ 0x0
  4695                           
  4696  0020                     eusartSendByte@byte:	
  4697                           ; 1 bytes @ 0x0
  4698                           
  4699  0020                     PIN_MANAGER_Initialize@state:	
  4700                           ; 1 bytes @ 0x0
  4701                           
  4702  0020                     DATAEE_WriteByte@bAdd:	
  4703                           ; 1 bytes @ 0x0
  4704                           
  4705  0020                     DATAEE_ReadByte@bAdd:	
  4706                           ; 2 bytes @ 0x0
  4707                           
  4708  0020                     PWM1_LoadDutyValue@dutyValue:	
  4709                           ; 2 bytes @ 0x0
  4710                           
  4711  0020                     PWM2_LoadDutyValue@dutyValue:	
  4712                           ; 2 bytes @ 0x0
  4713                           
  4714  0020                     PWM3_LoadDutyValue@dutyValue:	
  4715                           ; 2 bytes @ 0x0
  4716                           
  4717  0020                     PWM4_LoadDutyValue@dutyValue:	
  4718                           ; 2 bytes @ 0x0
  4719                           
  4720  0020                     ___wmul@multiplier:	
  4721                           ; 2 bytes @ 0x0
  4722                           
  4723  0020                     ___lwdiv@divisor:	
  4724                           ; 2 bytes @ 0x0
  4725                           
  4726  0020                     ___lmul@multiplier:	
  4727                           ; 2 bytes @ 0x0
  4728                           
  4729                           
  4730                           ; 4 bytes @ 0x0
  4731  0020                     	ds	1
  4732  0021                     ?_eusartSendBuffer:	
  4733  0021                     ??_getCRC:	
  4734                           ; 1 bytes @ 0x1
  4735                           
  4736  0021                     ?_bleSendData:	
  4737                           ; 1 bytes @ 0x1
  4738                           
  4739  0021                     ??_SYSTEM_Initialize:	
  4740                           ; 1 bytes @ 0x1
  4741                           
  4742  0021                     bleSendData@len:	
  4743                           ; 1 bytes @ 0x1
  4744                           
  4745  0021                     turnOnLedRamp@i:	
  4746                           ; 1 bytes @ 0x1
  4747                           
  4748  0021                     turnOffLedRamp@i:	
  4749                           ; 1 bytes @ 0x1
  4750                           
  4751  0021                     eusartSendBuffer@buf:	
  4752                           ; 1 bytes @ 0x1
  4753                           
  4754                           
  4755                           ; 2 bytes @ 0x1
  4756  0021                     	ds	1
  4757  0022                     ??_updatePWM:	
  4758  0022                     ??_updateDayBright:	
  4759                           ; 1 bytes @ 0x2
  4760                           
  4761  0022                     ??_updateNightBright:	
  4762                           ; 1 bytes @ 0x2
  4763                           
  4764  0022                     ??_PWM3_LoadDutyValue:	
  4765                           ; 1 bytes @ 0x2
  4766                           
  4767  0022                     ??_PWM2_LoadDutyValue:	
  4768                           ; 1 bytes @ 0x2
  4769                           
  4770  0022                     ??_PWM4_LoadDutyValue:	
  4771                           ; 1 bytes @ 0x2
  4772                           
  4773  0022                     ??_PWM1_LoadDutyValue:	
  4774                           ; 1 bytes @ 0x2
  4775                           
  4776  0022                     ??_bleSendData:	
  4777                           ; 1 bytes @ 0x2
  4778                           
  4779  0022                     ??_DATAEE_ReadByte:	
  4780                           ; 1 bytes @ 0x2
  4781                           
  4782  0022                     ??_readByte:	
  4783                           ; 1 bytes @ 0x2
  4784                           
  4785  0022                     ??_turnMaxLed:	
  4786                           ; 1 bytes @ 0x2
  4787                           
  4788  0022                     ??_turnOffLed:	
  4789                           ; 1 bytes @ 0x2
  4790                           
  4791  0022                     DATAEE_WriteByte@bData:	
  4792                           ; 1 bytes @ 0x2
  4793                           
  4794  0022                     ___wmul@multiplicand:	
  4795                           ; 1 bytes @ 0x2
  4796                           
  4797  0022                     ___lwdiv@dividend:	
  4798                           ; 2 bytes @ 0x2
  4799                           
  4800                           
  4801                           ; 2 bytes @ 0x2
  4802  0022                     	ds	1
  4803  0023                     ??_eusartSendBuffer:	
  4804  0023                     ??_DATAEE_WriteByte:	
  4805                           ; 1 bytes @ 0x3
  4806                           
  4807  0023                     getCRC@result:	
  4808                           ; 1 bytes @ 0x3
  4809                           
  4810  0023                     DATAEE_WriteByte@GIEBitValue:	
  4811                           ; 1 bytes @ 0x3
  4812                           
  4813  0023                     readByte@addr:	
  4814                           ; 1 bytes @ 0x3
  4815                           
  4816  0023                     updateDayBright@i:	
  4817                           ; 1 bytes @ 0x3
  4818                           
  4819  0023                     updateNightBright@i:	
  4820                           ; 1 bytes @ 0x3
  4821                           
  4822                           
  4823                           ; 1 bytes @ 0x3
  4824  0023                     	ds	1
  4825  0024                     ?_bleSendCMD:	
  4826  0024                     ?_writeByte:	
  4827                           ; 1 bytes @ 0x4
  4828                           
  4829  0024                     ??_initLedStatus:	
  4830                           ; 1 bytes @ 0x4
  4831                           
  4832  0024                     ??___wmul:	
  4833                           ; 1 bytes @ 0x4
  4834                           
  4835  0024                     ??___lwdiv:	
  4836                           ; 1 bytes @ 0x4
  4837                           
  4838  0024                     getCRC@i:	
  4839                           ; 1 bytes @ 0x4
  4840                           
  4841  0024                     bleSendData@frame:	
  4842                           ; 1 bytes @ 0x4
  4843                           
  4844  0024                     writeByte@byte:	
  4845                           ; 1 bytes @ 0x4
  4846                           
  4847  0024                     readByte@result:	
  4848                           ; 1 bytes @ 0x4
  4849                           
  4850  0024                     bleSendCMD@pBuf:	
  4851                           ; 1 bytes @ 0x4
  4852                           
  4853  0024                     ___wmul@product:	
  4854                           ; 2 bytes @ 0x4
  4855                           
  4856  0024                     ___lmul@multiplicand:	
  4857                           ; 2 bytes @ 0x4
  4858                           
  4859                           
  4860                           ; 4 bytes @ 0x4
  4861  0024                     	ds	1
  4862  0025                     ??_writeByte:	
  4863  0025                     ?_readBuffer:	
  4864                           ; 1 bytes @ 0x5
  4865                           
  4866  0025                     getCRC@pbuf:	
  4867                           ; 1 bytes @ 0x5
  4868                           
  4869  0025                     readBuffer@buf:	
  4870                           ; 1 bytes @ 0x5
  4871                           
  4872  0025                     initLedStatus@sta:	
  4873                           ; 1 bytes @ 0x5
  4874                           
  4875  0025                     ___lwdiv@quotient:	
  4876                           ; 1 bytes @ 0x5
  4877                           
  4878                           
  4879                           ; 2 bytes @ 0x5
  4880  0025                     	ds	1
  4881  0026                     ??_bleSendCMD:	
  4882  0026                     ??_bleSendDeviceData:	
  4883                           ; 1 bytes @ 0x6
  4884                           
  4885  0026                     ??_bleSendDeviceTime:	
  4886                           ; 1 bytes @ 0x6
  4887                           
  4888  0026                     writeByte@addr:	
  4889                           ; 1 bytes @ 0x6
  4890                           
  4891  0026                     readBuffer@len:	
  4892                           ; 1 bytes @ 0x6
  4893                           
  4894  0026                     initLedStatus@i:	
  4895                           ; 1 bytes @ 0x6
  4896                           
  4897                           
  4898                           ; 1 bytes @ 0x6
  4899  0026                     	ds	1
  4900  0027                     ??_initBLE:	
  4901  0027                     ?_writeBuffer:	
  4902                           ; 1 bytes @ 0x7
  4903                           
  4904  0027                     ??_readBuffer:	
  4905                           ; 1 bytes @ 0x7
  4906                           
  4907  0027                     ??_findDeviceFlash:	
  4908                           ; 1 bytes @ 0x7
  4909                           
  4910  0027                     writeBuffer@buf:	
  4911                           ; 1 bytes @ 0x7
  4912                           
  4913  0027                     ___lwdiv@counter:	
  4914                           ; 1 bytes @ 0x7
  4915                           
  4916                           
  4917                           ; 1 bytes @ 0x7
  4918  0027                     	ds	1
  4919  0028                     ??___lmul:	
  4920  0028                     bleSendDeviceData@len:	
  4921                           ; 1 bytes @ 0x8
  4922                           
  4923  0028                     bleSendDeviceTime@len:	
  4924                           ; 1 bytes @ 0x8
  4925                           
  4926  0028                     writeBuffer@len:	
  4927                           ; 1 bytes @ 0x8
  4928                           
  4929  0028                     ___lmul@product:	
  4930                           ; 1 bytes @ 0x8
  4931                           
  4932                           
  4933                           ; 4 bytes @ 0x8
  4934  0028                     	ds	1
  4935  0029                     ??_writeBuffer:	
  4936  0029                     bleSendDeviceData@i:	
  4937                           ; 1 bytes @ 0x9
  4938                           
  4939  0029                     bleSendDeviceTime@i:	
  4940                           ; 1 bytes @ 0x9
  4941                           
  4942  0029                     readBuffer@addr:	
  4943                           ; 1 bytes @ 0x9
  4944                           
  4945                           
  4946                           ; 1 bytes @ 0x9
  4947  0029                     	ds	1
  4948  002A                     ??_DecodeDATA:	
  4949  002A                     readBuffer@i:	
  4950                           ; 1 bytes @ 0xA
  4951                           
  4952                           
  4953                           ; 1 bytes @ 0xA
  4954  002A                     	ds	1
  4955  002B                     ?_readLedPara:	
  4956  002B                     writeBuffer@addr:	
  4957                           ; 47 bytes @ 0xB
  4958                           
  4959                           
  4960                           ; 1 bytes @ 0xB
  4961  002B                     	ds	1
  4962  002C                     ?___lldiv:	
  4963  002C                     writeBuffer@i:	
  4964                           ; 4 bytes @ 0xC
  4965                           
  4966  002C                     ___lldiv@divisor:	
  4967                           ; 1 bytes @ 0xC
  4968                           
  4969                           
  4970                           ; 4 bytes @ 0xC
  4971  002C                     	ds	1
  4972  002D                     ?_writeLedPara:	
  4973  002D                     writeLedPara@para:	
  4974                           ; 1 bytes @ 0xD
  4975                           
  4976                           
  4977                           ; 47 bytes @ 0xD
  4978  002D                     	ds	2
  4979  002F                     DecodeDATA@idx:	
  4980                           
  4981                           ; 1 bytes @ 0xF
  4982  002F                     	ds	1
  4983  0030                     DecodeDATA@len_243:	
  4984  0030                     ___lldiv@dividend:	
  4985                           ; 1 bytes @ 0x10
  4986                           
  4987                           
  4988                           ; 4 bytes @ 0x10
  4989  0030                     	ds	1
  4990  0031                     DecodeDATA@val_249:	
  4991                           
  4992                           ; 2 bytes @ 0x11
  4993  0031                     	ds	2
  4994  0033                     DecodeDATA@len:	
  4995                           
  4996                           ; 1 bytes @ 0x13
  4997  0033                     	ds	1
  4998  0034                     ??___lldiv:	
  4999  0034                     DecodeDATA@len_247:	
  5000                           ; 1 bytes @ 0x14
  5001                           
  5002                           
  5003                           ; 1 bytes @ 0x14
  5004  0034                     	ds	1
  5005  0035                     DecodeDATA@val:	
  5006  0035                     ___lldiv@quotient:	
  5007                           ; 2 bytes @ 0x15
  5008                           
  5009                           
  5010                           ; 4 bytes @ 0x15
  5011  0035                     	ds	2
  5012  0037                     DecodeDATA@i_244:	
  5013                           
  5014                           ; 1 bytes @ 0x17
  5015  0037                     	ds	1
  5016  0038                     DecodeDATA@i_242:	
  5017                           
  5018                           ; 1 bytes @ 0x18
  5019  0038                     	ds	1
  5020  0039                     DecodeDATA@i_248:	
  5021  0039                     ___lldiv@counter:	
  5022                           ; 1 bytes @ 0x19
  5023                           
  5024                           
  5025                           ; 1 bytes @ 0x19
  5026  0039                     	ds	1
  5027  003A                     ??_autoRun:	
  5028  003A                     DecodeDATA@idx_245:	
  5029                           ; 1 bytes @ 0x1A
  5030                           
  5031                           
  5032                           ; 1 bytes @ 0x1A
  5033  003A                     	ds	1
  5034  003B                     DecodeDATA@idx_246:	
  5035                           
  5036                           ; 1 bytes @ 0x1B
  5037  003B                     	ds	1
  5038  003C                     DecodeDATA@i:	
  5039                           
  5040                           ; 1 bytes @ 0x1C
  5041  003C                     	ds	30
  5042  005A                     ??_readLedPara:	
  5043                           
  5044                           ; 1 bytes @ 0x3A
  5045  005A                     	ds	2
  5046  005C                     ??_writeLedPara:	
  5047  005C                     ??_initLedPara:	
  5048                           ; 1 bytes @ 0x3C
  5049                           
  5050                           
  5051                           ; 1 bytes @ 0x3C
  5052  005C                     	ds	2
  5053  005E                     writeLedPara@addr:	
  5054                           
  5055                           ; 1 bytes @ 0x3E
  5056  005E                     	ds	1
  5057  005F                     ??_saveLedPara:	
  5058                           
  5059                           ; 1 bytes @ 0x3F
  5060  005F                     	ds	1
  5061  0060                     initLedPara@j:	
  5062                           
  5063                           ; 1 bytes @ 0x40
  5064  0060                     	ds	1
  5065  0061                     initLedPara@i:	
  5066                           
  5067                           ; 1 bytes @ 0x41
  5068  0061                     	ds	1
  5069  0062                     ??_initLed:	
  5070  0062                     ??_main:	
  5071                           ; 1 bytes @ 0x42
  5072                           
  5073                           
  5074                           ; 1 bytes @ 0x42
  5075  0062                     	ds	2
  5076                           
  5077                           	psect	maintext
  5078  0BEE                     __pmaintext:	
  5079 ;;
  5080 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5081 ;;
  5082 ;; *************** function _main *****************
  5083 ;; Defined at:
  5084 ;;		line 58 in file "src/main.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;		None
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;		None
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  1    wreg      void 
  5091 ;; Registers used:
  5092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5093 ;; Tracked objects:
  5094 ;;		On entry : B1F/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5102 ;;Total ram usage:        2 bytes
  5103 ;; Hardware stack levels required when called:   12
  5104 ;; This function calls:
  5105 ;;		_DecodeDATA
  5106 ;;		_SYSTEM_Initialize
  5107 ;;		_TMR0_StartTimer
  5108 ;;		_TMR2_StartTimer
  5109 ;;		_autoRun
  5110 ;;		_findDeviceFlash
  5111 ;;		_initBLE
  5112 ;;		_initLed
  5113 ;;		_initRTC
  5114 ;;		_preview
  5115 ;;		_saveLedPara
  5116 ;; This function is called by:
  5117 ;;		Startup code after reset
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           
  5122                           ;psect for function _main
  5123  0BEE                     _main:	
  5124                           
  5125                           ;main.c: 61: SYSTEM_Initialize();
  5126                           
  5127                           ;incstack = 0
  5128                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5129  0BEE  3196  26BC  318B   	fcall	_SYSTEM_Initialize
  5130                           
  5131                           ;main.c: 63: (INTCONbits.GIE = 1);
  5132  0BF1  178B               	bsf	11,7	;volatile
  5133                           
  5134                           ;main.c: 65: (INTCONbits.PEIE = 1);
  5135  0BF2  170B               	bsf	11,6	;volatile
  5136                           
  5137                           ;main.c: 68: initLed();
  5138  0BF3  3194  249F  318B   	fcall	_initLed
  5139                           
  5140                           ;main.c: 70: initRTC();
  5141  0BF6  3195  2581  318B   	fcall	_initRTC
  5142                           
  5143                           ;main.c: 71: TMR0_StartTimer();
  5144  0BF9  3194  2471  318B   	fcall	_TMR0_StartTimer
  5145                           
  5146                           ;main.c: 74: TMR2_StartTimer();
  5147  0BFC  3194  2474  318B   	fcall	_TMR2_StartTimer
  5148                           
  5149                           ;main.c: 76: initBLE();
  5150  0BFF  318C  2446  318B   	fcall	_initBLE
  5151  0C02                     l649:	
  5152                           ;main.c: 78: while (1)
  5153                           
  5154  0C02  0064               	clrwdt	;# 
  5155                           
  5156                           ;main.c: 82: if(eusartRunPara.fMode)
  5157  0C03  0020               	movlb	0	; select bank0
  5158  0C04  1C64               	btfss	_eusartRunPara,0	;volatile
  5159  0C05  2C02               	goto	l649
  5160                           
  5161                           ;main.c: 83: {
  5162                           ;main.c: 84: if((RA2 == 0) && LATC1)
  5163  0C06  190C               	btfsc	12,2	;volatile
  5164  0C07  2C18               	goto	l4442
  5165  0C08  0022               	movlb	2	; select bank2
  5166  0C09  1C8E               	btfss	14,1	;volatile
  5167  0C0A  2C18               	goto	l4442
  5168                           
  5169                           ;main.c: 85: {
  5170                           ;main.c: 86: eusartRunPara.nRcvIdx = 0;
  5171  0C0B  0020               	movlb	0	; select bank0
  5172  0C0C  01E8               	clrf	_eusartRunPara+4	;volatile
  5173                           
  5174                           ;main.c: 87: _delay((unsigned long)((800)*(16000000/4000000.0)));
  5175  0C0D  3005               	movlw	5
  5176  0C0E  00E3               	movwf	??_main+1
  5177  0C0F  3026               	movlw	38
  5178  0C10  00E2               	movwf	??_main
  5179  0C11                     u5277:	
  5180  0C11  0BE2               	decfsz	??_main,f
  5181  0C12  2C11               	goto	u5277
  5182  0C13  0BE3               	decfsz	??_main+1,f
  5183  0C14  2C11               	goto	u5277
  5184  0C15  0000               	nop
  5185                           
  5186                           ;main.c: 88: LATC1 = 0;
  5187  0C16  0022               	movlb	2	; select bank2
  5188  0C17  108E               	bcf	14,1	;volatile
  5189  0C18                     l4442:	
  5190                           
  5191                           ;main.c: 89: }
  5192                           ;main.c: 90: if(RA2 && (LATC1 == 0))
  5193  0C18  0020               	movlb	0	; select bank0
  5194  0C19  1D0C               	btfss	12,2	;volatile
  5195  0C1A  2C24               	goto	l4452
  5196  0C1B  0022               	movlb	2	; select bank2
  5197  0C1C  188E               	btfsc	14,1	;volatile
  5198  0C1D  2C24               	goto	l4452
  5199                           
  5200                           ;main.c: 91: {
  5201                           ;main.c: 92: LATC1 = 1;
  5202  0C1E  148E               	bsf	14,1	;volatile
  5203                           
  5204                           ;main.c: 93: DecodeDATA();
  5205  0C1F  3183  23EC  318B   	fcall	_DecodeDATA
  5206                           
  5207                           ;main.c: 94: eusartRunPara.nRcvIdx = 0;
  5208  0C22  0020               	movlb	0	; select bank0
  5209  0C23  01E8               	clrf	_eusartRunPara+4	;volatile
  5210  0C24                     l4452:	
  5211                           
  5212                           ;main.c: 95: }
  5213                           ;main.c: 97: if (gLedRunPara.fSec)
  5214  0C24  0021               	movlb	1	; select bank1
  5215  0C25  1CD0               	btfss	_gLedRunPara^(0+128),1	;volatile
  5216  0C26  2C02               	goto	l649
  5217                           
  5218                           ;main.c: 98: {
  5219                           ;main.c: 99: gLedRunPara.fSec = 0;
  5220  0C27  10D0               	bcf	_gLedRunPara^(0+128),1	;volatile
  5221                           
  5222                           ;main.c: 101: if (gLedRunPara.find)
  5223  0C28  1C50               	btfss	_gLedRunPara^(0+128),0	;volatile
  5224  0C29  2C2E               	goto	l4458
  5225                           
  5226                           ;main.c: 102: {
  5227                           ;main.c: 103: findDeviceFlash();
  5228  0C2A  3196  26A2  318B   	fcall	_findDeviceFlash
  5229                           
  5230                           ;main.c: 104: }
  5231  0C2D  2C3F               	goto	l4468
  5232  0C2E                     l4458:	
  5233                           
  5234                           ;main.c: 105: else if (gLedPara.fSta == 3 && gLedPara.fAuto)
  5235  0C2E  0022               	movlb	2	; select bank2
  5236  0C2F  0C20               	rrf	_gLedPara^(0+256),w	;volatile
  5237  0C30  3903               	andlw	3
  5238  0C31  3A03               	xorlw	3
  5239  0C32  1903               	btfsc	3,2
  5240  0C33  1C20               	btfss	_gLedPara^(0+256),0	;volatile
  5241  0C34  2C3F               	goto	l4468
  5242                           
  5243                           ;main.c: 106: {
  5244                           ;main.c: 108: if (gLedRunPara.fPrev)
  5245  0C35  0021               	movlb	1	; select bank1
  5246  0C36  1DD0               	btfss	_gLedRunPara^(0+128),3	;volatile
  5247  0C37  2C3C               	goto	l4466
  5248                           
  5249                           ;main.c: 109: {
  5250                           ;main.c: 110: preview();
  5251  0C38  3195  2502  318B   	fcall	_preview
  5252                           
  5253                           ;main.c: 111: }
  5254  0C3B  2C3F               	goto	l4468
  5255  0C3C                     l4466:	
  5256                           
  5257                           ;main.c: 112: else
  5258                           ;main.c: 113: {
  5259                           ;main.c: 114: autoRun();
  5260  0C3C  3180  206C  318B   	fcall	_autoRun
  5261  0C3F                     l4468:	
  5262                           
  5263                           ;main.c: 115: }
  5264                           ;main.c: 116: }
  5265                           ;main.c: 118: if (gLedRunPara.fSave)
  5266  0C3F  0021               	movlb	1	; select bank1
  5267  0C40  1D50               	btfss	_gLedRunPara^(0+128),2	;volatile
  5268  0C41  2C02               	goto	l649
  5269                           
  5270                           ;main.c: 119: {
  5271                           ;main.c: 120: saveLedPara();
  5272  0C42  3197  2746  318B   	fcall	_saveLedPara
  5273  0C45  2C02               	goto	l649
  5274  0C46                     __end_of_main:	
  5275                           
  5276                           	psect	text1
  5277  1746                     __ptext1:	
  5278 ;; *************** function _saveLedPara *****************
  5279 ;; Defined at:
  5280 ;;		line 108 in file "src/eeprom.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;		None
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;		None
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  1    wreg      void 
  5287 ;; Registers used:
  5288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5297 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5298 ;;Total ram usage:        1 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; Hardware stack levels required when called:   10
  5301 ;; This function calls:
  5302 ;;		_writeLedPara
  5303 ;; This function is called by:
  5304 ;;		_main
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           
  5309                           ;psect for function _saveLedPara
  5310  1746                     _saveLedPara:	
  5311                           
  5312                           ;eeprom.c: 110: if (gLedRunPara.nSaveDelayCount > 0)
  5313                           
  5314                           ;incstack = 0
  5315                           ; Regs used in _saveLedPara: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5316  1746  0021               	movlb	1	; select bank1
  5317  1747  0853               	movf	(_gLedRunPara^(0+128)+3),w	;volatile
  5318  1748  1903               	btfsc	3,2
  5319  1749  2F4C               	goto	l317
  5320                           
  5321                           ;eeprom.c: 111: {
  5322                           ;eeprom.c: 112: gLedRunPara.nSaveDelayCount--;
  5323  174A  3001               	movlw	1
  5324  174B  02D3               	subwf	(_gLedRunPara^(0+128)+3),f	;volatile
  5325  174C                     l317:	
  5326                           
  5327                           ;eeprom.c: 113: }
  5328                           ;eeprom.c: 114: if (gLedRunPara.nSaveDelayCount == 0)
  5329  174C  0853               	movf	(_gLedRunPara^(0+128)+3),w	;volatile
  5330  174D  1D03               	btfss	3,2
  5331  174E  0008               	return
  5332                           
  5333                           ;eeprom.c: 115: {
  5334                           ;eeprom.c: 116: writeLedPara( 0x10, gLedPara );
  5335  174F  3020               	movlw	low _gLedPara
  5336  1750  0086               	movwf	6
  5337  1751  3001               	movlw	high _gLedPara
  5338  1752  0087               	movwf	7
  5339  1753  302D               	movlw	low writeLedPara@para
  5340  1754  0084               	movwf	4
  5341  1755  3000               	movlw	high writeLedPara@para
  5342  1756  0085               	movwf	5
  5343  1757  302F               	movlw	47
  5344  1758  0020               	movlb	0	; select bank0
  5345  1759  00DF               	movwf	??_saveLedPara
  5346  175A                     u4800:	
  5347  175A  0016               	moviw fsr1++
  5348  175B  001A               	movwi fsr0++
  5349  175C  0BDF               	decfsz	??_saveLedPara,f
  5350  175D  2F5A               	goto	u4800
  5351  175E  3010               	movlw	16
  5352  175F  3195  250D         	fcall	_writeLedPara
  5353                           
  5354                           ;eeprom.c: 117: gLedRunPara.fSave = 0;
  5355  1761  0021               	movlb	1	; select bank1
  5356  1762  1150               	bcf	_gLedRunPara^(0+128),2	;volatile
  5357  1763  0008               	return
  5358  1764                     __end_of_saveLedPara:	
  5359                           
  5360                           	psect	text2
  5361  150D                     __ptext2:	
  5362 ;; *************** function _writeLedPara *****************
  5363 ;; Defined at:
  5364 ;;		line 91 in file "src/eeprom.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;  addr            1    wreg     unsigned char 
  5367 ;;  para           47   13[BANK0 ] struct .
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;  addr            1   62[BANK0 ] unsigned char 
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  1    wreg      void 
  5372 ;; Registers used:
  5373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5379 ;;      Params:         0      47       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5383 ;;Total ram usage:       50 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; Hardware stack levels required when called:    9
  5386 ;; This function calls:
  5387 ;;		_writeBuffer
  5388 ;; This function is called by:
  5389 ;;		_saveLedPara
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           
  5394                           ;psect for function _writeLedPara
  5395  150D                     _writeLedPara:	
  5396                           
  5397                           ;incstack = 0
  5398                           ; Regs used in _writeLedPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5399                           ;writeLedPara@addr stored from wreg
  5400  150D  0020               	movlb	0	; select bank0
  5401  150E  00DE               	movwf	writeLedPara@addr
  5402                           
  5403                           ;eeprom.c: 93: writeBuffer(addr, (unsigned char*)&para, sizeof(para));
  5404  150F  302D               	movlw	(low (writeLedPara@para| 0))& (0+255)
  5405  1510  00DC               	movwf	??_writeLedPara
  5406  1511  085C               	movf	??_writeLedPara,w
  5407  1512  00A7               	movwf	writeBuffer@buf
  5408  1513  302F               	movlw	47
  5409  1514  00DD               	movwf	??_writeLedPara+1
  5410  1515  085D               	movf	??_writeLedPara+1,w
  5411  1516  00A8               	movwf	writeBuffer@len
  5412  1517  085E               	movf	writeLedPara@addr,w
  5413  1518  3197  272A         	fcall	_writeBuffer
  5414  151A  0008               	return
  5415  151B                     __end_of_writeLedPara:	
  5416                           
  5417                           	psect	text3
  5418  172A                     __ptext3:	
  5419 ;; *************** function _writeBuffer *****************
  5420 ;; Defined at:
  5421 ;;		line 64 in file "src/eeprom.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;  addr            1    wreg     unsigned char 
  5424 ;;  buf             1    7[BANK0 ] PTR unsigned char 
  5425 ;;		 -> writeLedPara@para(47), 
  5426 ;;  len             1    8[BANK0 ] unsigned char 
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;  addr            1   11[BANK0 ] unsigned char 
  5429 ;;  i               1   12[BANK0 ] unsigned char 
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  1    wreg      void 
  5432 ;; Registers used:
  5433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5439 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;Total ram usage:        6 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    8
  5446 ;; This function calls:
  5447 ;;		_writeByte
  5448 ;; This function is called by:
  5449 ;;		_writeLedPara
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _writeBuffer
  5455  172A                     _writeBuffer:	
  5456                           
  5457                           ;incstack = 0
  5458                           ; Regs used in _writeBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5459                           ;writeBuffer@addr stored from wreg
  5460  172A  0020               	movlb	0	; select bank0
  5461  172B  00AB               	movwf	writeBuffer@addr
  5462                           
  5463                           ;eeprom.c: 66: for (unsigned char i = 0; i < len; i++)
  5464  172C  01AC               	clrf	writeBuffer@i
  5465  172D                     l3166:	
  5466  172D  0828               	movf	writeBuffer@len,w
  5467  172E  022C               	subwf	writeBuffer@i,w
  5468  172F  1803               	btfsc	3,0
  5469  1730  0008               	return
  5470                           
  5471                           ;eeprom.c: 67: {
  5472                           ;eeprom.c: 68: writeByte((addr+i), *(buf+i));
  5473  1731  082C               	movf	writeBuffer@i,w
  5474  1732  0727               	addwf	writeBuffer@buf,w
  5475  1733  00A9               	movwf	??_writeBuffer
  5476  1734  0829               	movf	??_writeBuffer,w
  5477  1735  0086               	movwf	6
  5478  1736  0187               	clrf	7
  5479  1737  0801               	movf	1,w
  5480  1738  00AA               	movwf	??_writeBuffer+1
  5481  1739  082A               	movf	??_writeBuffer+1,w
  5482  173A  00A4               	movwf	writeByte@byte
  5483  173B  082B               	movf	writeBuffer@addr,w
  5484  173C  072C               	addwf	writeBuffer@i,w
  5485  173D  3195  252A  3197   	fcall	_writeByte
  5486  1740  3001               	movlw	1
  5487  1741  0020               	movlb	0	; select bank0
  5488  1742  00A9               	movwf	??_writeBuffer
  5489  1743  0829               	movf	??_writeBuffer,w
  5490  1744  07AC               	addwf	writeBuffer@i,f
  5491  1745  2F2D               	goto	l3166
  5492  1746                     __end_of_writeBuffer:	
  5493                           
  5494                           	psect	text4
  5495  152A                     __ptext4:	
  5496 ;; *************** function _writeByte *****************
  5497 ;; Defined at:
  5498 ;;		line 42 in file "src/eeprom.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;  addr            1    wreg     unsigned char 
  5501 ;;  byte            1    4[BANK0 ] unsigned char 
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;  addr            1    6[BANK0 ] unsigned char 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      void 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2, status,0, pclath, cstack
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5513 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;Total ram usage:        3 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    7
  5520 ;; This function calls:
  5521 ;;		_DATAEE_WriteByte
  5522 ;; This function is called by:
  5523 ;;		_writeBuffer
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _writeByte
  5529  152A                     _writeByte:	
  5530                           
  5531                           ;incstack = 0
  5532                           ; Regs used in _writeByte: [wreg+status,2+status,0+pclath+cstack]
  5533                           ;writeByte@addr stored from wreg
  5534  152A  0020               	movlb	0	; select bank0
  5535  152B  00A6               	movwf	writeByte@addr
  5536                           
  5537                           ;eeprom.c: 44: DATAEE_WriteByte(0x7000 + addr, byte);
  5538  152C  0826               	movf	writeByte@addr,w
  5539  152D  3E00               	addlw	0
  5540  152E  00A0               	movwf	DATAEE_WriteByte@bAdd
  5541  152F  3070               	movlw	112
  5542  1530  1803               	skipnc
  5543  1531  3071               	movlw	113
  5544  1532  00A1               	movwf	DATAEE_WriteByte@bAdd+1
  5545  1533  0824               	movf	writeByte@byte,w
  5546  1534  00A5               	movwf	??_writeByte
  5547  1535  0825               	movf	??_writeByte,w
  5548  1536  00A2               	movwf	DATAEE_WriteByte@bData
  5549  1537  3188  206E         	fcall	_DATAEE_WriteByte
  5550  1539  0008               	return
  5551  153A                     __end_of_writeByte:	
  5552                           
  5553                           	psect	text5
  5554  086E                     __ptext5:	
  5555 ;; *************** function _DATAEE_WriteByte *****************
  5556 ;; Defined at:
  5557 ;;		line 3 in file "src/eeprom.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;  bAdd            2    0[BANK0 ] unsigned int 
  5560 ;;  bData           1    2[BANK0 ] unsigned char 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  5563 ;; Return value:  Size  Location     Type
  5564 ;;                  1    wreg      void 
  5565 ;; Registers used:
  5566 ;;		wreg, status,2, status,0
  5567 ;; Tracked objects:
  5568 ;;		On entry : 0/0
  5569 ;;		On exit  : 0/0
  5570 ;;		Unchanged: 0/0
  5571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5572 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;Total ram usage:        4 bytes
  5577 ;; Hardware stack levels used:    1
  5578 ;; Hardware stack levels required when called:    6
  5579 ;; This function calls:
  5580 ;;		Nothing
  5581 ;; This function is called by:
  5582 ;;		_writeByte
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           
  5587                           ;psect for function _DATAEE_WriteByte
  5588  086E                     _DATAEE_WriteByte:	
  5589                           
  5590                           ;eeprom.c: 5: unsigned char GIEBitValue = INTCONbits.GIE;
  5591                           
  5592                           ;incstack = 0
  5593                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  5594  086E  3000               	movlw	0
  5595  086F  1B8B               	btfsc	11,7	;volatile
  5596  0870  3001               	movlw	1
  5597  0871  0020               	movlb	0	; select bank0
  5598  0872  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  5599                           
  5600                           ;eeprom.c: 7: NVMADRH = ((bAdd >> 8) & 0xFF);
  5601  0873  0821               	movf	DATAEE_WriteByte@bAdd+1,w
  5602  0874  0031               	movlb	17	; select bank17
  5603  0875  0092               	movwf	18	;volatile
  5604                           
  5605                           ;eeprom.c: 8: NVMADRL = (bAdd & 0xFF);
  5606  0876  0020               	movlb	0	; select bank0
  5607  0877  0820               	movf	DATAEE_WriteByte@bAdd,w
  5608  0878  0031               	movlb	17	; select bank17
  5609  0879  0091               	movwf	17	;volatile
  5610                           
  5611                           ;eeprom.c: 9: NVMDATL = bData;
  5612  087A  0020               	movlb	0	; select bank0
  5613  087B  0822               	movf	DATAEE_WriteByte@bData,w
  5614  087C  0031               	movlb	17	; select bank17
  5615  087D  0093               	movwf	19	;volatile
  5616                           
  5617                           ;eeprom.c: 10: NVMCON1bits.NVMREGS = 1;
  5618  087E  1715               	bsf	21,6	;volsfr
  5619                           
  5620                           ;eeprom.c: 11: NVMCON1bits.WREN = 1;
  5621  087F  1515               	bsf	21,2	;volsfr
  5622                           
  5623                           ;eeprom.c: 12: INTCONbits.GIE = 0;
  5624  0880  138B               	bcf	11,7	;volatile
  5625                           
  5626                           ;eeprom.c: 13: NVMCON2 = 0x55;
  5627  0881  3055               	movlw	85
  5628  0882  0096               	movwf	22	;volsfr
  5629                           
  5630                           ;eeprom.c: 14: NVMCON2 = 0xAA;
  5631  0883  30AA               	movlw	170
  5632  0884  0096               	movwf	22	;volsfr
  5633                           
  5634                           ;eeprom.c: 15: NVMCON1bits.WR = 1;
  5635  0885  1495               	bsf	21,1	;volsfr
  5636  0886                     l284:	
  5637                           ;eeprom.c: 18: {
  5638                           
  5639                           ;eeprom.c: 17: while (NVMCON1bits.WR)
  5640                           
  5641  0886  1895               	btfsc	21,1	;volsfr
  5642  0887  2886               	goto	l284
  5643                           
  5644                           ;eeprom.c: 19: }
  5645                           ;eeprom.c: 21: NVMCON1bits.WREN = 0;
  5646  0888  1115               	bcf	21,2	;volsfr
  5647                           
  5648                           ;eeprom.c: 22: INTCONbits.GIE = GIEBitValue;
  5649  0889  0020               	movlb	0	; select bank0
  5650  088A  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  5651  088B  1C03               	skipc
  5652  088C  138B               	bcf	11,7	;volatile
  5653  088D  1803               	skipnc
  5654  088E  178B               	bsf	11,7	;volatile
  5655  088F  0008               	return
  5656  0890                     __end_of_DATAEE_WriteByte:	
  5657                           
  5658                           	psect	text6
  5659  1502                     __ptext6:	
  5660 ;; *************** function _preview *****************
  5661 ;; Defined at:
  5662 ;;		line 318 in file "src/led.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;		None
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;		None
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  1    wreg      void 
  5669 ;; Registers used:
  5670 ;;		wreg, status,2, status,0
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5680 ;;Total ram usage:        0 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    6
  5683 ;; This function calls:
  5684 ;;		Nothing
  5685 ;; This function is called by:
  5686 ;;		_main
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           
  5691                           ;psect for function _preview
  5692  1502                     _preview:	
  5693                           
  5694                           ;led.c: 320: if (gLedRunPara.nPrevCount > 0)
  5695                           
  5696                           ;incstack = 0
  5697                           ; Regs used in _preview: [wreg+status,2+status,0]
  5698  1502  0021               	movlb	1	; select bank1
  5699  1503  0852               	movf	(_gLedRunPara^(0+128)+2),w	;volatile
  5700  1504  1903               	btfsc	3,2
  5701  1505  2D08               	goto	l548
  5702                           
  5703                           ;led.c: 321: {
  5704                           ;led.c: 322: gLedRunPara.nPrevCount--;
  5705  1506  3001               	movlw	1
  5706  1507  02D2               	subwf	(_gLedRunPara^(0+128)+2),f	;volatile
  5707  1508                     l548:	
  5708                           
  5709                           ;led.c: 323: }
  5710                           ;led.c: 324: if (gLedRunPara.nPrevCount == 0)
  5711  1508  0852               	movf	(_gLedRunPara^(0+128)+2),w	;volatile
  5712  1509  1D03               	btfss	3,2
  5713  150A  0008               	return
  5714                           
  5715                           ;led.c: 325: {
  5716                           ;led.c: 326: gLedRunPara.fPrev = 0;
  5717  150B  11D0               	bcf	_gLedRunPara^(0+128),3	;volatile
  5718  150C  0008               	return
  5719  150D                     __end_of_preview:	
  5720                           
  5721                           	psect	text7
  5722  1581                     __ptext7:	
  5723 ;; *************** function _initRTC *****************
  5724 ;; Defined at:
  5725 ;;		line 38 in file "src/rtc.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;		None
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;		None
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  1    wreg      void 
  5732 ;; Registers used:
  5733 ;;		wreg, status,2
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5742 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;Total ram usage:        1 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; Hardware stack levels required when called:    6
  5746 ;; This function calls:
  5747 ;;		Nothing
  5748 ;; This function is called by:
  5749 ;;		_main
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           
  5754                           ;psect for function _initRTC
  5755  1581                     _initRTC:	
  5756                           
  5757                           ;rtc.c: 40: gCurrentTime.datetime.second = 0;
  5758                           
  5759                           ;incstack = 0
  5760                           ; Regs used in _initRTC: [wreg+status,2]
  5761  1581  0021               	movlb	1	; select bank1
  5762  1582  01EB               	clrf	(_gCurrentTime^(0+128)+6)	;volatile
  5763                           
  5764                           ;rtc.c: 41: gCurrentTime.datetime.minute = 0;
  5765  1583  01EA               	clrf	(_gCurrentTime^(0+128)+5)	;volatile
  5766                           
  5767                           ;rtc.c: 42: gCurrentTime.datetime.hour = 0;
  5768  1584  01E9               	clrf	(_gCurrentTime^(0+128)+4)	;volatile
  5769                           
  5770                           ;rtc.c: 43: gCurrentTime.datetime.wk = 0;
  5771  1585  01E8               	clrf	(_gCurrentTime^(0+128)+3)	;volatile
  5772                           
  5773                           ;rtc.c: 44: gCurrentTime.datetime.day = 1;
  5774  1586  3001               	movlw	1
  5775  1587  0020               	movlb	0	; select bank0
  5776  1588  00A0               	movwf	??_initRTC
  5777  1589  0820               	movf	??_initRTC,w
  5778  158A  0021               	movlb	1	; select bank1
  5779  158B  00E7               	movwf	(_gCurrentTime^(0+128)+2)	;volatile
  5780                           
  5781                           ;rtc.c: 45: gCurrentTime.datetime.month = 1;
  5782  158C  3001               	movlw	1
  5783  158D  0020               	movlb	0	; select bank0
  5784  158E  00A0               	movwf	??_initRTC
  5785  158F  0820               	movf	??_initRTC,w
  5786  1590  0021               	movlb	1	; select bank1
  5787  1591  00E6               	movwf	(_gCurrentTime^(0+128)+1)	;volatile
  5788                           
  5789                           ;rtc.c: 46: gCurrentTime.datetime.year = 0;
  5790  1592  01E5               	clrf	_gCurrentTime^(0+128)	;volatile
  5791  1593  0008               	return
  5792  1594                     __end_of_initRTC:	
  5793                           
  5794                           	psect	text8
  5795  149F                     __ptext8:	
  5796 ;; *************** function _initLed *****************
  5797 ;; Defined at:
  5798 ;;		line 284 in file "src/led.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;		None
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;		None
  5803 ;; Return value:  Size  Location     Type
  5804 ;;                  1    wreg      void 
  5805 ;; Registers used:
  5806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5807 ;; Tracked objects:
  5808 ;;		On entry : 0/0
  5809 ;;		On exit  : 0/0
  5810 ;;		Unchanged: 0/0
  5811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5816 ;;Total ram usage:        0 bytes
  5817 ;; Hardware stack levels used:    1
  5818 ;; Hardware stack levels required when called:   11
  5819 ;; This function calls:
  5820 ;;		_initLedPara
  5821 ;;		_initLedStatus
  5822 ;; This function is called by:
  5823 ;;		_main
  5824 ;; This function uses a non-reentrant model
  5825 ;;
  5826                           
  5827                           
  5828                           ;psect for function _initLed
  5829  149F                     _initLed:	
  5830                           
  5831                           ;led.c: 286: initLedPara();
  5832                           
  5833                           ;incstack = 0
  5834                           ; Regs used in _initLed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5835  149F  318D  25F8  3194   	fcall	_initLedPara
  5836                           
  5837                           ;led.c: 287: initLedStatus();
  5838  14A2  318B  234D         	fcall	_initLedStatus
  5839  14A4  0008               	return
  5840  14A5                     __end_of_initLed:	
  5841                           
  5842                           	psect	text9
  5843  0DF8                     __ptext9:	
  5844 ;; *************** function _initLedPara *****************
  5845 ;; Defined at:
  5846 ;;		line 157 in file "src/led.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;		None
  5849 ;; Auto vars:     Size  Location     Type
  5850 ;;  j               1   64[BANK0 ] unsigned char 
  5851 ;;  i               1   65[BANK0 ] unsigned char 
  5852 ;; Return value:  Size  Location     Type
  5853 ;;                  1    wreg      void 
  5854 ;; Registers used:
  5855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5856 ;; Tracked objects:
  5857 ;;		On entry : 0/0
  5858 ;;		On exit  : 0/0
  5859 ;;		Unchanged: 0/0
  5860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5862 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5863 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5864 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5865 ;;Total ram usage:        6 bytes
  5866 ;; Hardware stack levels used:    1
  5867 ;; Hardware stack levels required when called:   10
  5868 ;; This function calls:
  5869 ;;		_readLedPara
  5870 ;;		_updateDayRiseStatus
  5871 ;;		_updateNightRiseStatus
  5872 ;; This function is called by:
  5873 ;;		_initLed
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           
  5878                           ;psect for function _initLedPara
  5879  0DF8                     _initLedPara:	
  5880                           
  5881                           ;led.c: 159: gLedPara = readLedPara( 0x10 );
  5882                           
  5883                           ;incstack = 0
  5884                           ; Regs used in _initLedPara: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5885  0DF8  3010               	movlw	16
  5886  0DF9  3188  202C  318D   	fcall	_readLedPara
  5887  0DFC  0020               	movlb	0	; select bank0
  5888  0DFD  302B               	movlw	low ?_readLedPara
  5889  0DFE  0086               	movwf	6
  5890  0DFF  3000               	movlw	high ?_readLedPara
  5891  0E00  0087               	movwf	7
  5892  0E01  3020               	movlw	low _gLedPara
  5893  0E02  0084               	movwf	4
  5894  0E03  3001               	movlw	high _gLedPara
  5895  0E04  0085               	movwf	5
  5896  0E05  302F               	movlw	47
  5897  0E06  00DC               	movwf	??_initLedPara
  5898  0E07                     u3500:	
  5899  0E07  0016               	moviw fsr1++
  5900  0E08  001A               	movwi fsr0++
  5901  0E09  0BDC               	decfsz	??_initLedPara,f
  5902  0E0A  2E07               	goto	u3500
  5903                           
  5904                           ;led.c: 160: gLedPara.fRsv = 0;
  5905  0E0B  3007               	movlw	-249
  5906  0E0C  0022               	movlb	2	; select bank2
  5907  0E0D  05A0               	andwf	_gLedPara^(0+256),f	;volatile
  5908                           
  5909                           ;led.c: 161: gLedPara.mPara.manualPara.fRsv = 0;
  5910  0E0E  3001               	movlw	-255
  5911  0E0F  05A1               	andwf	(_gLedPara^(0+256)+1),f	;volatile
  5912                           
  5913                           ;led.c: 162: for (unsigned char i = 0; i < 4; i++)
  5914  0E10  0020               	movlb	0	; select bank0
  5915  0E11  01E1               	clrf	initLedPara@i
  5916  0E12  3004               	movlw	4
  5917  0E13  0261               	subwf	initLedPara@i,w
  5918  0E14  1803               	btfsc	3,0
  5919  0E15  2E9C               	goto	l3690
  5920  0E16                     l3662:	
  5921                           
  5922                           ;led.c: 163: {
  5923                           ;led.c: 165: if (gLedPara.mPara.manualPara.nBrt[i] > 1000)
  5924  0E16  3561               	lslf	initLedPara@i,w
  5925  0E17  3E02               	addlw	2
  5926  0E18  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
  5927  0E19  0086               	movwf	6
  5928  0E1A  3001               	movlw	1	; select bank2/3
  5929  0E1B  0087               	movwf	7
  5930  0E1C  3F40               	moviw [0]fsr1
  5931  0E1D  00DC               	movwf	??_initLedPara
  5932  0E1E  3F41               	moviw [1]fsr1
  5933  0E1F  00DD               	movwf	??_initLedPara+1
  5934  0E20  3003               	movlw	3
  5935  0E21  025D               	subwf	??_initLedPara+1,w
  5936  0E22  30E9               	movlw	233
  5937  0E23  1903               	skipnz
  5938  0E24  025C               	subwf	??_initLedPara,w
  5939  0E25  1C03               	skipc
  5940  0E26  2E35               	goto	l3666
  5941                           
  5942                           ;led.c: 166: {
  5943                           ;led.c: 167: gLedPara.mPara.manualPara.nBrt[i] = 1000;
  5944  0E27  30E8               	movlw	232
  5945  0E28  00DC               	movwf	??_initLedPara
  5946  0E29  3003               	movlw	3
  5947  0E2A  00DD               	movwf	??_initLedPara+1
  5948  0E2B  3561               	lslf	initLedPara@i,w
  5949  0E2C  3E02               	addlw	2
  5950  0E2D  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
  5951  0E2E  0086               	movwf	6
  5952  0E2F  3001               	movlw	1	; select bank2/3
  5953  0E30  0087               	movwf	7
  5954  0E31  085C               	movf	??_initLedPara,w
  5955  0E32  3FC0               	movwi [0]fsr1
  5956  0E33  085D               	movf	??_initLedPara+1,w
  5957  0E34  3FC1               	movwi [1]fsr1
  5958  0E35                     l3666:	
  5959                           
  5960                           ;led.c: 168: }
  5961                           ;led.c: 170: for (unsigned char j = 0; j < 4; j++)
  5962  0E35  01E0               	clrf	initLedPara@j
  5963  0E36  3004               	movlw	4
  5964  0E37  0260               	subwf	initLedPara@j,w
  5965  0E38  1803               	btfsc	3,0
  5966  0E39  2E6C               	goto	l3680
  5967  0E3A                     l3672:	
  5968                           
  5969                           ;led.c: 171: {
  5970                           ;led.c: 172: if (gLedPara.mPara.manualPara.nCustomBrt[j][i] > 100)
  5971  0E3A  0860               	movf	initLedPara@j,w
  5972  0E3B  00DC               	movwf	??_initLedPara
  5973  0E3C  3002               	movlw	2
  5974  0E3D                     u3545:	
  5975  0E3D  35DC               	lslf	??_initLedPara,f
  5976  0E3E  0B89               	decfsz	9,f
  5977  0E3F  2E3D               	goto	u3545
  5978  0E40  3021               	movlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
  5979  0E41  075C               	addwf	??_initLedPara,w
  5980  0E42  00DD               	movwf	??_initLedPara+1
  5981  0E43  0861               	movf	initLedPara@i,w
  5982  0E44  075D               	addwf	??_initLedPara+1,w
  5983  0E45  00DE               	movwf	??_initLedPara+2
  5984  0E46  085E               	movf	??_initLedPara+2,w
  5985  0E47  3E0A               	addlw	10
  5986  0E48  0086               	movwf	6
  5987  0E49  3001               	movlw	1	; select bank2/3
  5988  0E4A  0087               	movwf	7
  5989  0E4B  3065               	movlw	101
  5990  0E4C  0201               	subwf	1,w
  5991  0E4D  1C03               	skipc
  5992  0E4E  2E64               	goto	l3676
  5993                           
  5994                           ;led.c: 173: {
  5995                           ;led.c: 174: gLedPara.mPara.manualPara.nCustomBrt[j][i] = 100;
  5996  0E4F  3064               	movlw	100
  5997  0E50  00DC               	movwf	??_initLedPara
  5998  0E51  0860               	movf	initLedPara@j,w
  5999  0E52  00DD               	movwf	??_initLedPara+1
  6000  0E53  3002               	movlw	2
  6001  0E54                     u3565:	
  6002  0E54  35DD               	lslf	??_initLedPara+1,f
  6003  0E55  0B89               	decfsz	9,f
  6004  0E56  2E54               	goto	u3565
  6005  0E57  3021               	movlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
  6006  0E58  075D               	addwf	??_initLedPara+1,w
  6007  0E59  00DE               	movwf	??_initLedPara+2
  6008  0E5A  0861               	movf	initLedPara@i,w
  6009  0E5B  075E               	addwf	??_initLedPara+2,w
  6010  0E5C  00DF               	movwf	??_initLedPara+3
  6011  0E5D  085F               	movf	??_initLedPara+3,w
  6012  0E5E  3E0A               	addlw	10
  6013  0E5F  0086               	movwf	6
  6014  0E60  3001               	movlw	1	; select bank2/3
  6015  0E61  0087               	movwf	7
  6016  0E62  085C               	movf	??_initLedPara,w
  6017  0E63  0081               	movwf	1
  6018  0E64                     l3676:	
  6019  0E64  3001               	movlw	1
  6020  0E65  00DC               	movwf	??_initLedPara
  6021  0E66  085C               	movf	??_initLedPara,w
  6022  0E67  07E0               	addwf	initLedPara@j,f
  6023  0E68  3004               	movlw	4
  6024  0E69  0260               	subwf	initLedPara@j,w
  6025  0E6A  1C03               	skipc
  6026  0E6B  2E3A               	goto	l3672
  6027  0E6C                     l3680:	
  6028                           
  6029                           ;led.c: 175: }
  6030                           ;led.c: 176: }
  6031                           ;led.c: 178: if (gLedPara.aPara.autoPara.daylight[i] > 100)
  6032  0E6C  0861               	movf	initLedPara@i,w
  6033  0E6D  3E04               	addlw	4
  6034  0E6E  3E3B               	addlw	(low ((_gLedPara| (0+256)+27)))& (0+255)
  6035  0E6F  0086               	movwf	6
  6036  0E70  3001               	movlw	1	; select bank2/3
  6037  0E71  0087               	movwf	7
  6038  0E72  3065               	movlw	101
  6039  0E73  0201               	subwf	1,w
  6040  0E74  1C03               	skipc
  6041  0E75  2E80               	goto	l504
  6042                           
  6043                           ;led.c: 179: {
  6044                           ;led.c: 180: gLedPara.aPara.autoPara.daylight[i] = 100;
  6045  0E76  3064               	movlw	100
  6046  0E77  00DC               	movwf	??_initLedPara
  6047  0E78  0861               	movf	initLedPara@i,w
  6048  0E79  3E04               	addlw	4
  6049  0E7A  3E3B               	addlw	(low ((_gLedPara| (0+256)+27)))& (0+255)
  6050  0E7B  0086               	movwf	6
  6051  0E7C  3001               	movlw	1	; select bank2/3
  6052  0E7D  0087               	movwf	7
  6053  0E7E  085C               	movf	??_initLedPara,w
  6054  0E7F  0081               	movwf	1
  6055  0E80                     l504:	
  6056                           
  6057                           ;led.c: 181: }
  6058                           ;led.c: 183: if (gLedPara.aPara.autoPara.moonlight[i] > 100)
  6059  0E80  0861               	movf	initLedPara@i,w
  6060  0E81  3E0C               	addlw	12
  6061  0E82  3E3B               	addlw	(low ((_gLedPara| (0+256)+27)))& (0+255)
  6062  0E83  0086               	movwf	6
  6063  0E84  3001               	movlw	1	; select bank2/3
  6064  0E85  0087               	movwf	7
  6065  0E86  3065               	movlw	101
  6066  0E87  0201               	subwf	1,w
  6067  0E88  1C03               	skipc
  6068  0E89  2E94               	goto	l3686
  6069                           
  6070                           ;led.c: 184: {
  6071                           ;led.c: 185: gLedPara.aPara.autoPara.moonlight[i] = 100;
  6072  0E8A  3064               	movlw	100
  6073  0E8B  00DC               	movwf	??_initLedPara
  6074  0E8C  0861               	movf	initLedPara@i,w
  6075  0E8D  3E0C               	addlw	12
  6076  0E8E  3E3B               	addlw	(low ((_gLedPara| (0+256)+27)))& (0+255)
  6077  0E8F  0086               	movwf	6
  6078  0E90  3001               	movlw	1	; select bank2/3
  6079  0E91  0087               	movwf	7
  6080  0E92  085C               	movf	??_initLedPara,w
  6081  0E93  0081               	movwf	1
  6082  0E94                     l3686:	
  6083  0E94  3001               	movlw	1
  6084  0E95  00DC               	movwf	??_initLedPara
  6085  0E96  085C               	movf	??_initLedPara,w
  6086  0E97  07E1               	addwf	initLedPara@i,f
  6087  0E98  3004               	movlw	4
  6088  0E99  0261               	subwf	initLedPara@i,w
  6089  0E9A  1C03               	skipc
  6090  0E9B  2E16               	goto	l3662
  6091  0E9C                     l3690:	
  6092                           
  6093                           ;led.c: 186: }
  6094                           ;led.c: 187: }
  6095                           ;led.c: 190: if (gLedPara.aPara.autoPara.sunrise.start.hour > 23)
  6096  0E9C  3018               	movlw	24
  6097  0E9D  0022               	movlb	2	; select bank2
  6098  0E9E  023B               	subwf	(_gLedPara^(0+256)+27),w	;volatile
  6099  0E9F  1803               	btfsc	3,0
  6100                           
  6101                           ;led.c: 191: {
  6102                           ;led.c: 192: gLedPara.aPara.autoPara.sunrise.start.hour = 0;
  6103  0EA0  01BB               	clrf	(_gLedPara^(0+256)+27)	;volatile
  6104                           
  6105                           ;led.c: 193: }
  6106                           ;led.c: 194: if (gLedPara.aPara.autoPara.sunrise.start.minute > 59)
  6107  0EA1  303C               	movlw	60
  6108  0EA2  023C               	subwf	(_gLedPara^(0+256)+28),w	;volatile
  6109  0EA3  1803               	btfsc	3,0
  6110                           
  6111                           ;led.c: 195: {
  6112                           ;led.c: 196: gLedPara.aPara.autoPara.sunrise.start.minute = 0;
  6113  0EA4  01BC               	clrf	(_gLedPara^(0+256)+28)	;volatile
  6114                           
  6115                           ;led.c: 197: }
  6116                           ;led.c: 199: if (gLedPara.aPara.autoPara.sunrise.end.hour > 23)
  6117  0EA5  3018               	movlw	24
  6118  0EA6  023D               	subwf	(_gLedPara^(0+256)+29),w	;volatile
  6119  0EA7  1803               	btfsc	3,0
  6120                           
  6121                           ;led.c: 200: {
  6122                           ;led.c: 201: gLedPara.aPara.autoPara.sunrise.end.hour = 0;
  6123  0EA8  01BD               	clrf	(_gLedPara^(0+256)+29)	;volatile
  6124                           
  6125                           ;led.c: 202: }
  6126                           ;led.c: 203: if (gLedPara.aPara.autoPara.sunrise.end.minute > 59)
  6127  0EA9  303C               	movlw	60
  6128  0EAA  023E               	subwf	(_gLedPara^(0+256)+30),w	;volatile
  6129  0EAB  1803               	btfsc	3,0
  6130                           
  6131                           ;led.c: 204: {
  6132                           ;led.c: 205: gLedPara.aPara.autoPara.sunrise.end.minute = 0;
  6133  0EAC  01BE               	clrf	(_gLedPara^(0+256)+30)	;volatile
  6134                           
  6135                           ;led.c: 206: }
  6136                           ;led.c: 208: if (gLedPara.aPara.autoPara.sunset.start.hour > 23)
  6137  0EAD  3018               	movlw	24
  6138  0EAE  0243               	subwf	(_gLedPara^(0+256)+35),w	;volatile
  6139  0EAF  1803               	btfsc	3,0
  6140                           
  6141                           ;led.c: 209: {
  6142                           ;led.c: 210: gLedPara.aPara.autoPara.sunset.start.hour = 0;
  6143  0EB0  01C3               	clrf	(_gLedPara^(0+256)+35)	;volatile
  6144                           
  6145                           ;led.c: 211: }
  6146                           ;led.c: 212: if (gLedPara.aPara.autoPara.sunset.start.minute > 59)
  6147  0EB1  303C               	movlw	60
  6148  0EB2  0244               	subwf	(_gLedPara^(0+256)+36),w	;volatile
  6149  0EB3  1803               	btfsc	3,0
  6150                           
  6151                           ;led.c: 213: {
  6152                           ;led.c: 214: gLedPara.aPara.autoPara.sunset.start.minute = 0;
  6153  0EB4  01C4               	clrf	(_gLedPara^(0+256)+36)	;volatile
  6154                           
  6155                           ;led.c: 215: }
  6156                           ;led.c: 217: if (gLedPara.aPara.autoPara.sunset.end.hour > 23)
  6157  0EB5  3018               	movlw	24
  6158  0EB6  0245               	subwf	(_gLedPara^(0+256)+37),w	;volatile
  6159  0EB7  1803               	btfsc	3,0
  6160                           
  6161                           ;led.c: 218: {
  6162                           ;led.c: 219: gLedPara.aPara.autoPara.sunset.end.hour = 0;
  6163  0EB8  01C5               	clrf	(_gLedPara^(0+256)+37)	;volatile
  6164                           
  6165                           ;led.c: 220: }
  6166                           ;led.c: 221: if (gLedPara.aPara.autoPara.sunset.end.minute > 59)
  6167  0EB9  303C               	movlw	60
  6168  0EBA  0246               	subwf	(_gLedPara^(0+256)+38),w	;volatile
  6169  0EBB  1803               	btfsc	3,0
  6170                           
  6171                           ;led.c: 222: {
  6172                           ;led.c: 223: gLedPara.aPara.autoPara.sunset.end.minute = 0;
  6173  0EBC  01C6               	clrf	(_gLedPara^(0+256)+38)	;volatile
  6174                           
  6175                           ;led.c: 224: }
  6176                           ;led.c: 226: if (gLedPara.tPara.nDayBrt > 1000)
  6177  0EBD  3003               	movlw	3
  6178  0EBE  024C               	subwf	((_gLedPara+1)^(0+256)+43),w	;volatile
  6179  0EBF  30E9               	movlw	233
  6180  0EC0  1903               	skipnz
  6181  0EC1  024B               	subwf	(_gLedPara^(0+256)+43),w	;volatile
  6182  0EC2  1C03               	skipc
  6183  0EC3  2EC8               	goto	l3726
  6184                           
  6185                           ;led.c: 227: {
  6186                           ;led.c: 228: gLedPara.tPara.nDayBrt = 1000;
  6187  0EC4  3003               	movlw	3
  6188  0EC5  00CC               	movwf	((_gLedPara+1)^(0+256)+43)	;volatile
  6189  0EC6  30E8               	movlw	232
  6190  0EC7  2ED2               	goto	L1
  6191  0EC8                     l3726:	
  6192                           ;led.c: 229: }
  6193                           
  6194                           
  6195                           ;led.c: 230: else if (gLedPara.tPara.nDayBrt < 10)
  6196  0EC8  3000               	movlw	0
  6197  0EC9  024C               	subwf	((_gLedPara+1)^(0+256)+43),w	;volatile
  6198  0ECA  300A               	movlw	10
  6199  0ECB  1903               	skipnz
  6200  0ECC  024B               	subwf	(_gLedPara^(0+256)+43),w	;volatile
  6201  0ECD  1803               	skipnc
  6202  0ECE  2ED3               	goto	l3730
  6203                           
  6204                           ;led.c: 231: {
  6205                           ;led.c: 232: gLedPara.tPara.nDayBrt = 10;
  6206  0ECF  3000               	movlw	0
  6207  0ED0  00CC               	movwf	((_gLedPara+1)^(0+256)+43)	;volatile
  6208  0ED1  300A               	movlw	10
  6209  0ED2                     L1:	
  6210  0ED2  00CB               	movwf	(_gLedPara^(0+256)+43)	;volatile
  6211  0ED3                     l3730:	
  6212                           
  6213                           ;led.c: 233: }
  6214                           ;led.c: 234: updateDayRiseStatus();
  6215  0ED3  3196  262C  318D   	fcall	_updateDayRiseStatus
  6216                           
  6217                           ;led.c: 235: if (gLedPara.tPara.nNightBrt > 1000)
  6218  0ED6  3003               	movlw	3
  6219  0ED7  0022               	movlb	2	; select bank2
  6220  0ED8  024E               	subwf	((_gLedPara+1)^(0+256)+45),w	;volatile
  6221  0ED9  30E9               	movlw	233
  6222  0EDA  1903               	skipnz
  6223  0EDB  024D               	subwf	(_gLedPara^(0+256)+45),w	;volatile
  6224  0EDC  1C03               	skipc
  6225  0EDD  2EE2               	goto	l3736
  6226                           
  6227                           ;led.c: 236: {
  6228                           ;led.c: 237: gLedPara.tPara.nNightBrt = 1000;
  6229  0EDE  3003               	movlw	3
  6230  0EDF  00CE               	movwf	((_gLedPara+1)^(0+256)+45)	;volatile
  6231  0EE0  30E8               	movlw	232
  6232  0EE1  2EEC               	goto	L2
  6233  0EE2                     l3736:	
  6234                           ;led.c: 238: }
  6235                           
  6236                           
  6237                           ;led.c: 239: else if (gLedPara.tPara.nNightBrt < 10)
  6238  0EE2  3000               	movlw	0
  6239  0EE3  024E               	subwf	((_gLedPara+1)^(0+256)+45),w	;volatile
  6240  0EE4  300A               	movlw	10
  6241  0EE5  1903               	skipnz
  6242  0EE6  024D               	subwf	(_gLedPara^(0+256)+45),w	;volatile
  6243  0EE7  1803               	skipnc
  6244  0EE8  2EED               	goto	l3740
  6245                           
  6246                           ;led.c: 240: {
  6247                           ;led.c: 241: gLedPara.tPara.nNightBrt = 10;
  6248  0EE9  3000               	movlw	0
  6249  0EEA  00CE               	movwf	((_gLedPara+1)^(0+256)+45)	;volatile
  6250  0EEB  300A               	movlw	10
  6251  0EEC                     L2:	
  6252  0EEC  00CD               	movwf	(_gLedPara^(0+256)+45)	;volatile
  6253  0EED                     l3740:	
  6254                           
  6255                           ;led.c: 242: }
  6256                           ;led.c: 243: updateNightRiseStatus();
  6257  0EED  3196  2642         	fcall	_updateNightRiseStatus
  6258  0EEF  0008               	return
  6259  0EF0                     __end_of_initLedPara:	
  6260                           
  6261                           	psect	text10
  6262  1642                     __ptext10:	
  6263 ;; *************** function _updateNightRiseStatus *****************
  6264 ;; Defined at:
  6265 ;;		line 402 in file "src/led.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;		None
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;		None
  6270 ;; Return value:  Size  Location     Type
  6271 ;;                  1    wreg      void 
  6272 ;; Registers used:
  6273 ;;		wreg
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;Total ram usage:        0 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    6
  6286 ;; This function calls:
  6287 ;;		Nothing
  6288 ;; This function is called by:
  6289 ;;		_initLedPara
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           
  6294                           ;psect for function _updateNightRiseStatus
  6295  1642                     _updateNightRiseStatus:	
  6296                           
  6297                           ;led.c: 404: if (gLedPara.tPara.nNightBrt > 1000 - 200)
  6298                           
  6299                           ;incstack = 0
  6300                           ; Regs used in _updateNightRiseStatus: [wreg]
  6301  1642  3003               	movlw	3
  6302  1643  0022               	movlb	2	; select bank2
  6303  1644  024E               	subwf	((_gLedPara+1)^(0+256)+45),w	;volatile
  6304  1645  3021               	movlw	33
  6305  1646  1903               	skipnz
  6306  1647  024D               	subwf	(_gLedPara^(0+256)+45),w	;volatile
  6307  1648  1C03               	skipc
  6308  1649  2E4D               	goto	l3228
  6309                           
  6310                           ;led.c: 405: {
  6311                           ;led.c: 406: gLedRunPara.fNr = 0;
  6312  164A  0021               	movlb	1	; select bank1
  6313  164B  12D0               	bcf	_gLedRunPara^(0+128),5	;volatile
  6314                           
  6315                           ;led.c: 407: }
  6316  164C  0008               	return
  6317  164D                     l3228:	
  6318                           
  6319                           ;led.c: 408: else if (gLedPara.tPara.nNightBrt < 200)
  6320  164D  3000               	movlw	0
  6321  164E  0022               	movlb	2	; select bank2
  6322  164F  024E               	subwf	((_gLedPara+1)^(0+256)+45),w	;volatile
  6323  1650  30C8               	movlw	200
  6324  1651  1903               	skipnz
  6325  1652  024D               	subwf	(_gLedPara^(0+256)+45),w	;volatile
  6326  1653  1803               	skipnc
  6327  1654  0008               	return
  6328                           
  6329                           ;led.c: 409: {
  6330                           ;led.c: 410: gLedRunPara.fNr = 1;
  6331  1655  0021               	movlb	1	; select bank1
  6332  1656  16D0               	bsf	_gLedRunPara^(0+128),5	;volatile
  6333  1657  0008               	return
  6334  1658                     __end_of_updateNightRiseStatus:	
  6335                           
  6336                           	psect	text11
  6337  162C                     __ptext11:	
  6338 ;; *************** function _updateDayRiseStatus *****************
  6339 ;; Defined at:
  6340 ;;		line 372 in file "src/led.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;		None
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;		None
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      void 
  6347 ;; Registers used:
  6348 ;;		wreg
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;Total ram usage:        0 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    6
  6361 ;; This function calls:
  6362 ;;		Nothing
  6363 ;; This function is called by:
  6364 ;;		_initLedPara
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           
  6369                           ;psect for function _updateDayRiseStatus
  6370  162C                     _updateDayRiseStatus:	
  6371                           
  6372                           ;led.c: 374: if (gLedPara.tPara.nDayBrt > 1000 - 200)
  6373                           
  6374                           ;incstack = 0
  6375                           ; Regs used in _updateDayRiseStatus: [wreg]
  6376  162C  3003               	movlw	3
  6377  162D  0022               	movlb	2	; select bank2
  6378  162E  024C               	subwf	((_gLedPara+1)^(0+256)+43),w	;volatile
  6379  162F  3021               	movlw	33
  6380  1630  1903               	skipnz
  6381  1631  024B               	subwf	(_gLedPara^(0+256)+43),w	;volatile
  6382  1632  1C03               	skipc
  6383  1633  2E37               	goto	l3202
  6384                           
  6385                           ;led.c: 375: {
  6386                           ;led.c: 376: gLedRunPara.fDr = 0;
  6387  1634  0021               	movlb	1	; select bank1
  6388  1635  1250               	bcf	_gLedRunPara^(0+128),4	;volatile
  6389                           
  6390                           ;led.c: 377: }
  6391  1636  0008               	return
  6392  1637                     l3202:	
  6393                           
  6394                           ;led.c: 378: else if (gLedPara.tPara.nDayBrt < 200)
  6395  1637  3000               	movlw	0
  6396  1638  0022               	movlb	2	; select bank2
  6397  1639  024C               	subwf	((_gLedPara+1)^(0+256)+43),w	;volatile
  6398  163A  30C8               	movlw	200
  6399  163B  1903               	skipnz
  6400  163C  024B               	subwf	(_gLedPara^(0+256)+43),w	;volatile
  6401  163D  1803               	skipnc
  6402  163E  0008               	return
  6403                           
  6404                           ;led.c: 379: {
  6405                           ;led.c: 380: gLedRunPara.fDr = 1;
  6406  163F  0021               	movlb	1	; select bank1
  6407  1640  1650               	bsf	_gLedRunPara^(0+128),4	;volatile
  6408  1641  0008               	return
  6409  1642                     __end_of_updateDayRiseStatus:	
  6410                           
  6411                           	psect	text12
  6412  082C                     __ptext12:	
  6413 ;; *************** function _readLedPara *****************
  6414 ;; Defined at:
  6415 ;;		line 101 in file "src/eeprom.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  addr            1    wreg     unsigned char 
  6418 ;; Auto vars:     Size  Location     Type
  6419 ;;  addr            1    0[BANK1 ] unsigned char 
  6420 ;;  para           47    1[BANK1 ] struct .
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  47   11[BANK0 ] struct .
  6423 ;; Registers used:
  6424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6430 ;;      Params:         0      47       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;      Locals:         0       0      48       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6433 ;;      Totals:         0      49      48       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;Total ram usage:       97 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    9
  6437 ;; This function calls:
  6438 ;;		_readBuffer
  6439 ;; This function is called by:
  6440 ;;		_initLedPara
  6441 ;; This function uses a non-reentrant model
  6442 ;;
  6443                           
  6444                           
  6445                           ;psect for function _readLedPara
  6446  082C                     _readLedPara:	
  6447                           
  6448                           ;incstack = 0
  6449                           ; Regs used in _readLedPara: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6450                           ;readLedPara@addr stored from wreg
  6451  082C  0021               	movlb	1	; select bank1
  6452  082D  00A0               	movwf	readLedPara@addr^(0+128)
  6453                           
  6454                           ;eeprom.c: 103: LedPara_t para;
  6455                           ;eeprom.c: 104: readBuffer(addr, (unsigned char*)&para, sizeof(para));
  6456  082E  30A1               	movlw	(low (readLedPara@para| 0))& (0+255)
  6457  082F  0020               	movlb	0	; select bank0
  6458  0830  00DA               	movwf	??_readLedPara
  6459  0831  085A               	movf	??_readLedPara,w
  6460  0832  00A5               	movwf	readBuffer@buf
  6461  0833  302F               	movlw	47
  6462  0834  00DB               	movwf	??_readLedPara+1
  6463  0835  085B               	movf	??_readLedPara+1,w
  6464  0836  00A6               	movwf	readBuffer@len
  6465  0837  0021               	movlb	1	; select bank1
  6466  0838  0820               	movf	readLedPara@addr^(0+128),w
  6467  0839  3196  26D7  3188   	fcall	_readBuffer
  6468                           
  6469                           ;eeprom.c: 105: return para;
  6470  083C  30A1               	movlw	low readLedPara@para
  6471  083D  0086               	movwf	6
  6472  083E  3000               	movlw	high readLedPara@para
  6473  083F  0087               	movwf	7
  6474  0840  302B               	movlw	low ?_readLedPara
  6475  0841  0084               	movwf	4
  6476  0842  3000               	movlw	high ?_readLedPara
  6477  0843  0085               	movwf	5
  6478  0844  302F               	movlw	47
  6479  0845  0020               	movlb	0	; select bank0
  6480  0846  00DA               	movwf	??_readLedPara
  6481  0847                     u2920:	
  6482  0847  0016               	moviw fsr1++
  6483  0848  001A               	movwi fsr0++
  6484  0849  0BDA               	decfsz	??_readLedPara,f
  6485  084A  2847               	goto	u2920
  6486  084B  0008               	return
  6487  084C                     __end_of_readLedPara:	
  6488                           
  6489                           	psect	text13
  6490  16D7                     __ptext13:	
  6491 ;; *************** function _readBuffer *****************
  6492 ;; Defined at:
  6493 ;;		line 78 in file "src/eeprom.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;  addr            1    wreg     unsigned char 
  6496 ;;  buf             1    5[BANK0 ] PTR unsigned char 
  6497 ;;		 -> readLedPara@para(47), 
  6498 ;;  len             1    6[BANK0 ] unsigned char 
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;  addr            1    9[BANK0 ] unsigned char 
  6501 ;;  i               1   10[BANK0 ] unsigned char 
  6502 ;; Return value:  Size  Location     Type
  6503 ;;                  1    wreg      void 
  6504 ;; Registers used:
  6505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6511 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;Total ram usage:        6 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    8
  6518 ;; This function calls:
  6519 ;;		_readByte
  6520 ;; This function is called by:
  6521 ;;		_readLedPara
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           
  6526                           ;psect for function _readBuffer
  6527  16D7                     _readBuffer:	
  6528                           
  6529                           ;incstack = 0
  6530                           ; Regs used in _readBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6531                           ;readBuffer@addr stored from wreg
  6532  16D7  0020               	movlb	0	; select bank0
  6533  16D8  00A9               	movwf	readBuffer@addr
  6534                           
  6535                           ;eeprom.c: 80: for (unsigned char i = 0; i < len; i++)
  6536  16D9  01AA               	clrf	readBuffer@i
  6537  16DA                     l3102:	
  6538  16DA  0826               	movf	readBuffer@len,w
  6539  16DB  022A               	subwf	readBuffer@i,w
  6540  16DC  1803               	btfsc	3,0
  6541  16DD  0008               	return
  6542                           
  6543                           ;eeprom.c: 81: {
  6544                           ;eeprom.c: 82: *(buf+i) = readByte(addr+i);
  6545  16DE  0829               	movf	readBuffer@addr,w
  6546  16DF  072A               	addwf	readBuffer@i,w
  6547  16E0  3195  254B  3196   	fcall	_readByte
  6548  16E3  0020               	movlb	0	; select bank0
  6549  16E4  00A7               	movwf	??_readBuffer
  6550  16E5  082A               	movf	readBuffer@i,w
  6551  16E6  0725               	addwf	readBuffer@buf,w
  6552  16E7  00A8               	movwf	??_readBuffer+1
  6553  16E8  0828               	movf	??_readBuffer+1,w
  6554  16E9  0086               	movwf	6
  6555  16EA  0187               	clrf	7
  6556  16EB  0827               	movf	??_readBuffer,w
  6557  16EC  0081               	movwf	1
  6558  16ED  3001               	movlw	1
  6559  16EE  00A7               	movwf	??_readBuffer
  6560  16EF  0827               	movf	??_readBuffer,w
  6561  16F0  07AA               	addwf	readBuffer@i,f
  6562  16F1  2EDA               	goto	l3102
  6563  16F2                     __end_of_readBuffer:	
  6564                           
  6565                           	psect	text14
  6566  154B                     __ptext14:	
  6567 ;; *************** function _readByte *****************
  6568 ;; Defined at:
  6569 ;;		line 52 in file "src/eeprom.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;  addr            1    wreg     unsigned char 
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;  addr            1    3[BANK0 ] unsigned char 
  6574 ;;  result          1    4[BANK0 ] unsigned char 
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  1    wreg      unsigned char 
  6577 ;; Registers used:
  6578 ;;		wreg, status,2, pclath, cstack
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;Total ram usage:        3 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    7
  6591 ;; This function calls:
  6592 ;;		_DATAEE_ReadByte
  6593 ;; This function is called by:
  6594 ;;		_readBuffer
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           
  6599                           ;psect for function _readByte
  6600  154B                     _readByte:	
  6601                           
  6602                           ;incstack = 0
  6603                           ; Regs used in _readByte: [wreg+status,2+pclath+cstack]
  6604                           ;readByte@addr stored from wreg
  6605  154B  0020               	movlb	0	; select bank0
  6606  154C  00A3               	movwf	readByte@addr
  6607                           
  6608                           ;eeprom.c: 54: unsigned char result = DATAEE_ReadByte(0x7000 + addr);
  6609  154D  0823               	movf	readByte@addr,w
  6610  154E  3E00               	addlw	0
  6611  154F  00A0               	movwf	DATAEE_ReadByte@bAdd
  6612  1550  3070               	movlw	112
  6613  1551  1803               	skipnc
  6614  1552  3071               	movlw	113
  6615  1553  00A1               	movwf	DATAEE_ReadByte@bAdd+1
  6616  1554  3195  251B         	fcall	_DATAEE_ReadByte
  6617  1556  0020               	movlb	0	; select bank0
  6618  1557  00A2               	movwf	??_readByte
  6619  1558  0822               	movf	??_readByte,w
  6620  1559  00A4               	movwf	readByte@result
  6621                           
  6622                           ;eeprom.c: 55: return result;
  6623  155A  0824               	movf	readByte@result,w
  6624  155B  0008               	return
  6625  155C                     __end_of_readByte:	
  6626                           
  6627                           	psect	text15
  6628  151B                     __ptext15:	
  6629 ;; *************** function _DATAEE_ReadByte *****************
  6630 ;; Defined at:
  6631 ;;		line 25 in file "src/eeprom.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  bAdd            2    0[BANK0 ] unsigned int 
  6634 ;; Auto vars:     Size  Location     Type
  6635 ;;		None
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  1    wreg      unsigned char 
  6638 ;; Registers used:
  6639 ;;		wreg, status,2
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6645 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;Total ram usage:        2 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    6
  6652 ;; This function calls:
  6653 ;;		Nothing
  6654 ;; This function is called by:
  6655 ;;		_readByte
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           
  6660                           ;psect for function _DATAEE_ReadByte
  6661  151B                     _DATAEE_ReadByte:	
  6662                           
  6663                           ;eeprom.c: 27: NVMADRH = ((bAdd >> 8) & 0xFF);
  6664                           
  6665                           ;incstack = 0
  6666                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
  6667  151B  0020               	movlb	0	; select bank0
  6668  151C  0821               	movf	DATAEE_ReadByte@bAdd+1,w
  6669  151D  0031               	movlb	17	; select bank17
  6670  151E  0092               	movwf	18	;volatile
  6671                           
  6672                           ;eeprom.c: 28: NVMADRL = (bAdd & 0xFF);
  6673  151F  0020               	movlb	0	; select bank0
  6674  1520  0820               	movf	DATAEE_ReadByte@bAdd,w
  6675  1521  0031               	movlb	17	; select bank17
  6676  1522  0091               	movwf	17	;volatile
  6677                           
  6678                           ;eeprom.c: 29: NVMCON1bits.NVMREGS = 1;
  6679  1523  1715               	bsf	21,6	;volsfr
  6680                           
  6681                           ;eeprom.c: 30: NVMCON1bits.RD = 1;
  6682  1524  1415               	bsf	21,0	;volsfr
  6683                           
  6684                           ;eeprom.c: 31: __nop();
  6685  1525  0000               	nop
  6686                           
  6687                           ;eeprom.c: 32: __nop();
  6688  1526  0000               	nop
  6689                           
  6690                           ;eeprom.c: 34: return (NVMDATL);
  6691  1527  0031               	movlb	17	; select bank17
  6692  1528  0813               	movf	19,w	;volatile
  6693  1529  0008               	return
  6694  152A                     __end_of_DATAEE_ReadByte:	
  6695                           
  6696                           	psect	text16
  6697  0C46                     __ptext16:	
  6698 ;; *************** function _initBLE *****************
  6699 ;; Defined at:
  6700 ;;		line 424 in file "src/ble.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;		None
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;		None
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  1    wreg      void 
  6707 ;; Registers used:
  6708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;Total ram usage:        3 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:    9
  6721 ;; This function calls:
  6722 ;;		_bleSendCMD
  6723 ;; This function is called by:
  6724 ;;		_main
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           
  6729                           ;psect for function _initBLE
  6730  0C46                     _initBLE:	
  6731                           
  6732                           ;ble.c: 426: _delay((unsigned long)((5)*(16000000/4000.0)));
  6733                           
  6734                           ;incstack = 0
  6735                           ; Regs used in _initBLE: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6736  0C46  301A               	movlw	26
  6737  0C47  0020               	movlb	0	; select bank0
  6738  0C48  00A8               	movwf	??_initBLE+1
  6739  0C49  30F8               	movlw	248
  6740  0C4A  00A7               	movwf	??_initBLE
  6741  0C4B                     u5287:	
  6742  0C4B  0BA7               	decfsz	??_initBLE,f
  6743  0C4C  2C4B               	goto	u5287
  6744  0C4D  0BA8               	decfsz	??_initBLE+1,f
  6745  0C4E  2C4B               	goto	u5287
  6746  0C4F  0000               	nop
  6747                           
  6748                           ;ble.c: 427: LATB5 = 1;
  6749  0C50  0022               	movlb	2	; select bank2
  6750  0C51  168D               	bsf	13,5	;volatile
  6751                           
  6752                           ;ble.c: 428: _delay((unsigned long)((200)*(16000000/4000.0)));
  6753  0C52  3005               	movlw	5
  6754  0C53  0020               	movlb	0	; select bank0
  6755  0C54  00A9               	movwf	??_initBLE+2
  6756  0C55  300F               	movlw	15
  6757  0C56  00A8               	movwf	??_initBLE+1
  6758  0C57  30F4               	movlw	244
  6759  0C58  00A7               	movwf	??_initBLE
  6760  0C59                     u5297:	
  6761  0C59  0BA7               	decfsz	??_initBLE,f
  6762  0C5A  2C59               	goto	u5297
  6763  0C5B  0BA8               	decfsz	??_initBLE+1,f
  6764  0C5C  2C59               	goto	u5297
  6765  0C5D  0BA9               	decfsz	??_initBLE+2,f
  6766  0C5E  2C59               	goto	u5297
  6767                           
  6768                           ;ble.c: 429: eusartRunPara.nCmd = 1;
  6769  0C5F  3001               	movlw	1
  6770  0C60  0020               	movlb	0	; select bank0
  6771  0C61  00A7               	movwf	??_initBLE
  6772  0C62  0827               	movf	??_initBLE,w
  6773  0C63  00E7               	movwf	_eusartRunPara+3	;volatile
  6774                           
  6775                           ;ble.c: 430: bleSendCMD("AT\r\n");
  6776  0C64  3068               	movlw	low (STR_4| (0+32768))
  6777  0C65  00A4               	movwf	bleSendCMD@pBuf
  6778  0C66  3090               	movlw	high (STR_4| (0+32768))
  6779  0C67  00A5               	movwf	bleSendCMD@pBuf+1
  6780  0C68  3188  20DA  318C   	fcall	_bleSendCMD
  6781                           
  6782                           ;ble.c: 432: eusartRunPara.nCmd = 9;
  6783  0C6B  3009               	movlw	9
  6784  0C6C  0020               	movlb	0	; select bank0
  6785  0C6D  00A7               	movwf	??_initBLE
  6786  0C6E  0827               	movf	??_initBLE,w
  6787  0C6F  00E7               	movwf	_eusartRunPara+3	;volatile
  6788                           
  6789                           ;ble.c: 433: bleSendCMD("AT+ADV_MFR_SPC=?\r\n");
  6790  0C70  3022               	movlw	low (STR_5| (0+32768))
  6791  0C71  00A4               	movwf	bleSendCMD@pBuf
  6792  0C72  3090               	movlw	high (STR_5| (0+32768))
  6793  0C73  00A5               	movwf	bleSendCMD@pBuf+1
  6794  0C74  3188  20DA  318C   	fcall	_bleSendCMD
  6795                           
  6796                           ;ble.c: 435: if (!eusartRunPara.fDev)
  6797  0C77  0020               	movlb	0	; select bank0
  6798  0C78  1B64               	btfsc	_eusartRunPara,6	;volatile
  6799  0C79  2C85               	goto	l4154
  6800                           
  6801                           ;ble.c: 436: {
  6802                           ;ble.c: 437: eusartRunPara.nCmd = 8;
  6803  0C7A  3008               	movlw	8
  6804  0C7B  00A7               	movwf	??_initBLE
  6805  0C7C  0827               	movf	??_initBLE,w
  6806  0C7D  00E7               	movwf	_eusartRunPara+3	;volatile
  6807                           
  6808                           ;ble.c: 438: bleSendCMD("AT+ADV_MFR_SPC=3031313130313031\r\n");
  6809  0C7E  3000               	movlw	low (STR_6| (0+32768))
  6810  0C7F  00A4               	movwf	bleSendCMD@pBuf
  6811  0C80  3090               	movlw	high (STR_6| (0+32768))
  6812  0C81  00A5               	movwf	bleSendCMD@pBuf+1
  6813  0C82  3188  20DA  318C   	fcall	_bleSendCMD
  6814  0C85                     l4154:	
  6815                           
  6816                           ;ble.c: 439: }
  6817                           ;ble.c: 441: eusartRunPara.nCmd = 2;
  6818  0C85  3002               	movlw	2
  6819  0C86  0020               	movlb	0	; select bank0
  6820  0C87  00A7               	movwf	??_initBLE
  6821  0C88  0827               	movf	??_initBLE,w
  6822  0C89  00E7               	movwf	_eusartRunPara+3	;volatile
  6823                           
  6824                           ;ble.c: 442: bleSendCMD("AT+SET=1\r\n");
  6825  0C8A  3055               	movlw	low (STR_7| (0+32768))
  6826  0C8B  00A4               	movwf	bleSendCMD@pBuf
  6827  0C8C  3090               	movlw	high (STR_7| (0+32768))
  6828  0C8D  00A5               	movwf	bleSendCMD@pBuf+1
  6829  0C8E  3188  20DA  318C   	fcall	_bleSendCMD
  6830                           
  6831                           ;ble.c: 444: eusartRunPara.nCmd = 3;
  6832  0C91  3003               	movlw	3
  6833  0C92  0020               	movlb	0	; select bank0
  6834  0C93  00A7               	movwf	??_initBLE
  6835  0C94  0827               	movf	??_initBLE,w
  6836  0C95  00E7               	movwf	_eusartRunPara+3	;volatile
  6837                           
  6838                           ;ble.c: 445: bleSendCMD("AT+MODE=DATA\r\n");
  6839  0C96  3046               	movlw	low (STR_8| (0+32768))
  6840  0C97  00A4               	movwf	bleSendCMD@pBuf
  6841  0C98  3090               	movlw	high (STR_8| (0+32768))
  6842  0C99  00A5               	movwf	bleSendCMD@pBuf+1
  6843  0C9A  3188  20DA  318C   	fcall	_bleSendCMD
  6844                           
  6845                           ;ble.c: 447: if(eusartRunPara.fComErr == 0)
  6846  0C9D  0020               	movlb	0	; select bank0
  6847  0C9E  1A64               	btfsc	_eusartRunPara,4	;volatile
  6848  0C9F  0008               	return
  6849                           
  6850                           ;ble.c: 448: eusartRunPara.fMode = 1;
  6851  0CA0  1464               	bsf	_eusartRunPara,0	;volatile
  6852  0CA1  0008               	return
  6853  0CA2                     __end_of_initBLE:	
  6854                           
  6855                           	psect	text17
  6856  08DA                     __ptext17:	
  6857 ;; *************** function _bleSendCMD *****************
  6858 ;; Defined at:
  6859 ;;		line 50 in file "src/ble.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;  pBuf            2    4[BANK0 ] PTR const unsigned char 
  6862 ;;		 -> STR_8(15), STR_7(11), STR_6(34), STR_5(19), 
  6863 ;;		 -> STR_4(5), 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;		None
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  1    wreg      void 
  6868 ;; Registers used:
  6869 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6875 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;Total ram usage:        3 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    8
  6882 ;; This function calls:
  6883 ;;		_eusartSendBuffer
  6884 ;; This function is called by:
  6885 ;;		_initBLE
  6886 ;; This function uses a non-reentrant model
  6887 ;;
  6888                           
  6889                           
  6890                           ;psect for function _bleSendCMD
  6891  08DA                     _bleSendCMD:	
  6892                           
  6893                           ;ble.c: 52: eusartSendBuffer(pBuf);
  6894                           
  6895                           ;incstack = 0
  6896                           ; Regs used in _bleSendCMD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6897  08DA  0020               	movlb	0	; select bank0
  6898  08DB  0825               	movf	bleSendCMD@pBuf+1,w
  6899  08DC  00A2               	movwf	eusartSendBuffer@buf+1
  6900  08DD  0824               	movf	bleSendCMD@pBuf,w
  6901  08DE  00A1               	movwf	eusartSendBuffer@buf
  6902  08DF  3196  2658  3188   	fcall	_eusartSendBuffer
  6903                           
  6904                           ;ble.c: 53: eusartRunPara.fWaitForAck = 1;
  6905  08E2  0020               	movlb	0	; select bank0
  6906  08E3  14E4               	bsf	_eusartRunPara,1	;volatile
  6907                           
  6908                           ;ble.c: 54: eusartRunPara.nReSendCnt = 0;
  6909  08E4  01E6               	clrf	_eusartRunPara+2	;volatile
  6910                           
  6911                           ;ble.c: 55: while(!eusartRunPara.fAck)
  6912  08E5  28ED               	goto	l3324
  6913  08E6                     l3322:	
  6914                           ;ble.c: 66: break;
  6915                           
  6916                           
  6917                           ;ble.c: 67: }
  6918                           ;ble.c: 68: eusartSendBuffer(pBuf);
  6919  08E6  0825               	movf	bleSendCMD@pBuf+1,w
  6920  08E7  00A2               	movwf	eusartSendBuffer@buf+1
  6921  08E8  0824               	movf	bleSendCMD@pBuf,w
  6922  08E9  00A1               	movwf	eusartSendBuffer@buf
  6923  08EA  3196  2658  3188   	fcall	_eusartSendBuffer
  6924  08ED                     l3324:	
  6925  08ED  0020               	movlb	0	; select bank0
  6926  08EE  1964               	btfsc	_eusartRunPara,2	;volatile
  6927  08EF  2900               	goto	l47
  6928                           
  6929                           ;ble.c: 56: {
  6930                           ;ble.c: 57: if(eusartRunPara.nOverTime >= 30)
  6931  08F0  301E               	movlw	30
  6932  08F1  0265               	subwf	_eusartRunPara+1,w	;volatile
  6933  08F2  1C03               	skipc
  6934  08F3  28ED               	goto	l3324
  6935                           
  6936                           ;ble.c: 58: {
  6937                           ;ble.c: 59: eusartRunPara.nOverTime = 0;
  6938  08F4  01E5               	clrf	_eusartRunPara+1	;volatile
  6939                           
  6940                           ;ble.c: 60: eusartRunPara.nReSendCnt ++;
  6941  08F5  3001               	movlw	1
  6942  08F6  00A6               	movwf	??_bleSendCMD
  6943  08F7  0826               	movf	??_bleSendCMD,w
  6944  08F8  07E6               	addwf	_eusartRunPara+2,f	;volatile
  6945                           
  6946                           ;ble.c: 61: if(eusartRunPara.nReSendCnt >= 3)
  6947  08F9  3003               	movlw	3
  6948  08FA  0266               	subwf	_eusartRunPara+2,w	;volatile
  6949  08FB  1C03               	skipc
  6950  08FC  28E6               	goto	l3322
  6951                           
  6952                           ;ble.c: 62: {
  6953                           ;ble.c: 63: eusartRunPara.nReSendCnt = 0;
  6954  08FD  01E6               	clrf	_eusartRunPara+2	;volatile
  6955                           
  6956                           ;ble.c: 64: eusartRunPara.fWaitForAck = 0;
  6957  08FE  10E4               	bcf	_eusartRunPara,1	;volatile
  6958                           
  6959                           ;ble.c: 65: eusartRunPara.fComErr = 1;
  6960  08FF  1664               	bsf	_eusartRunPara,4	;volatile
  6961  0900                     l47:	
  6962                           
  6963                           ;ble.c: 69: }
  6964                           ;ble.c: 70: }
  6965                           ;ble.c: 71: eusartRunPara.fAck = 0;
  6966  0900  1164               	bcf	_eusartRunPara,2	;volatile
  6967  0901  0008               	return
  6968  0902                     __end_of_bleSendCMD:	
  6969                           
  6970                           	psect	text18
  6971  1658                     __ptext18:	
  6972 ;; *************** function _eusartSendBuffer *****************
  6973 ;; Defined at:
  6974 ;;		line 50 in file "src/eusart.c"
  6975 ;; Parameters:    Size  Location     Type
  6976 ;;  buf             2    1[BANK0 ] PTR const unsigned char 
  6977 ;;		 -> STR_8(15), STR_7(11), STR_6(34), STR_5(19), 
  6978 ;;		 -> STR_4(5), 
  6979 ;; Auto vars:     Size  Location     Type
  6980 ;;		None
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  1    wreg      void 
  6983 ;; Registers used:
  6984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6990 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;Total ram usage:        3 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    7
  6997 ;; This function calls:
  6998 ;;		_eusartSendByte
  6999 ;; This function is called by:
  7000 ;;		_bleSendCMD
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           
  7005                           ;psect for function _eusartSendBuffer
  7006  1658                     _eusartSendBuffer:	
  7007  1658                     l3124:	
  7008                           ;eusart.c: 52: while(*buf != '\0')
  7009                           
  7010                           ;incstack = 0
  7011                           ; Regs used in _eusartSendBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7012                           
  7013  1658  0020               	movlb	0	; select bank0
  7014  1659  0821               	movf	eusartSendBuffer@buf,w
  7015  165A  0084               	movwf	4
  7016  165B  0822               	movf	eusartSendBuffer@buf+1,w
  7017  165C  0085               	movwf	5
  7018  165D  0012               	moviw fsr0++
  7019  165E  1903               	btfsc	3,2
  7020  165F  0008               	return
  7021                           
  7022                           ;eusart.c: 53: {
  7023                           ;eusart.c: 54: eusartSendByte(*buf);
  7024  1660  0020               	movlb	0	; select bank0
  7025  1661  0821               	movf	eusartSendBuffer@buf,w
  7026  1662  0084               	movwf	4
  7027  1663  0822               	movf	eusartSendBuffer@buf+1,w
  7028  1664  0085               	movwf	5
  7029  1665  0800               	movf	0,w	;code access
  7030  1666  3194  24B1  3196   	fcall	_eusartSendByte
  7031                           
  7032                           ;eusart.c: 55: buf++;
  7033  1669  3001               	movlw	1
  7034  166A  0020               	movlb	0	; select bank0
  7035  166B  07A1               	addwf	eusartSendBuffer@buf,f
  7036  166C  3000               	movlw	0
  7037  166D  3DA2               	addwfc	eusartSendBuffer@buf+1,f
  7038  166E  2E58               	goto	l3124
  7039  166F                     __end_of_eusartSendBuffer:	
  7040                           
  7041                           	psect	text19
  7042  16A2                     __ptext19:	
  7043 ;; *************** function _findDeviceFlash *****************
  7044 ;; Defined at:
  7045 ;;		line 293 in file "src/led.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;		None
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;		None
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  1    wreg      void 
  7052 ;; Registers used:
  7053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7063 ;;Total ram usage:        0 bytes
  7064 ;; Hardware stack levels used:    1
  7065 ;; Hardware stack levels required when called:   10
  7066 ;; This function calls:
  7067 ;;		_initLedStatus
  7068 ;;		_turnMaxLed
  7069 ;;		_turnOffLed
  7070 ;; This function is called by:
  7071 ;;		_main
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           
  7076                           ;psect for function _findDeviceFlash
  7077  16A2                     _findDeviceFlash:	
  7078                           
  7079                           ;led.c: 295: static unsigned char tog = 0;
  7080                           ;led.c: 296: if (tog)
  7081                           
  7082                           ;incstack = 0
  7083                           ; Regs used in _findDeviceFlash: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7084  16A2  0020               	movlb	0	; select bank0
  7085  16A3  086E               	movf	findDeviceFlash@tog,w
  7086  16A4  1903               	btfsc	3,2
  7087  16A5  2EB7               	goto	l541
  7088                           
  7089                           ;led.c: 297: {
  7090                           ;led.c: 298: tog = 0;
  7091  16A6  01EE               	clrf	findDeviceFlash@tog
  7092                           
  7093                           ;led.c: 299: turnOffLed();
  7094  16A7  3197  270E  3196   	fcall	_turnOffLed
  7095                           
  7096                           ;led.c: 300: if (gLedRunPara.nFlashCount > 0)
  7097  16AA  0021               	movlb	1	; select bank1
  7098  16AB  0851               	movf	(_gLedRunPara^(0+128)+1),w	;volatile
  7099  16AC  1903               	btfsc	3,2
  7100  16AD  2EB0               	goto	l542
  7101                           
  7102                           ;led.c: 301: {
  7103                           ;led.c: 302: gLedRunPara.nFlashCount --;
  7104  16AE  3001               	movlw	1
  7105  16AF  02D1               	subwf	(_gLedRunPara^(0+128)+1),f	;volatile
  7106  16B0                     l542:	
  7107                           
  7108                           ;led.c: 303: }
  7109                           ;led.c: 304: if (gLedRunPara.nFlashCount == 0)
  7110  16B0  0851               	movf	(_gLedRunPara^(0+128)+1),w	;volatile
  7111  16B1  1D03               	btfss	3,2
  7112  16B2  0008               	return
  7113                           
  7114                           ;led.c: 305: {
  7115                           ;led.c: 306: gLedRunPara.find = 0;
  7116  16B3  1050               	bcf	_gLedRunPara^(0+128),0	;volatile
  7117                           
  7118                           ;led.c: 308: initLedStatus();
  7119  16B4  318B  234D         	fcall	_initLedStatus
  7120                           
  7121                           ;led.c: 309: }
  7122                           ;led.c: 310: }
  7123  16B6  0008               	return
  7124  16B7                     l541:	
  7125                           
  7126                           ;led.c: 311: else
  7127                           ;led.c: 312: {
  7128                           ;led.c: 313: tog = 1;
  7129  16B7  01EE               	clrf	findDeviceFlash@tog
  7130  16B8  0AEE               	incf	findDeviceFlash@tog,f
  7131                           
  7132                           ;led.c: 314: turnMaxLed();
  7133  16B9  3188  200C         	fcall	_turnMaxLed
  7134  16BB  0008               	return
  7135  16BC                     __end_of_findDeviceFlash:	
  7136                           
  7137                           	psect	text20
  7138  170E                     __ptext20:	
  7139 ;; *************** function _turnOffLed *****************
  7140 ;; Defined at:
  7141 ;;		line 149 in file "src/led.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;		None
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;		None
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  1    wreg      void 
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0, pclath, cstack
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;Total ram usage:        0 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    7
  7162 ;; This function calls:
  7163 ;;		_PWM1_LoadDutyValue
  7164 ;;		_PWM2_LoadDutyValue
  7165 ;;		_PWM3_LoadDutyValue
  7166 ;;		_PWM4_LoadDutyValue
  7167 ;; This function is called by:
  7168 ;;		_findDeviceFlash
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           
  7173                           ;psect for function _turnOffLed
  7174  170E                     _turnOffLed:	
  7175                           
  7176                           ;led.c: 151: PWM1_LoadDutyValue( 0 );
  7177                           
  7178                           ;incstack = 0
  7179                           ; Regs used in _turnOffLed: [wreg+status,2+status,0+pclath+cstack]
  7180  170E  3000               	movlw	0
  7181  170F  0020               	movlb	0	; select bank0
  7182  1710  00A0               	movwf	PWM1_LoadDutyValue@dutyValue
  7183  1711  00A1               	movwf	PWM1_LoadDutyValue@dutyValue+1
  7184  1712  3197  2764  3197   	fcall	_PWM1_LoadDutyValue
  7185                           
  7186                           ;led.c: 152: PWM2_LoadDutyValue( 0 );
  7187  1715  3000               	movlw	0
  7188  1716  0020               	movlb	0	; select bank0
  7189  1717  00A0               	movwf	PWM2_LoadDutyValue@dutyValue
  7190  1718  00A1               	movwf	PWM2_LoadDutyValue@dutyValue+1
  7191  1719  3197  2783  3197   	fcall	_PWM2_LoadDutyValue
  7192                           
  7193                           ;led.c: 153: PWM3_LoadDutyValue( 0 );
  7194  171C  3000               	movlw	0
  7195  171D  0020               	movlb	0	; select bank0
  7196  171E  00A0               	movwf	PWM3_LoadDutyValue@dutyValue
  7197  171F  00A1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  7198  1720  3197  27A2  3197   	fcall	_PWM3_LoadDutyValue
  7199                           
  7200                           ;led.c: 154: PWM4_LoadDutyValue( 0 );
  7201  1723  3000               	movlw	0
  7202  1724  0020               	movlb	0	; select bank0
  7203  1725  00A0               	movwf	PWM4_LoadDutyValue@dutyValue
  7204  1726  00A1               	movwf	PWM4_LoadDutyValue@dutyValue+1
  7205  1727  3197  27C1         	fcall	_PWM4_LoadDutyValue
  7206  1729  0008               	return
  7207  172A                     __end_of_turnOffLed:	
  7208                           
  7209                           	psect	text21
  7210  080C                     __ptext21:	
  7211 ;; *************** function _turnMaxLed *****************
  7212 ;; Defined at:
  7213 ;;		line 138 in file "src/led.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;		None
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;		None
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  1    wreg      void 
  7220 ;; Registers used:
  7221 ;;		wreg, status,2, status,0, pclath, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;Total ram usage:        0 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    7
  7234 ;; This function calls:
  7235 ;;		_PWM1_LoadDutyValue
  7236 ;;		_PWM2_LoadDutyValue
  7237 ;;		_PWM3_LoadDutyValue
  7238 ;;		_PWM4_LoadDutyValue
  7239 ;; This function is called by:
  7240 ;;		_findDeviceFlash
  7241 ;; This function uses a non-reentrant model
  7242 ;;
  7243                           
  7244                           
  7245                           ;psect for function _turnMaxLed
  7246  080C                     _turnMaxLed:	
  7247                           
  7248                           ;led.c: 140: PWM1_LoadDutyValue( 1000 );
  7249                           
  7250                           ;incstack = 0
  7251                           ; Regs used in _turnMaxLed: [wreg+status,2+status,0+pclath+cstack]
  7252  080C  30E8               	movlw	232
  7253  080D  0020               	movlb	0	; select bank0
  7254  080E  00A0               	movwf	PWM1_LoadDutyValue@dutyValue
  7255  080F  3003               	movlw	3
  7256  0810  00A1               	movwf	PWM1_LoadDutyValue@dutyValue+1
  7257  0811  3197  2764  3188   	fcall	_PWM1_LoadDutyValue
  7258                           
  7259                           ;led.c: 141: PWM2_LoadDutyValue( 1000 );
  7260  0814  30E8               	movlw	232
  7261  0815  0020               	movlb	0	; select bank0
  7262  0816  00A0               	movwf	PWM2_LoadDutyValue@dutyValue
  7263  0817  3003               	movlw	3
  7264  0818  00A1               	movwf	PWM2_LoadDutyValue@dutyValue+1
  7265  0819  3197  2783  3188   	fcall	_PWM2_LoadDutyValue
  7266                           
  7267                           ;led.c: 142: PWM3_LoadDutyValue( 1000 );
  7268  081C  30E8               	movlw	232
  7269  081D  0020               	movlb	0	; select bank0
  7270  081E  00A0               	movwf	PWM3_LoadDutyValue@dutyValue
  7271  081F  3003               	movlw	3
  7272  0820  00A1               	movwf	PWM3_LoadDutyValue@dutyValue+1
  7273  0821  3197  27A2  3188   	fcall	_PWM3_LoadDutyValue
  7274                           
  7275                           ;led.c: 143: PWM4_LoadDutyValue( 1000 );
  7276  0824  30E8               	movlw	232
  7277  0825  0020               	movlb	0	; select bank0
  7278  0826  00A0               	movwf	PWM4_LoadDutyValue@dutyValue
  7279  0827  3003               	movlw	3
  7280  0828  00A1               	movwf	PWM4_LoadDutyValue@dutyValue+1
  7281  0829  3197  27C1         	fcall	_PWM4_LoadDutyValue
  7282  082B  0008               	return
  7283  082C                     __end_of_turnMaxLed:	
  7284                           
  7285                           	psect	text22
  7286  0B4D                     __ptext22:	
  7287 ;; *************** function _initLedStatus *****************
  7288 ;; Defined at:
  7289 ;;		line 246 in file "src/led.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;		None
  7292 ;; Auto vars:     Size  Location     Type
  7293 ;;  i               1    6[BANK0 ] unsigned char 
  7294 ;;  sta             1    5[BANK0 ] unsigned char 
  7295 ;; Return value:  Size  Location     Type
  7296 ;;                  1    wreg      void 
  7297 ;; Registers used:
  7298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7305 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7307 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7308 ;;Total ram usage:        3 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    9
  7311 ;; This function calls:
  7312 ;;		_indicateLedBle
  7313 ;;		_indicateLedDay
  7314 ;;		_indicateLedNight
  7315 ;;		_indicateLedOff
  7316 ;;		_turnOffLedRamp
  7317 ;;		_turnOnLedRamp
  7318 ;;		_updateDayBright
  7319 ;;		_updateNightBright
  7320 ;; This function is called by:
  7321 ;;		_initLed
  7322 ;;		_findDeviceFlash
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326                           
  7327                           ;psect for function _initLedStatus
  7328  0B4D                     _initLedStatus:	
  7329                           
  7330                           ;led.c: 248: unsigned char sta = gLedPara.fSta;
  7331                           
  7332                           ;incstack = 0
  7333                           ; Regs used in _initLedStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7334  0B4D  0022               	movlb	2	; select bank2
  7335  0B4E  0C20               	rrf	_gLedPara^(0+256),w	;volatile
  7336  0B4F  3903               	andlw	3
  7337  0B50  0020               	movlb	0	; select bank0
  7338  0B51  00A4               	movwf	??_initLedStatus
  7339  0B52  0824               	movf	??_initLedStatus,w
  7340  0B53  00A5               	movwf	initLedStatus@sta
  7341                           
  7342                           ;led.c: 249: switch(sta)
  7343  0B54  2B8C               	goto	l3778
  7344  0B55                     l3744:	
  7345                           ;led.c: 250: {
  7346                           ;led.c: 251: case 0:
  7347                           
  7348                           
  7349                           ;led.c: 252: turnOffLedRamp();
  7350  0B55  3195  255C  318B   	fcall	_turnOffLedRamp
  7351                           
  7352                           ;led.c: 253: indicateLedOff();
  7353  0B58  3194  249A         	fcall	_indicateLedOff
  7354                           
  7355                           ;led.c: 254: break;
  7356  0B5A  0008               	return
  7357  0B5B                     l3748:	
  7358                           ;led.c: 256: case 1:
  7359                           
  7360                           
  7361                           ;led.c: 257: updateDayBright();
  7362  0B5B  3188  20B3  318B   	fcall	_updateDayBright
  7363                           
  7364                           ;led.c: 258: indicateLedDay();
  7365  0B5E  3194  2490  318B   	fcall	_indicateLedDay
  7366                           
  7367                           ;led.c: 259: turnOnLedRamp();
  7368  0B61  3196  266F         	fcall	_turnOnLedRamp
  7369                           
  7370                           ;led.c: 260: break;
  7371  0B63  0008               	return
  7372  0B64                     l3754:	
  7373                           ;led.c: 262: case 2:
  7374                           
  7375                           
  7376                           ;led.c: 263: updateNightBright();
  7377  0B64  318A  2285  318B   	fcall	_updateNightBright
  7378                           
  7379                           ;led.c: 264: indicateLedNight();
  7380  0B67  3194  2495  318B   	fcall	_indicateLedNight
  7381                           
  7382                           ;led.c: 265: turnOnLedRamp();
  7383  0B6A  3196  266F         	fcall	_turnOnLedRamp
  7384                           
  7385                           ;led.c: 266: break;
  7386  0B6C  0008               	return
  7387  0B6D                     l3760:	
  7388                           ;led.c: 268: case 3:
  7389                           
  7390                           
  7391                           ;led.c: 269: indicateLedBle();
  7392  0B6D  3194  248B  318B   	fcall	_indicateLedBle
  7393                           
  7394                           ;led.c: 270: if (!gLedPara.fAuto)
  7395  0B70  0022               	movlb	2	; select bank2
  7396  0B71  1820               	btfsc	_gLedPara^(0+256),0	;volatile
  7397  0B72  0008               	return
  7398                           
  7399                           ;led.c: 271: {
  7400                           ;led.c: 272: for (unsigned char i = 0; i < 4; i++)
  7401  0B73  0020               	movlb	0	; select bank0
  7402  0B74  01A6               	clrf	initLedStatus@i
  7403  0B75                     L3:	
  7404  0B75  3004               	movlw	4
  7405  0B76  0226               	subwf	initLedStatus@i,w
  7406  0B77  1803               	btfsc	3,0
  7407  0B78  0008               	return
  7408                           
  7409                           ;led.c: 273: {
  7410                           ;led.c: 274: gLedRunPara.nTargetBrt[i] = gLedPara.mPara.manualPara.nBrt[i];
  7411  0B79  3526               	lslf	initLedStatus@i,w
  7412  0B7A  3E02               	addlw	2
  7413  0B7B  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
  7414  0B7C  0086               	movwf	6
  7415  0B7D  3001               	movlw	1	; select bank2/3
  7416  0B7E  0087               	movwf	7
  7417  0B7F  3526               	lslf	initLedStatus@i,w
  7418  0B80  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
  7419  0B81  0084               	movwf	4
  7420  0B82  0185               	clrf	5
  7421  0B83  3F40               	moviw [0]fsr1
  7422  0B84  3F80               	movwi [0]fsr0
  7423  0B85  3F41               	moviw [1]fsr1
  7424  0B86  3F81               	movwi [1]fsr0
  7425  0B87  3001               	movlw	1
  7426  0B88  00A4               	movwf	??_initLedStatus
  7427  0B89  0824               	movf	??_initLedStatus,w
  7428  0B8A  07A6               	addwf	initLedStatus@i,f
  7429  0B8B  2B75               	goto	L3
  7430  0B8C                     l3778:	
  7431                           ;led.c: 281: }
  7432                           
  7433                           ;led.c: 280: break;
  7434                           
  7435                           ;led.c: 279: default:
  7436                           
  7437                           ;led.c: 275: }
  7438                           ;led.c: 276: }
  7439                           ;led.c: 277: break;
  7440                           
  7441  0B8C  0825               	movf	initLedStatus@sta,w
  7442                           
  7443                           ; Switch size 1, requested type "space"
  7444                           ; Number of cases is 4, Range of values is 0 to 3
  7445                           ; switch strategies available:
  7446                           ; Name         Instructions Cycles
  7447                           ; simple_byte           13     7 (average)
  7448                           ; direct_byte           14     6 (fixed)
  7449                           ; jumptable            260     6 (fixed)
  7450                           ;	Chosen strategy is simple_byte
  7451  0B8D  3A00               	xorlw	0	; case 0
  7452  0B8E  1903               	skipnz
  7453  0B8F  2B55               	goto	l3744
  7454  0B90  3A01               	xorlw	1	; case 1
  7455  0B91  1903               	skipnz
  7456  0B92  2B5B               	goto	l3748
  7457  0B93  3A03               	xorlw	3	; case 2
  7458  0B94  1903               	skipnz
  7459  0B95  2B64               	goto	l3754
  7460  0B96  3A01               	xorlw	1	; case 3
  7461  0B97  1903               	skipnz
  7462  0B98  2B6D               	goto	l3760
  7463  0B99  2B9A               	goto	l533
  7464  0B9A                     l533:	
  7465  0B9A  0008               	return
  7466  0B9B                     __end_of_initLedStatus:	
  7467                           
  7468                           	psect	text23
  7469  0A85                     __ptext23:	
  7470 ;; *************** function _updateNightBright *****************
  7471 ;; Defined at:
  7472 ;;		line 384 in file "src/led.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;		None
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;  i               1    3[BANK0 ] unsigned char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  1    wreg      void 
  7479 ;; Registers used:
  7480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7490 ;;Total ram usage:        2 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; Hardware stack levels required when called:    8
  7493 ;; This function calls:
  7494 ;;		_updatePWM
  7495 ;; This function is called by:
  7496 ;;		_initLedStatus
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           
  7501                           ;psect for function _updateNightBright
  7502  0A85                     _updateNightBright:	
  7503                           
  7504                           ;led.c: 386: for (unsigned char i = 0; i < 4; i++)
  7505                           
  7506                           ;incstack = 0
  7507                           ; Regs used in _updateNightBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7508  0A85  0020               	movlb	0	; select bank0
  7509  0A86  01A3               	clrf	updateNightBright@i
  7510  0A87  3004               	movlw	4
  7511  0A88  0223               	subwf	updateNightBright@i,w
  7512  0A89  1803               	btfsc	3,0
  7513  0A8A  2ABF               	goto	l3222
  7514  0A8B                     l3212:	
  7515                           
  7516                           ;led.c: 387: {
  7517                           ;led.c: 388: if (i == 2)
  7518  0A8B  3002               	movlw	2
  7519  0A8C  0623               	xorwf	updateNightBright@i,w
  7520  0A8D  1D03               	btfss	3,2
  7521  0A8E  2AA5               	goto	l3216
  7522                           
  7523                           ;led.c: 389: {
  7524                           ;led.c: 390: gLedPara.mPara.manualPara.nBrt[i] = gLedPara.tPara.nNightBrt;
  7525  0A8F  3523               	lslf	updateNightBright@i,w
  7526  0A90  3E02               	addlw	2
  7527  0A91  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
  7528  0A92  0086               	movwf	6
  7529  0A93  3001               	movlw	1	; select bank2/3
  7530  0A94  0087               	movwf	7
  7531  0A95  0022               	movlb	2	; select bank2
  7532  0A96  084D               	movf	(_gLedPara^(0+256)+45),w	;volatile
  7533  0A97  3FC0               	movwi [0]fsr1
  7534  0A98  084E               	movf	((_gLedPara+1)^(0+256)+45),w	;volatile
  7535  0A99  3FC1               	movwi [1]fsr1
  7536                           
  7537                           ;led.c: 391: gLedRunPara.nCurrentBrt[i] = gLedPara.tPara.nNightBrt;
  7538  0A9A  0020               	movlb	0	; select bank0
  7539  0A9B  3523               	lslf	updateNightBright@i,w
  7540  0A9C  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
  7541  0A9D  0086               	movwf	6
  7542  0A9E  0187               	clrf	7
  7543  0A9F  0022               	movlb	2	; select bank2
  7544  0AA0  084D               	movf	(_gLedPara^(0+256)+45),w	;volatile
  7545  0AA1  3FC0               	movwi [0]fsr1
  7546  0AA2  084E               	movf	((_gLedPara+1)^(0+256)+45),w	;volatile
  7547  0AA3  3FC1               	movwi [1]fsr1
  7548                           
  7549                           ;led.c: 392: }
  7550  0AA4  2AB6               	goto	l3218
  7551  0AA5                     l3216:	
  7552                           
  7553                           ;led.c: 393: else
  7554                           ;led.c: 394: {
  7555                           ;led.c: 395: gLedPara.mPara.manualPara.nBrt[i] = 0;
  7556  0AA5  0020               	movlb	0	; select bank0
  7557  0AA6  3523               	lslf	updateNightBright@i,w
  7558  0AA7  3E02               	addlw	2
  7559  0AA8  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
  7560  0AA9  0086               	movwf	6
  7561  0AAA  3001               	movlw	1	; select bank2/3
  7562  0AAB  0087               	movwf	7
  7563  0AAC  3000               	movlw	0
  7564  0AAD  3FC0               	movwi [0]fsr1
  7565  0AAE  3FC1               	movwi [1]fsr1
  7566                           
  7567                           ;led.c: 396: gLedRunPara.nCurrentBrt[i] = 0;
  7568  0AAF  3523               	lslf	updateNightBright@i,w
  7569  0AB0  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
  7570  0AB1  0086               	movwf	6
  7571  0AB2  0187               	clrf	7
  7572  0AB3  3000               	movlw	0
  7573  0AB4  3FC0               	movwi [0]fsr1
  7574  0AB5  3FC1               	movwi [1]fsr1
  7575  0AB6                     l3218:	
  7576  0AB6  3001               	movlw	1
  7577  0AB7  0020               	movlb	0	; select bank0
  7578  0AB8  00A2               	movwf	??_updateNightBright
  7579  0AB9  0822               	movf	??_updateNightBright,w
  7580  0ABA  07A3               	addwf	updateNightBright@i,f
  7581  0ABB  3004               	movlw	4
  7582  0ABC  0223               	subwf	updateNightBright@i,w
  7583  0ABD  1C03               	skipc
  7584  0ABE  2A8B               	goto	l3212
  7585  0ABF                     l3222:	
  7586                           
  7587                           ;led.c: 397: }
  7588                           ;led.c: 398: }
  7589                           ;led.c: 399: updatePWM();
  7590  0ABF  3189  2157         	fcall	_updatePWM
  7591  0AC1  0008               	return
  7592  0AC2                     __end_of_updateNightBright:	
  7593                           
  7594                           	psect	text24
  7595  08B3                     __ptext24:	
  7596 ;; *************** function _updateDayBright *****************
  7597 ;; Defined at:
  7598 ;;		line 362 in file "src/led.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;		None
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;  i               1    3[BANK0 ] unsigned char 
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  1    wreg      void 
  7605 ;; Registers used:
  7606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7616 ;;Total ram usage:        2 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    8
  7619 ;; This function calls:
  7620 ;;		_updatePWM
  7621 ;; This function is called by:
  7622 ;;		_initLedStatus
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           
  7627                           ;psect for function _updateDayBright
  7628  08B3                     _updateDayBright:	
  7629                           
  7630                           ;led.c: 364: for (unsigned char i = 0; i < 4; i++)
  7631                           
  7632                           ;incstack = 0
  7633                           ; Regs used in _updateDayBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7634  08B3  0020               	movlb	0	; select bank0
  7635  08B4  01A3               	clrf	updateDayBright@i
  7636  08B5  3004               	movlw	4
  7637  08B6  0223               	subwf	updateDayBright@i,w
  7638  08B7  1803               	btfsc	3,0
  7639  08B8  28D7               	goto	l3196
  7640  08B9                     l3190:	
  7641                           
  7642                           ;led.c: 365: {
  7643                           ;led.c: 366: gLedPara.mPara.manualPara.nBrt[i] = gLedPara.tPara.nDayBrt;
  7644  08B9  3523               	lslf	updateDayBright@i,w
  7645  08BA  3E02               	addlw	2
  7646  08BB  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
  7647  08BC  0086               	movwf	6
  7648  08BD  3001               	movlw	1	; select bank2/3
  7649  08BE  0087               	movwf	7
  7650  08BF  0022               	movlb	2	; select bank2
  7651  08C0  084B               	movf	(_gLedPara^(0+256)+43),w	;volatile
  7652  08C1  3FC0               	movwi [0]fsr1
  7653  08C2  084C               	movf	((_gLedPara+1)^(0+256)+43),w	;volatile
  7654  08C3  3FC1               	movwi [1]fsr1
  7655                           
  7656                           ;led.c: 367: gLedRunPara.nCurrentBrt[i] = gLedPara.tPara.nDayBrt;
  7657  08C4  0020               	movlb	0	; select bank0
  7658  08C5  3523               	lslf	updateDayBright@i,w
  7659  08C6  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
  7660  08C7  0086               	movwf	6
  7661  08C8  0187               	clrf	7
  7662  08C9  0022               	movlb	2	; select bank2
  7663  08CA  084B               	movf	(_gLedPara^(0+256)+43),w	;volatile
  7664  08CB  3FC0               	movwi [0]fsr1
  7665  08CC  084C               	movf	((_gLedPara+1)^(0+256)+43),w	;volatile
  7666  08CD  3FC1               	movwi [1]fsr1
  7667  08CE  3001               	movlw	1
  7668  08CF  0020               	movlb	0	; select bank0
  7669  08D0  00A2               	movwf	??_updateDayBright
  7670  08D1  0822               	movf	??_updateDayBright,w
  7671  08D2  07A3               	addwf	updateDayBright@i,f
  7672  08D3  3004               	movlw	4
  7673  08D4  0223               	subwf	updateDayBright@i,w
  7674  08D5  1C03               	skipc
  7675  08D6  28B9               	goto	l3190
  7676  08D7                     l3196:	
  7677                           
  7678                           ;led.c: 368: }
  7679                           ;led.c: 369: updatePWM();
  7680  08D7  3189  2157         	fcall	_updatePWM
  7681  08D9  0008               	return
  7682  08DA                     __end_of_updateDayBright:	
  7683                           
  7684                           	psect	text25
  7685  149A                     __ptext25:	
  7686 ;; *************** function _indicateLedOff *****************
  7687 ;; Defined at:
  7688 ;;		line 331 in file "src/led.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;		None
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;		None
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  1    wreg      void 
  7695 ;; Registers used:
  7696 ;;		None
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;Total ram usage:        0 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    6
  7709 ;; This function calls:
  7710 ;;		Nothing
  7711 ;; This function is called by:
  7712 ;;		_initLedStatus
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           
  7717                           ;psect for function _indicateLedOff
  7718  149A                     _indicateLedOff:	
  7719                           
  7720                           ;incstack = 0
  7721                           ; Regs used in _indicateLedOff: []
  7722                           ;led.c: 333: do { LATBbits.LATB6 = 0; } while(0);
  7723  149A  0022               	movlb	2	; select bank2
  7724  149B  130D               	bcf	13,6	;volatile
  7725                           
  7726                           ;led.c: 334: do { LATCbits.LATC7 = 1; } while(0);
  7727  149C  178E               	bsf	14,7	;volatile
  7728                           
  7729                           ;led.c: 335: do { LATBbits.LATB7 = 1; } while(0);
  7730  149D  178D               	bsf	13,7	;volatile
  7731  149E  0008               	return
  7732  149F                     __end_of_indicateLedOff:	
  7733                           
  7734                           	psect	text26
  7735  1495                     __ptext26:	
  7736 ;; *************** function _indicateLedNight *****************
  7737 ;; Defined at:
  7738 ;;		line 347 in file "src/led.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;		None
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;		None
  7743 ;; Return value:  Size  Location     Type
  7744 ;;                  1    wreg      void 
  7745 ;; Registers used:
  7746 ;;		None
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;Total ram usage:        0 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    6
  7759 ;; This function calls:
  7760 ;;		Nothing
  7761 ;; This function is called by:
  7762 ;;		_initLedStatus
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           
  7767                           ;psect for function _indicateLedNight
  7768  1495                     _indicateLedNight:	
  7769                           
  7770                           ;incstack = 0
  7771                           ; Regs used in _indicateLedNight: []
  7772                           ;led.c: 349: do { LATBbits.LATB6 = 1; } while(0);
  7773  1495  0022               	movlb	2	; select bank2
  7774  1496  170D               	bsf	13,6	;volatile
  7775                           
  7776                           ;led.c: 350: do { LATCbits.LATC7 = 1; } while(0);
  7777  1497  178E               	bsf	14,7	;volatile
  7778                           
  7779                           ;led.c: 351: do { LATBbits.LATB7 = 0; } while(0);
  7780  1498  138D               	bcf	13,7	;volatile
  7781  1499  0008               	return
  7782  149A                     __end_of_indicateLedNight:	
  7783                           
  7784                           	psect	text27
  7785  1490                     __ptext27:	
  7786 ;; *************** function _indicateLedDay *****************
  7787 ;; Defined at:
  7788 ;;		line 339 in file "src/led.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;		None
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;		None
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  1    wreg      void 
  7795 ;; Registers used:
  7796 ;;		None
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;Total ram usage:        0 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    6
  7809 ;; This function calls:
  7810 ;;		Nothing
  7811 ;; This function is called by:
  7812 ;;		_initLedStatus
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           
  7817                           ;psect for function _indicateLedDay
  7818  1490                     _indicateLedDay:	
  7819                           
  7820                           ;incstack = 0
  7821                           ; Regs used in _indicateLedDay: []
  7822                           ;led.c: 341: do { LATBbits.LATB6 = 0; } while(0);
  7823  1490  0022               	movlb	2	; select bank2
  7824  1491  130D               	bcf	13,6	;volatile
  7825                           
  7826                           ;led.c: 342: do { LATCbits.LATC7 = 0; } while(0);
  7827  1492  138E               	bcf	14,7	;volatile
  7828                           
  7829                           ;led.c: 343: do { LATBbits.LATB7 = 0; } while(0);
  7830  1493  138D               	bcf	13,7	;volatile
  7831  1494  0008               	return
  7832  1495                     __end_of_indicateLedDay:	
  7833                           
  7834                           	psect	text28
  7835  006C                     __ptext28:	
  7836 ;; *************** function _autoRun *****************
  7837 ;; Defined at:
  7838 ;;		line 42 in file "src/led.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;		None
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;  k               1   39[BANK1 ] unsigned char 
  7843 ;;  dt              4   26[BANK1 ] unsigned long 
  7844 ;;  st              2   37[BANK1 ] unsigned int 
  7845 ;;  et              2   33[BANK1 ] unsigned int 
  7846 ;;  duration        2   24[BANK1 ] unsigned int 
  7847 ;;  dbrt            1   30[BANK1 ] unsigned char 
  7848 ;;  val            16    0[BANK1 ] unsigned char [4][4]
  7849 ;;  tr              8   16[BANK1 ] unsigned int [4]
  7850 ;;  ct              2   35[BANK1 ] unsigned int 
  7851 ;;  i               1   40[BANK1 ] unsigned char 
  7852 ;;  j               1   32[BANK1 ] unsigned char 
  7853 ;;  sec             1   31[BANK1 ] unsigned char 
  7854 ;; Return value:  Size  Location     Type
  7855 ;;                  1    wreg      void 
  7856 ;; Registers used:
  7857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7858 ;; Tracked objects:
  7859 ;;		On entry : 0/0
  7860 ;;		On exit  : 0/0
  7861 ;;		Unchanged: 0/0
  7862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7864 ;;      Locals:         0       0      41       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;      Temps:          0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Totals:         0      17      41       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;Total ram usage:       58 bytes
  7868 ;; Hardware stack levels used:    1
  7869 ;; Hardware stack levels required when called:    8
  7870 ;; This function calls:
  7871 ;;		___lldiv
  7872 ;;		___lmul
  7873 ;;		___wmul
  7874 ;;		_updatePWM
  7875 ;; This function is called by:
  7876 ;;		_main
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           
  7881                           ;psect for function _autoRun
  7882  006C                     _autoRun:	
  7883                           
  7884                           ;led.c: 44: unsigned char i, j;
  7885                           ;led.c: 45: unsigned int ct = gCurrentTime.datetime.hour*60u + gCurrentTime.datetime.min
      +                          ute;
  7886                           
  7887                           ;incstack = 0
  7888                           ; Regs used in _autoRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7889  006C  0021               	movlb	1	; select bank1
  7890  006D  086A               	movf	(_gCurrentTime^(0+128)+5),w	;volatile
  7891  006E  0020               	movlb	0	; select bank0
  7892  006F  00BA               	movwf	??_autoRun
  7893  0070  01BB               	clrf	??_autoRun+1
  7894  0071  0021               	movlb	1	; select bank1
  7895  0072  0869               	movf	(_gCurrentTime^(0+128)+4),w	;volatile
  7896  0073  0020               	movlb	0	; select bank0
  7897  0074  00BC               	movwf	??_autoRun+2
  7898  0075  01BD               	clrf	??_autoRun+3
  7899  0076  083C               	movf	??_autoRun+2,w
  7900  0077  00A0               	movwf	___wmul@multiplier
  7901  0078  083D               	movf	??_autoRun+3,w
  7902  0079  00A1               	movwf	___wmul@multiplier+1
  7903  007A  303C               	movlw	60
  7904  007B  00A2               	movwf	___wmul@multiplicand
  7905  007C  3000               	movlw	0
  7906  007D  00A3               	movwf	___wmul@multiplicand+1
  7907  007E  3196  26F2  3180   	fcall	___wmul
  7908  0081  0020               	movlb	0	; select bank0
  7909  0082  083A               	movf	??_autoRun,w
  7910  0083  0720               	addwf	?___wmul,w
  7911  0084  00BE               	movwf	??_autoRun+4
  7912  0085  083B               	movf	??_autoRun+1,w
  7913  0086  3D21               	addwfc	?___wmul+1,w
  7914  0087  00BF               	movwf	??_autoRun+5
  7915  0088  083E               	movf	??_autoRun+4,w
  7916  0089  0021               	movlb	1	; select bank1
  7917  008A  00C3               	movwf	autoRun@ct^(0+128)
  7918  008B  0020               	movlb	0	; select bank0
  7919  008C  083F               	movf	??_autoRun+5,w
  7920  008D  0021               	movlb	1	; select bank1
  7921  008E  00C4               	movwf	(autoRun@ct+1)^(0+128)
  7922                           
  7923                           ;led.c: 46: unsigned char sec = gCurrentTime.datetime.second;
  7924  008F  086B               	movf	(_gCurrentTime^(0+128)+6),w	;volatile
  7925  0090  0020               	movlb	0	; select bank0
  7926  0091  00BA               	movwf	??_autoRun
  7927  0092  083A               	movf	??_autoRun,w
  7928  0093  0021               	movlb	1	; select bank1
  7929  0094  00BF               	movwf	autoRun@sec^(0+128)
  7930                           
  7931                           ;led.c: 47: unsigned int tr[4];
  7932                           ;led.c: 48: tr[0] = gLedPara.aPara.autoPara.sunrise.start.hour*60u + gLedPara.aPara.auto
      +                          Para.sunrise.start.minute;
  7933  0095  0022               	movlb	2	; select bank2
  7934  0096  083C               	movf	(_gLedPara^(0+256)+28),w	;volatile
  7935  0097  0020               	movlb	0	; select bank0
  7936  0098  00BA               	movwf	??_autoRun
  7937  0099  01BB               	clrf	??_autoRun+1
  7938  009A  0022               	movlb	2	; select bank2
  7939  009B  083B               	movf	(_gLedPara^(0+256)+27),w	;volatile
  7940  009C  0020               	movlb	0	; select bank0
  7941  009D  00BC               	movwf	??_autoRun+2
  7942  009E  01BD               	clrf	??_autoRun+3
  7943  009F  083C               	movf	??_autoRun+2,w
  7944  00A0  00A0               	movwf	___wmul@multiplier
  7945  00A1  083D               	movf	??_autoRun+3,w
  7946  00A2  00A1               	movwf	___wmul@multiplier+1
  7947  00A3  303C               	movlw	60
  7948  00A4  00A2               	movwf	___wmul@multiplicand
  7949  00A5  3000               	movlw	0
  7950  00A6  00A3               	movwf	___wmul@multiplicand+1
  7951  00A7  3196  26F2  3180   	fcall	___wmul
  7952  00AA  0020               	movlb	0	; select bank0
  7953  00AB  083A               	movf	??_autoRun,w
  7954  00AC  0720               	addwf	?___wmul,w
  7955  00AD  00BE               	movwf	??_autoRun+4
  7956  00AE  083B               	movf	??_autoRun+1,w
  7957  00AF  3D21               	addwfc	?___wmul+1,w
  7958  00B0  00BF               	movwf	??_autoRun+5
  7959  00B1  083E               	movf	??_autoRun+4,w
  7960  00B2  0021               	movlb	1	; select bank1
  7961  00B3  00B0               	movwf	autoRun@tr^(0+128)
  7962  00B4  0020               	movlb	0	; select bank0
  7963  00B5  083F               	movf	??_autoRun+5,w
  7964  00B6  0021               	movlb	1	; select bank1
  7965  00B7  00B1               	movwf	(autoRun@tr+1)^(0+128)
  7966                           
  7967                           ;led.c: 49: tr[1] = gLedPara.aPara.autoPara.sunrise.end.hour*60u + gLedPara.aPara.autoPa
      +                          ra.sunrise.end.minute;
  7968  00B8  0022               	movlb	2	; select bank2
  7969  00B9  083E               	movf	(_gLedPara^(0+256)+30),w	;volatile
  7970  00BA  0020               	movlb	0	; select bank0
  7971  00BB  00BA               	movwf	??_autoRun
  7972  00BC  01BB               	clrf	??_autoRun+1
  7973  00BD  0022               	movlb	2	; select bank2
  7974  00BE  083D               	movf	(_gLedPara^(0+256)+29),w	;volatile
  7975  00BF  0020               	movlb	0	; select bank0
  7976  00C0  00BC               	movwf	??_autoRun+2
  7977  00C1  01BD               	clrf	??_autoRun+3
  7978  00C2  083C               	movf	??_autoRun+2,w
  7979  00C3  00A0               	movwf	___wmul@multiplier
  7980  00C4  083D               	movf	??_autoRun+3,w
  7981  00C5  00A1               	movwf	___wmul@multiplier+1
  7982  00C6  303C               	movlw	60
  7983  00C7  00A2               	movwf	___wmul@multiplicand
  7984  00C8  3000               	movlw	0
  7985  00C9  00A3               	movwf	___wmul@multiplicand+1
  7986  00CA  3196  26F2  3180   	fcall	___wmul
  7987  00CD  0020               	movlb	0	; select bank0
  7988  00CE  083A               	movf	??_autoRun,w
  7989  00CF  0720               	addwf	?___wmul,w
  7990  00D0  00BE               	movwf	??_autoRun+4
  7991  00D1  083B               	movf	??_autoRun+1,w
  7992  00D2  3D21               	addwfc	?___wmul+1,w
  7993  00D3  00BF               	movwf	??_autoRun+5
  7994  00D4  083E               	movf	??_autoRun+4,w
  7995  00D5  0021               	movlb	1	; select bank1
  7996  00D6  00B2               	movwf	(autoRun@tr^(0+128)+2)
  7997  00D7  0020               	movlb	0	; select bank0
  7998  00D8  083F               	movf	??_autoRun+5,w
  7999  00D9  0021               	movlb	1	; select bank1
  8000  00DA  00B3               	movwf	((autoRun@tr+1)^(0+128)+2)
  8001                           
  8002                           ;led.c: 50: tr[2] = gLedPara.aPara.autoPara.sunset.start.hour*60u + gLedPara.aPara.autoP
      +                          ara.sunset.start.minute;
  8003  00DB  0022               	movlb	2	; select bank2
  8004  00DC  0844               	movf	(_gLedPara^(0+256)+36),w	;volatile
  8005  00DD  0020               	movlb	0	; select bank0
  8006  00DE  00BA               	movwf	??_autoRun
  8007  00DF  01BB               	clrf	??_autoRun+1
  8008  00E0  0022               	movlb	2	; select bank2
  8009  00E1  0843               	movf	(_gLedPara^(0+256)+35),w	;volatile
  8010  00E2  0020               	movlb	0	; select bank0
  8011  00E3  00BC               	movwf	??_autoRun+2
  8012  00E4  01BD               	clrf	??_autoRun+3
  8013  00E5  083C               	movf	??_autoRun+2,w
  8014  00E6  00A0               	movwf	___wmul@multiplier
  8015  00E7  083D               	movf	??_autoRun+3,w
  8016  00E8  00A1               	movwf	___wmul@multiplier+1
  8017  00E9  303C               	movlw	60
  8018  00EA  00A2               	movwf	___wmul@multiplicand
  8019  00EB  3000               	movlw	0
  8020  00EC  00A3               	movwf	___wmul@multiplicand+1
  8021  00ED  3196  26F2  3180   	fcall	___wmul
  8022  00F0  0020               	movlb	0	; select bank0
  8023  00F1  083A               	movf	??_autoRun,w
  8024  00F2  0720               	addwf	?___wmul,w
  8025  00F3  00BE               	movwf	??_autoRun+4
  8026  00F4  083B               	movf	??_autoRun+1,w
  8027  00F5  3D21               	addwfc	?___wmul+1,w
  8028  00F6  00BF               	movwf	??_autoRun+5
  8029  00F7  083E               	movf	??_autoRun+4,w
  8030  00F8  0021               	movlb	1	; select bank1
  8031  00F9  00B4               	movwf	(autoRun@tr^(0+128)+4)
  8032  00FA  0020               	movlb	0	; select bank0
  8033  00FB  083F               	movf	??_autoRun+5,w
  8034  00FC  0021               	movlb	1	; select bank1
  8035  00FD  00B5               	movwf	((autoRun@tr+1)^(0+128)+4)
  8036                           
  8037                           ;led.c: 51: tr[3] = gLedPara.aPara.autoPara.sunset.end.hour*60u + gLedPara.aPara.autoPar
      +                          a.sunset.end.minute;
  8038  00FE  0022               	movlb	2	; select bank2
  8039  00FF  0846               	movf	(_gLedPara^(0+256)+38),w	;volatile
  8040  0100  0020               	movlb	0	; select bank0
  8041  0101  00BA               	movwf	??_autoRun
  8042  0102  01BB               	clrf	??_autoRun+1
  8043  0103  0022               	movlb	2	; select bank2
  8044  0104  0845               	movf	(_gLedPara^(0+256)+37),w	;volatile
  8045  0105  0020               	movlb	0	; select bank0
  8046  0106  00BC               	movwf	??_autoRun+2
  8047  0107  01BD               	clrf	??_autoRun+3
  8048  0108  083C               	movf	??_autoRun+2,w
  8049  0109  00A0               	movwf	___wmul@multiplier
  8050  010A  083D               	movf	??_autoRun+3,w
  8051  010B  00A1               	movwf	___wmul@multiplier+1
  8052  010C  303C               	movlw	60
  8053  010D  00A2               	movwf	___wmul@multiplicand
  8054  010E  3000               	movlw	0
  8055  010F  00A3               	movwf	___wmul@multiplicand+1
  8056  0110  3196  26F2  3180   	fcall	___wmul
  8057  0113  0020               	movlb	0	; select bank0
  8058  0114  083A               	movf	??_autoRun,w
  8059  0115  0720               	addwf	?___wmul,w
  8060  0116  00BE               	movwf	??_autoRun+4
  8061  0117  083B               	movf	??_autoRun+1,w
  8062  0118  3D21               	addwfc	?___wmul+1,w
  8063  0119  00BF               	movwf	??_autoRun+5
  8064  011A  083E               	movf	??_autoRun+4,w
  8065  011B  0021               	movlb	1	; select bank1
  8066  011C  00B6               	movwf	(autoRun@tr^(0+128)+6)
  8067  011D  0020               	movlb	0	; select bank0
  8068  011E  083F               	movf	??_autoRun+5,w
  8069  011F  0021               	movlb	1	; select bank1
  8070  0120  00B7               	movwf	((autoRun@tr+1)^(0+128)+6)
  8071                           
  8072                           ;led.c: 52: unsigned char val[4][4];
  8073                           ;led.c: 53: for (i = 0; i < 4; i++)
  8074  0121  01C8               	clrf	autoRun@i^(0+128)
  8075  0122  3004               	movlw	4
  8076  0123  0248               	subwf	autoRun@i^(0+128),w
  8077  0124  1803               	btfsc	3,0
  8078  0125  2979               	goto	l4290
  8079  0126                     l4284:	
  8080                           
  8081                           ;led.c: 54: {
  8082                           ;led.c: 55: val[0][i] = gLedPara.aPara.autoPara.moonlight[i];
  8083  0126  0848               	movf	autoRun@i^(0+128),w
  8084  0127  3E0C               	addlw	12
  8085  0128  3E3B               	addlw	(low ((_gLedPara| (0+256)+27)))& (0+255)
  8086  0129  0086               	movwf	6
  8087  012A  3001               	movlw	1	; select bank2/3
  8088  012B  0087               	movwf	7
  8089  012C  0801               	movf	1,w
  8090  012D  0020               	movlb	0	; select bank0
  8091  012E  00BA               	movwf	??_autoRun
  8092  012F  0021               	movlb	1	; select bank1
  8093  0130  0848               	movf	autoRun@i^(0+128),w
  8094  0131  3EA0               	addlw	(low (autoRun@val| 0))& (0+255)
  8095  0132  0086               	movwf	6
  8096  0133  0187               	clrf	7
  8097  0134  0020               	movlb	0	; select bank0
  8098  0135  083A               	movf	??_autoRun,w
  8099  0136  0081               	movwf	1
  8100                           
  8101                           ;led.c: 56: val[1][i] = gLedPara.aPara.autoPara.daylight[i];
  8102  0137  0021               	movlb	1	; select bank1
  8103  0138  0848               	movf	autoRun@i^(0+128),w
  8104  0139  3E04               	addlw	4
  8105  013A  3E3B               	addlw	(low ((_gLedPara| (0+256)+27)))& (0+255)
  8106  013B  0086               	movwf	6
  8107  013C  3001               	movlw	1	; select bank2/3
  8108  013D  0087               	movwf	7
  8109  013E  0801               	movf	1,w
  8110  013F  0020               	movlb	0	; select bank0
  8111  0140  00BA               	movwf	??_autoRun
  8112  0141  0021               	movlb	1	; select bank1
  8113  0142  0848               	movf	autoRun@i^(0+128),w
  8114  0143  3E04               	addlw	4
  8115  0144  3EA0               	addlw	(low (autoRun@val| 0))& (0+255)
  8116  0145  0086               	movwf	6
  8117  0146  0187               	clrf	7
  8118  0147  0020               	movlb	0	; select bank0
  8119  0148  083A               	movf	??_autoRun,w
  8120  0149  0081               	movwf	1
  8121                           
  8122                           ;led.c: 57: val[2][i] = gLedPara.aPara.autoPara.daylight[i];
  8123  014A  0021               	movlb	1	; select bank1
  8124  014B  0848               	movf	autoRun@i^(0+128),w
  8125  014C  3E04               	addlw	4
  8126  014D  3E3B               	addlw	(low ((_gLedPara| (0+256)+27)))& (0+255)
  8127  014E  0086               	movwf	6
  8128  014F  3001               	movlw	1	; select bank2/3
  8129  0150  0087               	movwf	7
  8130  0151  0801               	movf	1,w
  8131  0152  0020               	movlb	0	; select bank0
  8132  0153  00BA               	movwf	??_autoRun
  8133  0154  0021               	movlb	1	; select bank1
  8134  0155  0848               	movf	autoRun@i^(0+128),w
  8135  0156  3E08               	addlw	8
  8136  0157  3EA0               	addlw	(low (autoRun@val| 0))& (0+255)
  8137  0158  0086               	movwf	6
  8138  0159  0187               	clrf	7
  8139  015A  0020               	movlb	0	; select bank0
  8140  015B  083A               	movf	??_autoRun,w
  8141  015C  0081               	movwf	1
  8142                           
  8143                           ;led.c: 58: val[3][i] = gLedPara.aPara.autoPara.moonlight[i];
  8144  015D  0021               	movlb	1	; select bank1
  8145  015E  0848               	movf	autoRun@i^(0+128),w
  8146  015F  3E0C               	addlw	12
  8147  0160  3E3B               	addlw	(low ((_gLedPara| (0+256)+27)))& (0+255)
  8148  0161  0086               	movwf	6
  8149  0162  3001               	movlw	1	; select bank2/3
  8150  0163  0087               	movwf	7
  8151  0164  0801               	movf	1,w
  8152  0165  0020               	movlb	0	; select bank0
  8153  0166  00BA               	movwf	??_autoRun
  8154  0167  0021               	movlb	1	; select bank1
  8155  0168  0848               	movf	autoRun@i^(0+128),w
  8156  0169  3E0C               	addlw	12
  8157  016A  3EA0               	addlw	(low (autoRun@val| 0))& (0+255)
  8158  016B  0086               	movwf	6
  8159  016C  0187               	clrf	7
  8160  016D  0020               	movlb	0	; select bank0
  8161  016E  083A               	movf	??_autoRun,w
  8162  016F  0081               	movwf	1
  8163  0170  3001               	movlw	1
  8164  0171  00BA               	movwf	??_autoRun
  8165  0172  083A               	movf	??_autoRun,w
  8166  0173  0021               	movlb	1	; select bank1
  8167  0174  07C8               	addwf	autoRun@i^(0+128),f
  8168  0175  3004               	movlw	4
  8169  0176  0248               	subwf	autoRun@i^(0+128),w
  8170  0177  1C03               	skipc
  8171  0178  2926               	goto	l4284
  8172  0179                     l4290:	
  8173                           
  8174                           ;led.c: 59: }
  8175                           ;led.c: 60: for (i = 0; i < 4; i++)
  8176  0179  01C8               	clrf	autoRun@i^(0+128)
  8177  017A  3004               	movlw	4
  8178  017B  0248               	subwf	autoRun@i^(0+128),w
  8179  017C  1803               	btfsc	3,0
  8180  017D  2BE9               	goto	l4348
  8181  017E                     l4296:	
  8182                           
  8183                           ;led.c: 61: {
  8184                           ;led.c: 62: j = (i+1)%4;
  8185  017E  0848               	movf	autoRun@i^(0+128),w
  8186  017F  3E01               	addlw	1
  8187  0180  3903               	andlw	3
  8188  0181  0020               	movlb	0	; select bank0
  8189  0182  00BA               	movwf	??_autoRun
  8190  0183  083A               	movf	??_autoRun,w
  8191  0184  0021               	movlb	1	; select bank1
  8192  0185  00C0               	movwf	autoRun@j^(0+128)
  8193                           
  8194                           ;led.c: 63: unsigned int st = tr[i];
  8195  0186  3548               	lslf	autoRun@i^(0+128),w
  8196  0187  3EB0               	addlw	(low (autoRun@tr| 0))& (0+255)
  8197  0188  0086               	movwf	6
  8198  0189  0187               	clrf	7
  8199  018A  3F40               	moviw [0]fsr1
  8200  018B  00C5               	movwf	autoRun@st^(0+128)
  8201  018C  3F41               	moviw [1]fsr1
  8202  018D  00C6               	movwf	(autoRun@st+1)^(0+128)
  8203                           
  8204                           ;led.c: 64: unsigned int et = tr[j];
  8205  018E  3540               	lslf	autoRun@j^(0+128),w
  8206  018F  3EB0               	addlw	(low (autoRun@tr| 0))& (0+255)
  8207  0190  0086               	movwf	6
  8208  0191  0187               	clrf	7
  8209  0192  3F40               	moviw [0]fsr1
  8210  0193  00C1               	movwf	autoRun@et^(0+128)
  8211  0194  3F41               	moviw [1]fsr1
  8212  0195  00C2               	movwf	(autoRun@et+1)^(0+128)
  8213                           
  8214                           ;led.c: 65: unsigned int duration;
  8215                           ;led.c: 66: unsigned long dt;
  8216                           ;led.c: 67: unsigned char dbrt;
  8217                           ;led.c: 68: if (et >= st)
  8218  0196  0846               	movf	(autoRun@st+1)^(0+128),w
  8219  0197  0242               	subwf	(autoRun@et+1)^(0+128),w
  8220  0198  1D03               	skipz
  8221  0199  299C               	goto	u4845
  8222  019A  0845               	movf	autoRun@st^(0+128),w
  8223  019B  0241               	subwf	autoRun@et^(0+128),w
  8224  019C                     u4845:	
  8225  019C  1C03               	skipc
  8226  019D  29C4               	goto	l4312
  8227                           
  8228                           ;led.c: 69: {
  8229                           ;led.c: 70: if (ct >= st && ct < et)
  8230  019E  0846               	movf	(autoRun@st+1)^(0+128),w
  8231  019F  0244               	subwf	(autoRun@ct+1)^(0+128),w
  8232  01A0  1D03               	skipz
  8233  01A1  29A4               	goto	u4855
  8234  01A2  0845               	movf	autoRun@st^(0+128),w
  8235  01A3  0243               	subwf	autoRun@ct^(0+128),w
  8236  01A4                     u4855:	
  8237  01A4  1C03               	skipc
  8238  01A5  2BDF               	goto	l4344
  8239  01A6  0842               	movf	(autoRun@et+1)^(0+128),w
  8240  01A7  0244               	subwf	(autoRun@ct+1)^(0+128),w
  8241  01A8  1D03               	skipz
  8242  01A9  29AC               	goto	u4865
  8243  01AA  0841               	movf	autoRun@et^(0+128),w
  8244  01AB  0243               	subwf	autoRun@ct^(0+128),w
  8245  01AC                     u4865:	
  8246  01AC  1803               	skipnc
  8247  01AD  2BDF               	goto	l4344
  8248                           
  8249                           ;led.c: 71: {
  8250                           ;led.c: 72: duration = et - st;
  8251  01AE  0945               	comf	autoRun@st^(0+128),w
  8252  01AF  0020               	movlb	0	; select bank0
  8253  01B0  00BA               	movwf	??_autoRun
  8254  01B1  0021               	movlb	1	; select bank1
  8255  01B2  0946               	comf	(autoRun@st+1)^(0+128),w
  8256  01B3  0020               	movlb	0	; select bank0
  8257  01B4  00BB               	movwf	??_autoRun+1
  8258  01B5  0ABA               	incf	??_autoRun,f
  8259  01B6  1903               	skipnz
  8260  01B7  0ABB               	incf	??_autoRun+1,f
  8261  01B8  0021               	movlb	1	; select bank1
  8262  01B9  0841               	movf	autoRun@et^(0+128),w
  8263  01BA  0020               	movlb	0	; select bank0
  8264  01BB  073A               	addwf	??_autoRun,w
  8265  01BC  0021               	movlb	1	; select bank1
  8266  01BD  00B8               	movwf	autoRun@duration^(0+128)
  8267  01BE  0842               	movf	(autoRun@et+1)^(0+128),w
  8268  01BF  0020               	movlb	0	; select bank0
  8269  01C0  3D3B               	addwfc	??_autoRun+1,w
  8270  01C1  0021               	movlb	1	; select bank1
  8271  01C2  00B9               	movwf	(autoRun@duration+1)^(0+128)
  8272  01C3  29F9               	goto	L7
  8273  01C4                     l4312:	
  8274                           ;led.c: 78: }
  8275                           ;led.c: 79: }
  8276                           
  8277                           ;led.c: 75: else
  8278                           ;led.c: 76: {
  8279                           ;led.c: 77: continue;
  8280                           
  8281                           ;led.c: 74: }
  8282                           
  8283                           ;led.c: 73: dt = (ct - st) * 60u + sec;
  8284                           
  8285                           
  8286                           ;led.c: 80: else
  8287                           ;led.c: 81: {
  8288                           ;led.c: 82: if (ct >= st || ct < et)
  8289  01C4  0846               	movf	(autoRun@st+1)^(0+128),w
  8290  01C5  0244               	subwf	(autoRun@ct+1)^(0+128),w
  8291  01C6  1D03               	skipz
  8292  01C7  29CA               	goto	u4875
  8293  01C8  0845               	movf	autoRun@st^(0+128),w
  8294  01C9  0243               	subwf	autoRun@ct^(0+128),w
  8295  01CA                     u4875:	
  8296  01CA  1803               	skipnc
  8297  01CB  29D4               	goto	l4316
  8298  01CC  0842               	movf	(autoRun@et+1)^(0+128),w
  8299  01CD  0244               	subwf	(autoRun@ct+1)^(0+128),w
  8300  01CE  1D03               	skipz
  8301  01CF  29D2               	goto	u4885
  8302  01D0  0841               	movf	autoRun@et^(0+128),w
  8303  01D1  0243               	subwf	autoRun@ct^(0+128),w
  8304  01D2                     u4885:	
  8305  01D2  1803               	skipnc
  8306  01D3  2BDF               	goto	l4344
  8307  01D4                     l4316:	
  8308                           
  8309                           ;led.c: 83: {
  8310                           ;led.c: 84: duration = 1440u - st + et;
  8311  01D4  0945               	comf	autoRun@st^(0+128),w
  8312  01D5  0020               	movlb	0	; select bank0
  8313  01D6  00BA               	movwf	??_autoRun
  8314  01D7  0021               	movlb	1	; select bank1
  8315  01D8  0946               	comf	(autoRun@st+1)^(0+128),w
  8316  01D9  0020               	movlb	0	; select bank0
  8317  01DA  00BB               	movwf	??_autoRun+1
  8318  01DB  0ABA               	incf	??_autoRun,f
  8319  01DC  1903               	skipnz
  8320  01DD  0ABB               	incf	??_autoRun+1,f
  8321  01DE  0021               	movlb	1	; select bank1
  8322  01DF  0841               	movf	autoRun@et^(0+128),w
  8323  01E0  0020               	movlb	0	; select bank0
  8324  01E1  073A               	addwf	??_autoRun,w
  8325  01E2  00BC               	movwf	??_autoRun+2
  8326  01E3  0021               	movlb	1	; select bank1
  8327  01E4  0842               	movf	(autoRun@et+1)^(0+128),w
  8328  01E5  0020               	movlb	0	; select bank0
  8329  01E6  3D3B               	addwfc	??_autoRun+1,w
  8330  01E7  00BD               	movwf	??_autoRun+3
  8331  01E8  083C               	movf	??_autoRun+2,w
  8332  01E9  3EA0               	addlw	160
  8333  01EA  0021               	movlb	1	; select bank1
  8334  01EB  00B8               	movwf	autoRun@duration^(0+128)
  8335  01EC  3005               	movlw	5
  8336  01ED  0020               	movlb	0	; select bank0
  8337  01EE  3D3D               	addwfc	??_autoRun+3,w
  8338  01EF  0021               	movlb	1	; select bank1
  8339  01F0  00B9               	movwf	(autoRun@duration+1)^(0+128)
  8340                           
  8341                           ;led.c: 85: if (ct >= st)
  8342  01F1  0846               	movf	(autoRun@st+1)^(0+128),w
  8343  01F2  0244               	subwf	(autoRun@ct+1)^(0+128),w
  8344  01F3  1D03               	skipz
  8345  01F4  29F7               	goto	u4895
  8346  01F5  0845               	movf	autoRun@st^(0+128),w
  8347  01F6  0243               	subwf	autoRun@ct^(0+128),w
  8348  01F7                     u4895:	
  8349  01F7  1C03               	skipc
  8350  01F8  2A12               	goto	l4322
  8351  01F9                     L7:	
  8352                           
  8353                           ;led.c: 86: {
  8354                           ;led.c: 87: dt = (ct - st) * 60u + sec;
  8355  01F9  083F               	movf	autoRun@sec^(0+128),w
  8356  01FA  0020               	movlb	0	; select bank0
  8357  01FB  00BA               	movwf	??_autoRun
  8358  01FC  01BB               	clrf	??_autoRun+1
  8359  01FD  0021               	movlb	1	; select bank1
  8360  01FE  0945               	comf	autoRun@st^(0+128),w
  8361  01FF  0020               	movlb	0	; select bank0
  8362  0200  00BC               	movwf	??_autoRun+2
  8363  0201  0021               	movlb	1	; select bank1
  8364  0202  0946               	comf	(autoRun@st+1)^(0+128),w
  8365  0203  0020               	movlb	0	; select bank0
  8366  0204  00BD               	movwf	??_autoRun+3
  8367  0205  0ABC               	incf	??_autoRun+2,f
  8368  0206  1903               	skipnz
  8369  0207  0ABD               	incf	??_autoRun+3,f
  8370  0208  0021               	movlb	1	; select bank1
  8371  0209  0843               	movf	autoRun@ct^(0+128),w
  8372  020A  0020               	movlb	0	; select bank0
  8373  020B  073C               	addwf	??_autoRun+2,w
  8374  020C  00A0               	movwf	___wmul@multiplier
  8375  020D  0021               	movlb	1	; select bank1
  8376  020E  0844               	movf	(autoRun@ct+1)^(0+128),w
  8377  020F  0020               	movlb	0	; select bank0
  8378  0210  3D3D               	addwfc	??_autoRun+3,w
  8379  0211  2A30               	goto	L6
  8380  0212                     l4322:	
  8381                           ;led.c: 88: }
  8382                           
  8383                           
  8384                           ;led.c: 89: else
  8385                           ;led.c: 90: {
  8386                           ;led.c: 91: dt = (1440u - st + ct) * 60u + sec;
  8387  0212  083F               	movf	autoRun@sec^(0+128),w
  8388  0213  0020               	movlb	0	; select bank0
  8389  0214  00BA               	movwf	??_autoRun
  8390  0215  01BB               	clrf	??_autoRun+1
  8391  0216  0021               	movlb	1	; select bank1
  8392  0217  0945               	comf	autoRun@st^(0+128),w
  8393  0218  0020               	movlb	0	; select bank0
  8394  0219  00BC               	movwf	??_autoRun+2
  8395  021A  0021               	movlb	1	; select bank1
  8396  021B  0946               	comf	(autoRun@st+1)^(0+128),w
  8397  021C  0020               	movlb	0	; select bank0
  8398  021D  00BD               	movwf	??_autoRun+3
  8399  021E  0ABC               	incf	??_autoRun+2,f
  8400  021F  1903               	skipnz
  8401  0220  0ABD               	incf	??_autoRun+3,f
  8402  0221  0021               	movlb	1	; select bank1
  8403  0222  0843               	movf	autoRun@ct^(0+128),w
  8404  0223  0020               	movlb	0	; select bank0
  8405  0224  073C               	addwf	??_autoRun+2,w
  8406  0225  00BE               	movwf	??_autoRun+4
  8407  0226  0021               	movlb	1	; select bank1
  8408  0227  0844               	movf	(autoRun@ct+1)^(0+128),w
  8409  0228  0020               	movlb	0	; select bank0
  8410  0229  3D3D               	addwfc	??_autoRun+3,w
  8411  022A  00BF               	movwf	??_autoRun+5
  8412  022B  083E               	movf	??_autoRun+4,w
  8413  022C  3EA0               	addlw	160
  8414  022D  00A0               	movwf	___wmul@multiplier
  8415  022E  3005               	movlw	5
  8416  022F  3D3F               	addwfc	??_autoRun+5,w
  8417  0230                     L6:	
  8418  0230  00A1               	movwf	___wmul@multiplier+1
  8419  0231  303C               	movlw	60
  8420  0232  00A2               	movwf	___wmul@multiplicand
  8421  0233  3000               	movlw	0
  8422  0234  00A3               	movwf	___wmul@multiplicand+1
  8423  0235  3196  26F2  3180   	fcall	___wmul
  8424  0238  0020               	movlb	0	; select bank0
  8425  0239  083A               	movf	??_autoRun,w
  8426  023A  0720               	addwf	?___wmul,w
  8427  023B  0021               	movlb	1	; select bank1
  8428  023C  00BA               	movwf	autoRun@dt^(0+128)
  8429  023D  0020               	movlb	0	; select bank0
  8430  023E  083B               	movf	??_autoRun+1,w
  8431  023F  3D21               	addwfc	?___wmul+1,w
  8432  0240  0021               	movlb	1	; select bank1
  8433  0241  00BB               	movwf	(autoRun@dt+1)^(0+128)
  8434  0242  01BC               	clrf	(autoRun@dt+2)^(0+128)
  8435  0243  01BD               	clrf	(autoRun@dt+3)^(0+128)
  8436                           
  8437                           ;led.c: 97: }
  8438                           ;led.c: 98: }
  8439                           ;led.c: 99: for (unsigned char k = 0; k < 4; k++)
  8440                           
  8441                           ;led.c: 94: else
  8442                           ;led.c: 95: {
  8443                           ;led.c: 96: continue;
  8444                           
  8445                           ;led.c: 92: }
  8446                           ;led.c: 93: }
  8447  0244  01C7               	clrf	autoRun@k^(0+128)
  8448  0245  3004               	movlw	4
  8449  0246  0247               	subwf	autoRun@k^(0+128),w
  8450  0247  1803               	btfsc	3,0
  8451  0248  2BDF               	goto	l4344
  8452  0249                     l4330:	
  8453                           
  8454                           ;led.c: 100: {
  8455                           ;led.c: 101: if (val[j][k] >= val[i][k])
  8456  0249  0840               	movf	autoRun@j^(0+128),w
  8457  024A  0020               	movlb	0	; select bank0
  8458  024B  00BA               	movwf	??_autoRun
  8459  024C  3002               	movlw	2
  8460  024D                     u4915:	
  8461  024D  35BA               	lslf	??_autoRun,f
  8462  024E  0B89               	decfsz	9,f
  8463  024F  2A4D               	goto	u4915
  8464  0250  30A0               	movlw	(low (autoRun@val| 0))& (0+255)
  8465  0251  073A               	addwf	??_autoRun,w
  8466  0252  00BB               	movwf	??_autoRun+1
  8467  0253  0021               	movlb	1	; select bank1
  8468  0254  0847               	movf	autoRun@k^(0+128),w
  8469  0255  0020               	movlb	0	; select bank0
  8470  0256  073B               	addwf	??_autoRun+1,w
  8471  0257  00BC               	movwf	??_autoRun+2
  8472  0258  083C               	movf	??_autoRun+2,w
  8473  0259  0086               	movwf	6
  8474  025A  0187               	clrf	7
  8475  025B  0021               	movlb	1	; select bank1
  8476  025C  0848               	movf	autoRun@i^(0+128),w
  8477  025D  0020               	movlb	0	; select bank0
  8478  025E  00BD               	movwf	??_autoRun+3
  8479  025F  3002               	movlw	2
  8480  0260                     u4925:	
  8481  0260  35BD               	lslf	??_autoRun+3,f
  8482  0261  0B89               	decfsz	9,f
  8483  0262  2A60               	goto	u4925
  8484  0263  30A0               	movlw	(low (autoRun@val| 0))& (0+255)
  8485  0264  073D               	addwf	??_autoRun+3,w
  8486  0265  00BE               	movwf	??_autoRun+4
  8487  0266  0021               	movlb	1	; select bank1
  8488  0267  0847               	movf	autoRun@k^(0+128),w
  8489  0268  0020               	movlb	0	; select bank0
  8490  0269  073E               	addwf	??_autoRun+4,w
  8491  026A  00BF               	movwf	??_autoRun+5
  8492  026B  083F               	movf	??_autoRun+5,w
  8493  026C  0084               	movwf	4
  8494  026D  0185               	clrf	5
  8495  026E  0800               	movf	0,w
  8496  026F  0201               	subwf	1,w
  8497  0270  1C03               	skipc
  8498  0271  2B22               	goto	l4336
  8499                           
  8500                           ;led.c: 102: {
  8501                           ;led.c: 103: dbrt = val[j][k] - val[i][k];
  8502  0272  0021               	movlb	1	; select bank1
  8503  0273  0840               	movf	autoRun@j^(0+128),w
  8504  0274  0020               	movlb	0	; select bank0
  8505  0275  00BA               	movwf	??_autoRun
  8506  0276  3002               	movlw	2
  8507  0277                     u4945:	
  8508  0277  35BA               	lslf	??_autoRun,f
  8509  0278  0B89               	decfsz	9,f
  8510  0279  2A77               	goto	u4945
  8511  027A  30A0               	movlw	(low (autoRun@val| 0))& (0+255)
  8512  027B  073A               	addwf	??_autoRun,w
  8513  027C  00BB               	movwf	??_autoRun+1
  8514  027D  0021               	movlb	1	; select bank1
  8515  027E  0847               	movf	autoRun@k^(0+128),w
  8516  027F  0020               	movlb	0	; select bank0
  8517  0280  073B               	addwf	??_autoRun+1,w
  8518  0281  00BC               	movwf	??_autoRun+2
  8519  0282  083C               	movf	??_autoRun+2,w
  8520  0283  0086               	movwf	6
  8521  0284  0187               	clrf	7
  8522  0285  0021               	movlb	1	; select bank1
  8523  0286  0848               	movf	autoRun@i^(0+128),w
  8524  0287  0020               	movlb	0	; select bank0
  8525  0288  00BD               	movwf	??_autoRun+3
  8526  0289  3002               	movlw	2
  8527  028A                     u4955:	
  8528  028A  35BD               	lslf	??_autoRun+3,f
  8529  028B  0B89               	decfsz	9,f
  8530  028C  2A8A               	goto	u4955
  8531  028D  30A0               	movlw	(low (autoRun@val| 0))& (0+255)
  8532  028E  073D               	addwf	??_autoRun+3,w
  8533  028F  00BE               	movwf	??_autoRun+4
  8534  0290  0021               	movlb	1	; select bank1
  8535  0291  0847               	movf	autoRun@k^(0+128),w
  8536  0292  0020               	movlb	0	; select bank0
  8537  0293  073E               	addwf	??_autoRun+4,w
  8538  0294  00BF               	movwf	??_autoRun+5
  8539  0295  083F               	movf	??_autoRun+5,w
  8540  0296  0084               	movwf	4
  8541  0297  0185               	clrf	5
  8542  0298  0300               	decf	0,w
  8543  0299  3AFF               	xorlw	255
  8544  029A  0701               	addwf	1,w
  8545  029B  00C0               	movwf	??_autoRun+6
  8546  029C  0840               	movf	??_autoRun+6,w
  8547  029D  0021               	movlb	1	; select bank1
  8548  029E  00BE               	movwf	autoRun@dbrt^(0+128)
  8549                           
  8550                           ;led.c: 104: gLedRunPara.nCurrentBrt[k] = val[i][k] * 10u + dbrt * dt / (duration * 6u);
  8551  029F  0848               	movf	autoRun@i^(0+128),w
  8552  02A0  0020               	movlb	0	; select bank0
  8553  02A1  00BA               	movwf	??_autoRun
  8554  02A2  3002               	movlw	2
  8555  02A3                     u4965:	
  8556  02A3  35BA               	lslf	??_autoRun,f
  8557  02A4  0B89               	decfsz	9,f
  8558  02A5  2AA3               	goto	u4965
  8559  02A6  30A0               	movlw	(low (autoRun@val| 0))& (0+255)
  8560  02A7  073A               	addwf	??_autoRun,w
  8561  02A8  00BB               	movwf	??_autoRun+1
  8562  02A9  0021               	movlb	1	; select bank1
  8563  02AA  0847               	movf	autoRun@k^(0+128),w
  8564  02AB  0020               	movlb	0	; select bank0
  8565  02AC  073B               	addwf	??_autoRun+1,w
  8566  02AD  00BC               	movwf	??_autoRun+2
  8567  02AE  083C               	movf	??_autoRun+2,w
  8568  02AF  0086               	movwf	6
  8569  02B0  0187               	clrf	7
  8570  02B1  0801               	movf	1,w
  8571  02B2  00BD               	movwf	??_autoRun+3
  8572  02B3  01BE               	clrf	??_autoRun+4
  8573  02B4  083D               	movf	??_autoRun+3,w
  8574  02B5  00A0               	movwf	___wmul@multiplier
  8575  02B6  083E               	movf	??_autoRun+4,w
  8576  02B7  00A1               	movwf	___wmul@multiplier+1
  8577  02B8  300A               	movlw	10
  8578  02B9  00A2               	movwf	___wmul@multiplicand
  8579  02BA  3000               	movlw	0
  8580  02BB  00A3               	movwf	___wmul@multiplicand+1
  8581  02BC  3196  26F2  3180   	fcall	___wmul
  8582  02BF  0020               	movlb	0	; select bank0
  8583  02C0  0820               	movf	?___wmul,w
  8584  02C1  00BF               	movwf	??_autoRun+5
  8585  02C2  0821               	movf	?___wmul+1,w
  8586  02C3  00C0               	movwf	??_autoRun+6
  8587  02C4  3006               	movlw	6
  8588  02C5  00A2               	movwf	___wmul@multiplicand
  8589  02C6  3000               	movlw	0
  8590  02C7  00A3               	movwf	___wmul@multiplicand+1
  8591  02C8  0021               	movlb	1	; select bank1
  8592  02C9  0839               	movf	(autoRun@duration+1)^(0+128),w
  8593  02CA  0020               	movlb	0	; select bank0
  8594  02CB  00A1               	movwf	___wmul@multiplier+1
  8595  02CC  0021               	movlb	1	; select bank1
  8596  02CD  0838               	movf	autoRun@duration^(0+128),w
  8597  02CE  0020               	movlb	0	; select bank0
  8598  02CF  00A0               	movwf	___wmul@multiplier
  8599  02D0  3196  26F2  3180   	fcall	___wmul
  8600  02D3  0020               	movlb	0	; select bank0
  8601  02D4  0820               	movf	?___wmul,w
  8602  02D5  00C1               	movwf	??_autoRun+7
  8603  02D6  0821               	movf	?___wmul+1,w
  8604  02D7  00C2               	movwf	??_autoRun+8
  8605  02D8  01C3               	clrf	??_autoRun+9
  8606  02D9  01C4               	clrf	??_autoRun+10
  8607  02DA  0844               	movf	??_autoRun+10,w
  8608  02DB  00AF               	movwf	___lldiv@divisor+3
  8609  02DC  0843               	movf	??_autoRun+9,w
  8610  02DD  00AE               	movwf	___lldiv@divisor+2
  8611  02DE  0842               	movf	??_autoRun+8,w
  8612  02DF  00AD               	movwf	___lldiv@divisor+1
  8613  02E0  0841               	movf	??_autoRun+7,w
  8614  02E1  00AC               	movwf	___lldiv@divisor
  8615  02E2  0021               	movlb	1	; select bank1
  8616  02E3  083E               	movf	autoRun@dbrt^(0+128),w
  8617  02E4  0020               	movlb	0	; select bank0
  8618  02E5  00C5               	movwf	??_autoRun+11
  8619  02E6  01C6               	clrf	??_autoRun+12
  8620  02E7  01C7               	clrf	??_autoRun+13
  8621  02E8  01C8               	clrf	??_autoRun+14
  8622  02E9  0848               	movf	??_autoRun+14,w
  8623  02EA  00A3               	movwf	___lmul@multiplier+3
  8624  02EB  0847               	movf	??_autoRun+13,w
  8625  02EC  00A2               	movwf	___lmul@multiplier+2
  8626  02ED  0846               	movf	??_autoRun+12,w
  8627  02EE  00A1               	movwf	___lmul@multiplier+1
  8628  02EF  0845               	movf	??_autoRun+11,w
  8629  02F0  00A0               	movwf	___lmul@multiplier
  8630  02F1  0021               	movlb	1	; select bank1
  8631  02F2  083D               	movf	(autoRun@dt+3)^(0+128),w
  8632  02F3  0020               	movlb	0	; select bank0
  8633  02F4  00A7               	movwf	___lmul@multiplicand+3
  8634  02F5  0021               	movlb	1	; select bank1
  8635  02F6  083C               	movf	(autoRun@dt+2)^(0+128),w
  8636  02F7  0020               	movlb	0	; select bank0
  8637  02F8  00A6               	movwf	___lmul@multiplicand+2
  8638  02F9  0021               	movlb	1	; select bank1
  8639  02FA  083B               	movf	(autoRun@dt+1)^(0+128),w
  8640  02FB  0020               	movlb	0	; select bank0
  8641  02FC  00A5               	movwf	___lmul@multiplicand+1
  8642  02FD  0021               	movlb	1	; select bank1
  8643  02FE  083A               	movf	autoRun@dt^(0+128),w
  8644  02FF  0020               	movlb	0	; select bank0
  8645  0300  00A4               	movwf	___lmul@multiplicand
  8646  0301  3189  21B1  3180   	fcall	___lmul
  8647  0304  0020               	movlb	0	; select bank0
  8648  0305  0823               	movf	?___lmul+3,w
  8649  0306  00B3               	movwf	___lldiv@dividend+3
  8650  0307  0822               	movf	?___lmul+2,w
  8651  0308  00B2               	movwf	___lldiv@dividend+2
  8652  0309  0821               	movf	?___lmul+1,w
  8653  030A  00B1               	movwf	___lldiv@dividend+1
  8654  030B  0820               	movf	?___lmul,w
  8655  030C  00B0               	movwf	___lldiv@dividend
  8656  030D  318B  239B  3180   	fcall	___lldiv
  8657  0310  0020               	movlb	0	; select bank0
  8658  0311  082C               	movf	?___lldiv,w
  8659  0312  073F               	addwf	??_autoRun+5,w
  8660  0313  00C9               	movwf	??_autoRun+15
  8661  0314  082D               	movf	?___lldiv+1,w
  8662  0315  3D40               	addwfc	??_autoRun+6,w
  8663  0316  00CA               	movwf	??_autoRun+16
  8664  0317  0021               	movlb	1	; select bank1
  8665  0318  3547               	lslf	autoRun@k^(0+128),w
  8666  0319  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
  8667  031A  0086               	movwf	6
  8668  031B  0187               	clrf	7
  8669  031C  0020               	movlb	0	; select bank0
  8670  031D  0849               	movf	??_autoRun+15,w
  8671  031E  3FC0               	movwi [0]fsr1
  8672  031F  084A               	movf	??_autoRun+16,w
  8673  0320  3FC1               	movwi [1]fsr1
  8674                           
  8675                           ;led.c: 105: }
  8676  0321  2BD6               	goto	l4340
  8677  0322                     l4336:	
  8678                           
  8679                           ;led.c: 106: else
  8680                           ;led.c: 107: {
  8681                           ;led.c: 108: dbrt = val[i][k] - val[j][k];
  8682  0322  0021               	movlb	1	; select bank1
  8683  0323  0848               	movf	autoRun@i^(0+128),w
  8684  0324  0020               	movlb	0	; select bank0
  8685  0325  00BA               	movwf	??_autoRun
  8686  0326  3002               	movlw	2
  8687  0327                     u4975:	
  8688  0327  35BA               	lslf	??_autoRun,f
  8689  0328  0B89               	decfsz	9,f
  8690  0329  2B27               	goto	u4975
  8691  032A  30A0               	movlw	(low (autoRun@val| 0))& (0+255)
  8692  032B  073A               	addwf	??_autoRun,w
  8693  032C  00BB               	movwf	??_autoRun+1
  8694  032D  0021               	movlb	1	; select bank1
  8695  032E  0847               	movf	autoRun@k^(0+128),w
  8696  032F  0020               	movlb	0	; select bank0
  8697  0330  073B               	addwf	??_autoRun+1,w
  8698  0331  00BC               	movwf	??_autoRun+2
  8699  0332  083C               	movf	??_autoRun+2,w
  8700  0333  0086               	movwf	6
  8701  0334  0187               	clrf	7
  8702  0335  0021               	movlb	1	; select bank1
  8703  0336  0840               	movf	autoRun@j^(0+128),w
  8704  0337  0020               	movlb	0	; select bank0
  8705  0338  00BD               	movwf	??_autoRun+3
  8706  0339  3002               	movlw	2
  8707  033A                     u4985:	
  8708  033A  35BD               	lslf	??_autoRun+3,f
  8709  033B  0B89               	decfsz	9,f
  8710  033C  2B3A               	goto	u4985
  8711  033D  30A0               	movlw	(low (autoRun@val| 0))& (0+255)
  8712  033E  073D               	addwf	??_autoRun+3,w
  8713  033F  00BE               	movwf	??_autoRun+4
  8714  0340  0021               	movlb	1	; select bank1
  8715  0341  0847               	movf	autoRun@k^(0+128),w
  8716  0342  0020               	movlb	0	; select bank0
  8717  0343  073E               	addwf	??_autoRun+4,w
  8718  0344  00BF               	movwf	??_autoRun+5
  8719  0345  083F               	movf	??_autoRun+5,w
  8720  0346  0084               	movwf	4
  8721  0347  0185               	clrf	5
  8722  0348  0300               	decf	0,w
  8723  0349  3AFF               	xorlw	255
  8724  034A  0701               	addwf	1,w
  8725  034B  00C0               	movwf	??_autoRun+6
  8726  034C  0840               	movf	??_autoRun+6,w
  8727  034D  0021               	movlb	1	; select bank1
  8728  034E  00BE               	movwf	autoRun@dbrt^(0+128)
  8729                           
  8730                           ;led.c: 109: gLedRunPara.nCurrentBrt[k] = val[i][k] * 10u - dbrt * dt / (duration * 6u);
  8731  034F  3006               	movlw	6
  8732  0350  0020               	movlb	0	; select bank0
  8733  0351  00A2               	movwf	___wmul@multiplicand
  8734  0352  3000               	movlw	0
  8735  0353  00A3               	movwf	___wmul@multiplicand+1
  8736  0354  0021               	movlb	1	; select bank1
  8737  0355  0839               	movf	(autoRun@duration+1)^(0+128),w
  8738  0356  0020               	movlb	0	; select bank0
  8739  0357  00A1               	movwf	___wmul@multiplier+1
  8740  0358  0021               	movlb	1	; select bank1
  8741  0359  0838               	movf	autoRun@duration^(0+128),w
  8742  035A  0020               	movlb	0	; select bank0
  8743  035B  00A0               	movwf	___wmul@multiplier
  8744  035C  3196  26F2  3180   	fcall	___wmul
  8745  035F  0020               	movlb	0	; select bank0
  8746  0360  0820               	movf	?___wmul,w
  8747  0361  00BA               	movwf	??_autoRun
  8748  0362  0821               	movf	?___wmul+1,w
  8749  0363  00BB               	movwf	??_autoRun+1
  8750  0364  01BC               	clrf	??_autoRun+2
  8751  0365  01BD               	clrf	??_autoRun+3
  8752  0366  083D               	movf	??_autoRun+3,w
  8753  0367  00AF               	movwf	___lldiv@divisor+3
  8754  0368  083C               	movf	??_autoRun+2,w
  8755  0369  00AE               	movwf	___lldiv@divisor+2
  8756  036A  083B               	movf	??_autoRun+1,w
  8757  036B  00AD               	movwf	___lldiv@divisor+1
  8758  036C  083A               	movf	??_autoRun,w
  8759  036D  00AC               	movwf	___lldiv@divisor
  8760  036E  0021               	movlb	1	; select bank1
  8761  036F  083E               	movf	autoRun@dbrt^(0+128),w
  8762  0370  0020               	movlb	0	; select bank0
  8763  0371  00BE               	movwf	??_autoRun+4
  8764  0372  01BF               	clrf	??_autoRun+5
  8765  0373  01C0               	clrf	??_autoRun+6
  8766  0374  01C1               	clrf	??_autoRun+7
  8767  0375  0841               	movf	??_autoRun+7,w
  8768  0376  00A3               	movwf	___lmul@multiplier+3
  8769  0377  0840               	movf	??_autoRun+6,w
  8770  0378  00A2               	movwf	___lmul@multiplier+2
  8771  0379  083F               	movf	??_autoRun+5,w
  8772  037A  00A1               	movwf	___lmul@multiplier+1
  8773  037B  083E               	movf	??_autoRun+4,w
  8774  037C  00A0               	movwf	___lmul@multiplier
  8775  037D  0021               	movlb	1	; select bank1
  8776  037E  083D               	movf	(autoRun@dt+3)^(0+128),w
  8777  037F  0020               	movlb	0	; select bank0
  8778  0380  00A7               	movwf	___lmul@multiplicand+3
  8779  0381  0021               	movlb	1	; select bank1
  8780  0382  083C               	movf	(autoRun@dt+2)^(0+128),w
  8781  0383  0020               	movlb	0	; select bank0
  8782  0384  00A6               	movwf	___lmul@multiplicand+2
  8783  0385  0021               	movlb	1	; select bank1
  8784  0386  083B               	movf	(autoRun@dt+1)^(0+128),w
  8785  0387  0020               	movlb	0	; select bank0
  8786  0388  00A5               	movwf	___lmul@multiplicand+1
  8787  0389  0021               	movlb	1	; select bank1
  8788  038A  083A               	movf	autoRun@dt^(0+128),w
  8789  038B  0020               	movlb	0	; select bank0
  8790  038C  00A4               	movwf	___lmul@multiplicand
  8791  038D  3189  21B1  3180   	fcall	___lmul
  8792  0390  0020               	movlb	0	; select bank0
  8793  0391  0823               	movf	?___lmul+3,w
  8794  0392  00B3               	movwf	___lldiv@dividend+3
  8795  0393  0822               	movf	?___lmul+2,w
  8796  0394  00B2               	movwf	___lldiv@dividend+2
  8797  0395  0821               	movf	?___lmul+1,w
  8798  0396  00B1               	movwf	___lldiv@dividend+1
  8799  0397  0820               	movf	?___lmul,w
  8800  0398  00B0               	movwf	___lldiv@dividend
  8801  0399  318B  239B  3180   	fcall	___lldiv
  8802  039C  0020               	movlb	0	; select bank0
  8803  039D  092C               	comf	?___lldiv,w
  8804  039E  00C2               	movwf	??_autoRun+8
  8805  039F  092D               	comf	?___lldiv+1,w
  8806  03A0  00C3               	movwf	??_autoRun+9
  8807  03A1  0AC2               	incf	??_autoRun+8,f
  8808  03A2  1903               	skipnz
  8809  03A3  0AC3               	incf	??_autoRun+9,f
  8810  03A4  0021               	movlb	1	; select bank1
  8811  03A5  0848               	movf	autoRun@i^(0+128),w
  8812  03A6  0020               	movlb	0	; select bank0
  8813  03A7  00C4               	movwf	??_autoRun+10
  8814  03A8  3002               	movlw	2
  8815  03A9                     u4995:	
  8816  03A9  35C4               	lslf	??_autoRun+10,f
  8817  03AA  0B89               	decfsz	9,f
  8818  03AB  2BA9               	goto	u4995
  8819  03AC  30A0               	movlw	(low (autoRun@val| 0))& (0+255)
  8820  03AD  0744               	addwf	??_autoRun+10,w
  8821  03AE  00C5               	movwf	??_autoRun+11
  8822  03AF  0021               	movlb	1	; select bank1
  8823  03B0  0847               	movf	autoRun@k^(0+128),w
  8824  03B1  0020               	movlb	0	; select bank0
  8825  03B2  0745               	addwf	??_autoRun+11,w
  8826  03B3  00C6               	movwf	??_autoRun+12
  8827  03B4  0846               	movf	??_autoRun+12,w
  8828  03B5  0086               	movwf	6
  8829  03B6  0187               	clrf	7
  8830  03B7  0801               	movf	1,w
  8831  03B8  00C7               	movwf	??_autoRun+13
  8832  03B9  01C8               	clrf	??_autoRun+14
  8833  03BA  0847               	movf	??_autoRun+13,w
  8834  03BB  00A0               	movwf	___wmul@multiplier
  8835  03BC  0848               	movf	??_autoRun+14,w
  8836  03BD  00A1               	movwf	___wmul@multiplier+1
  8837  03BE  300A               	movlw	10
  8838  03BF  00A2               	movwf	___wmul@multiplicand
  8839  03C0  3000               	movlw	0
  8840  03C1  00A3               	movwf	___wmul@multiplicand+1
  8841  03C2  3196  26F2  3180   	fcall	___wmul
  8842  03C5  0020               	movlb	0	; select bank0
  8843  03C6  0842               	movf	??_autoRun+8,w
  8844  03C7  0720               	addwf	?___wmul,w
  8845  03C8  00C9               	movwf	??_autoRun+15
  8846  03C9  0843               	movf	??_autoRun+9,w
  8847  03CA  3D21               	addwfc	?___wmul+1,w
  8848  03CB  00CA               	movwf	??_autoRun+16
  8849  03CC  0021               	movlb	1	; select bank1
  8850  03CD  3547               	lslf	autoRun@k^(0+128),w
  8851  03CE  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
  8852  03CF  0086               	movwf	6
  8853  03D0  0187               	clrf	7
  8854  03D1  0020               	movlb	0	; select bank0
  8855  03D2  0849               	movf	??_autoRun+15,w
  8856  03D3  3FC0               	movwi [0]fsr1
  8857  03D4  084A               	movf	??_autoRun+16,w
  8858  03D5  3FC1               	movwi [1]fsr1
  8859  03D6                     l4340:	
  8860  03D6  3001               	movlw	1
  8861  03D7  00BA               	movwf	??_autoRun
  8862  03D8  083A               	movf	??_autoRun,w
  8863  03D9  0021               	movlb	1	; select bank1
  8864  03DA  07C7               	addwf	autoRun@k^(0+128),f
  8865  03DB  3004               	movlw	4
  8866  03DC  0247               	subwf	autoRun@k^(0+128),w
  8867  03DD  1C03               	skipc
  8868  03DE  2A49               	goto	l4330
  8869  03DF                     l4344:	
  8870  03DF  3001               	movlw	1
  8871  03E0  0020               	movlb	0	; select bank0
  8872  03E1  00BA               	movwf	??_autoRun
  8873  03E2  083A               	movf	??_autoRun,w
  8874  03E3  0021               	movlb	1	; select bank1
  8875  03E4  07C8               	addwf	autoRun@i^(0+128),f
  8876  03E5  3004               	movlw	4
  8877  03E6  0248               	subwf	autoRun@i^(0+128),w
  8878  03E7  1C03               	skipc
  8879  03E8  297E               	goto	l4296
  8880  03E9                     l4348:	
  8881                           
  8882                           ;led.c: 110: }
  8883                           ;led.c: 111: }
  8884                           ;led.c: 112: }
  8885                           ;led.c: 113: updatePWM();
  8886  03E9  3189  2157         	fcall	_updatePWM
  8887  03EB  0008               	return
  8888  03EC                     __end_of_autoRun:	
  8889                           
  8890                           	psect	text29
  8891  16F2                     __ptext29:	
  8892 ;; *************** function ___wmul *****************
  8893 ;; Defined at:
  8894 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul16.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8897 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8898 ;; Auto vars:     Size  Location     Type
  8899 ;;  product         2    4[BANK0 ] unsigned int 
  8900 ;; Return value:  Size  Location     Type
  8901 ;;                  2    0[BANK0 ] unsigned int 
  8902 ;; Registers used:
  8903 ;;		wreg, status,2, status,0
  8904 ;; Tracked objects:
  8905 ;;		On entry : 0/0
  8906 ;;		On exit  : 0/0
  8907 ;;		Unchanged: 0/0
  8908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8909 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;Total ram usage:        6 bytes
  8914 ;; Hardware stack levels used:    1
  8915 ;; Hardware stack levels required when called:    6
  8916 ;; This function calls:
  8917 ;;		Nothing
  8918 ;; This function is called by:
  8919 ;;		_autoRun
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           
  8924                           ;psect for function ___wmul
  8925  16F2                     ___wmul:	
  8926                           
  8927                           ;incstack = 0
  8928                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8929  16F2  0020               	movlb	0	; select bank0
  8930  16F3  01A4               	clrf	___wmul@product
  8931  16F4  01A5               	clrf	___wmul@product+1
  8932  16F5                     l3800:	
  8933  16F5  1C20               	btfss	___wmul@multiplier,0
  8934  16F6  2EFB               	goto	l972
  8935  16F7  0822               	movf	___wmul@multiplicand,w
  8936  16F8  07A4               	addwf	___wmul@product,f
  8937  16F9  0823               	movf	___wmul@multiplicand+1,w
  8938  16FA  3DA5               	addwfc	___wmul@product+1,f
  8939  16FB                     l972:	
  8940  16FB  3001               	movlw	1
  8941  16FC                     u3805:	
  8942  16FC  35A2               	lslf	___wmul@multiplicand,f
  8943  16FD  0DA3               	rlf	___wmul@multiplicand+1,f
  8944  16FE  0B89               	decfsz	9,f
  8945  16FF  2EFC               	goto	u3805
  8946  1700  3001               	movlw	1
  8947  1701                     u3815:	
  8948  1701  36A1               	lsrf	___wmul@multiplier+1,f
  8949  1702  0CA0               	rrf	___wmul@multiplier,f
  8950  1703  0B89               	decfsz	9,f
  8951  1704  2F01               	goto	u3815
  8952  1705  0820               	movf	___wmul@multiplier,w
  8953  1706  0421               	iorwf	___wmul@multiplier+1,w
  8954  1707  1D03               	btfss	3,2
  8955  1708  2EF5               	goto	l3800
  8956  1709  0825               	movf	___wmul@product+1,w
  8957  170A  00A1               	movwf	?___wmul+1
  8958  170B  0824               	movf	___wmul@product,w
  8959  170C  00A0               	movwf	?___wmul
  8960  170D  0008               	return
  8961  170E                     __end_of___wmul:	
  8962                           
  8963                           	psect	text30
  8964  09B1                     __ptext30:	
  8965 ;; *************** function ___lmul *****************
  8966 ;; Defined at:
  8967 ;;		line 15 in file "/Applications/microchip/xc8/v1.38/sources/common/Umul32.c"
  8968 ;; Parameters:    Size  Location     Type
  8969 ;;  multiplier      4    0[BANK0 ] unsigned long 
  8970 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  product         4    8[BANK0 ] unsigned long 
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  4    0[BANK0 ] unsigned long 
  8975 ;; Registers used:
  8976 ;;		wreg, status,2, status,0
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8982 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;Total ram usage:       12 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:    6
  8989 ;; This function calls:
  8990 ;;		Nothing
  8991 ;; This function is called by:
  8992 ;;		_autoRun
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995                           
  8996                           
  8997                           ;psect for function ___lmul
  8998  09B1                     ___lmul:	
  8999                           
  9000                           ;incstack = 0
  9001                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9002  09B1  3000               	movlw	0
  9003  09B2  0020               	movlb	0	; select bank0
  9004  09B3  00AB               	movwf	___lmul@product+3
  9005  09B4  3000               	movlw	0
  9006  09B5  00AA               	movwf	___lmul@product+2
  9007  09B6  3000               	movlw	0
  9008  09B7  00A9               	movwf	___lmul@product+1
  9009  09B8  3000               	movlw	0
  9010  09B9  00A8               	movwf	___lmul@product
  9011  09BA                     l3814:	
  9012  09BA  1C20               	btfss	___lmul@multiplier,0
  9013  09BB  29C4               	goto	l3818
  9014  09BC  0824               	movf	___lmul@multiplicand,w
  9015  09BD  07A8               	addwf	___lmul@product,f
  9016  09BE  0825               	movf	___lmul@multiplicand+1,w
  9017  09BF  3DA9               	addwfc	___lmul@product+1,f
  9018  09C0  0826               	movf	___lmul@multiplicand+2,w
  9019  09C1  3DAA               	addwfc	___lmul@product+2,f
  9020  09C2  0827               	movf	___lmul@multiplicand+3,w
  9021  09C3  3DAB               	addwfc	___lmul@product+3,f
  9022  09C4                     l3818:	
  9023  09C4  3001               	movlw	1
  9024  09C5                     u3845:	
  9025  09C5  35A4               	lslf	___lmul@multiplicand,f
  9026  09C6  0DA5               	rlf	___lmul@multiplicand+1,f
  9027  09C7  0DA6               	rlf	___lmul@multiplicand+2,f
  9028  09C8  0DA7               	rlf	___lmul@multiplicand+3,f
  9029  09C9  0B89               	decfsz	9,f
  9030  09CA  29C5               	goto	u3845
  9031  09CB  3001               	movlw	1
  9032  09CC                     u3855:	
  9033  09CC  36A3               	lsrf	___lmul@multiplier+3,f
  9034  09CD  0CA2               	rrf	___lmul@multiplier+2,f
  9035  09CE  0CA1               	rrf	___lmul@multiplier+1,f
  9036  09CF  0CA0               	rrf	___lmul@multiplier,f
  9037  09D0  0B89               	decfsz	9,f
  9038  09D1  29CC               	goto	u3855
  9039  09D2  0823               	movf	___lmul@multiplier+3,w
  9040  09D3  0422               	iorwf	___lmul@multiplier+2,w
  9041  09D4  0421               	iorwf	___lmul@multiplier+1,w
  9042  09D5  0420               	iorwf	___lmul@multiplier,w
  9043  09D6  1D03               	skipz
  9044  09D7  29BA               	goto	l3814
  9045  09D8  082B               	movf	___lmul@product+3,w
  9046  09D9  00A3               	movwf	?___lmul+3
  9047  09DA  082A               	movf	___lmul@product+2,w
  9048  09DB  00A2               	movwf	?___lmul+2
  9049  09DC  0829               	movf	___lmul@product+1,w
  9050  09DD  00A1               	movwf	?___lmul+1
  9051  09DE  0828               	movf	___lmul@product,w
  9052  09DF  00A0               	movwf	?___lmul
  9053  09E0  0008               	return
  9054  09E1                     __end_of___lmul:	
  9055                           
  9056                           	psect	text31
  9057  0B9B                     __ptext31:	
  9058 ;; *************** function ___lldiv *****************
  9059 ;; Defined at:
  9060 ;;		line 6 in file "/Applications/microchip/xc8/v1.38/sources/common/lldiv.c"
  9061 ;; Parameters:    Size  Location     Type
  9062 ;;  divisor         4   12[BANK0 ] unsigned long 
  9063 ;;  dividend        4   16[BANK0 ] unsigned long 
  9064 ;; Auto vars:     Size  Location     Type
  9065 ;;  quotient        4   21[BANK0 ] unsigned long 
  9066 ;;  counter         1   25[BANK0 ] unsigned char 
  9067 ;; Return value:  Size  Location     Type
  9068 ;;                  4   12[BANK0 ] unsigned long 
  9069 ;; Registers used:
  9070 ;;		wreg, status,2, status,0
  9071 ;; Tracked objects:
  9072 ;;		On entry : 0/0
  9073 ;;		On exit  : 0/0
  9074 ;;		Unchanged: 0/0
  9075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9076 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;Total ram usage:       14 bytes
  9081 ;; Hardware stack levels used:    1
  9082 ;; Hardware stack levels required when called:    6
  9083 ;; This function calls:
  9084 ;;		Nothing
  9085 ;; This function is called by:
  9086 ;;		_autoRun
  9087 ;; This function uses a non-reentrant model
  9088 ;;
  9089                           
  9090                           
  9091                           ;psect for function ___lldiv
  9092  0B9B                     ___lldiv:	
  9093                           
  9094                           ;incstack = 0
  9095                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9096  0B9B  3000               	movlw	0
  9097  0B9C  0020               	movlb	0	; select bank0
  9098  0B9D  00B8               	movwf	___lldiv@quotient+3
  9099  0B9E  3000               	movlw	0
  9100  0B9F  00B7               	movwf	___lldiv@quotient+2
  9101  0BA0  3000               	movlw	0
  9102  0BA1  00B6               	movwf	___lldiv@quotient+1
  9103  0BA2  3000               	movlw	0
  9104  0BA3  00B5               	movwf	___lldiv@quotient
  9105  0BA4  082F               	movf	___lldiv@divisor+3,w
  9106  0BA5  042E               	iorwf	___lldiv@divisor+2,w
  9107  0BA6  042D               	iorwf	___lldiv@divisor+1,w
  9108  0BA7  042C               	iorwf	___lldiv@divisor,w
  9109  0BA8  1903               	skipnz
  9110  0BA9  2BE5               	goto	l3846
  9111  0BAA  01B9               	clrf	___lldiv@counter
  9112  0BAB  0AB9               	incf	___lldiv@counter,f
  9113  0BAC                     l3832:	
  9114  0BAC  1BAF               	btfsc	___lldiv@divisor+3,7
  9115  0BAD  2BBA               	goto	l3834
  9116  0BAE  3001               	movlw	1
  9117  0BAF                     u3885:	
  9118  0BAF  35AC               	lslf	___lldiv@divisor,f
  9119  0BB0  0DAD               	rlf	___lldiv@divisor+1,f
  9120  0BB1  0DAE               	rlf	___lldiv@divisor+2,f
  9121  0BB2  0DAF               	rlf	___lldiv@divisor+3,f
  9122  0BB3  0B89               	decfsz	9,f
  9123  0BB4  2BAF               	goto	u3885
  9124  0BB5  3001               	movlw	1
  9125  0BB6  00B4               	movwf	??___lldiv
  9126  0BB7  0834               	movf	??___lldiv,w
  9127  0BB8  07B9               	addwf	___lldiv@counter,f
  9128  0BB9  2BAC               	goto	l3832
  9129  0BBA                     l3834:	
  9130  0BBA  3001               	movlw	1
  9131  0BBB                     u3905:	
  9132  0BBB  35B5               	lslf	___lldiv@quotient,f
  9133  0BBC  0DB6               	rlf	___lldiv@quotient+1,f
  9134  0BBD  0DB7               	rlf	___lldiv@quotient+2,f
  9135  0BBE  0DB8               	rlf	___lldiv@quotient+3,f
  9136  0BBF  0B89               	decfsz	9,f
  9137  0BC0  2BBB               	goto	u3905
  9138  0BC1  082F               	movf	___lldiv@divisor+3,w
  9139  0BC2  0233               	subwf	___lldiv@dividend+3,w
  9140  0BC3  1D03               	skipz
  9141  0BC4  2BCF               	goto	u3915
  9142  0BC5  082E               	movf	___lldiv@divisor+2,w
  9143  0BC6  0232               	subwf	___lldiv@dividend+2,w
  9144  0BC7  1D03               	skipz
  9145  0BC8  2BCF               	goto	u3915
  9146  0BC9  082D               	movf	___lldiv@divisor+1,w
  9147  0BCA  0231               	subwf	___lldiv@dividend+1,w
  9148  0BCB  1D03               	skipz
  9149  0BCC  2BCF               	goto	u3915
  9150  0BCD  082C               	movf	___lldiv@divisor,w
  9151  0BCE  0230               	subwf	___lldiv@dividend,w
  9152  0BCF                     u3915:	
  9153  0BCF  1C03               	skipc
  9154  0BD0  2BDA               	goto	l3842
  9155  0BD1  082C               	movf	___lldiv@divisor,w
  9156  0BD2  02B0               	subwf	___lldiv@dividend,f
  9157  0BD3  082D               	movf	___lldiv@divisor+1,w
  9158  0BD4  3BB1               	subwfb	___lldiv@dividend+1,f
  9159  0BD5  082E               	movf	___lldiv@divisor+2,w
  9160  0BD6  3BB2               	subwfb	___lldiv@dividend+2,f
  9161  0BD7  082F               	movf	___lldiv@divisor+3,w
  9162  0BD8  3BB3               	subwfb	___lldiv@dividend+3,f
  9163  0BD9  1435               	bsf	___lldiv@quotient,0
  9164  0BDA                     l3842:	
  9165  0BDA  3001               	movlw	1
  9166  0BDB                     u3925:	
  9167  0BDB  36AF               	lsrf	___lldiv@divisor+3,f
  9168  0BDC  0CAE               	rrf	___lldiv@divisor+2,f
  9169  0BDD  0CAD               	rrf	___lldiv@divisor+1,f
  9170  0BDE  0CAC               	rrf	___lldiv@divisor,f
  9171  0BDF  0B89               	decfsz	9,f
  9172  0BE0  2BDB               	goto	u3925
  9173  0BE1  3001               	movlw	1
  9174  0BE2  02B9               	subwf	___lldiv@counter,f
  9175  0BE3  1D03               	btfss	3,2
  9176  0BE4  2BBA               	goto	l3834
  9177  0BE5                     l3846:	
  9178  0BE5  0838               	movf	___lldiv@quotient+3,w
  9179  0BE6  00AF               	movwf	?___lldiv+3
  9180  0BE7  0837               	movf	___lldiv@quotient+2,w
  9181  0BE8  00AE               	movwf	?___lldiv+2
  9182  0BE9  0836               	movf	___lldiv@quotient+1,w
  9183  0BEA  00AD               	movwf	?___lldiv+1
  9184  0BEB  0835               	movf	___lldiv@quotient,w
  9185  0BEC  00AC               	movwf	?___lldiv
  9186  0BED  0008               	return
  9187  0BEE                     __end_of___lldiv:	
  9188                           
  9189                           	psect	text32
  9190  1474                     __ptext32:	
  9191 ;; *************** function _TMR2_StartTimer *****************
  9192 ;; Defined at:
  9193 ;;		line 57 in file "src/tmr.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;		None
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;		None
  9198 ;; Return value:  Size  Location     Type
  9199 ;;                  1    wreg      void 
  9200 ;; Registers used:
  9201 ;;		None
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9211 ;;Total ram usage:        0 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:    6
  9214 ;; This function calls:
  9215 ;;		Nothing
  9216 ;; This function is called by:
  9217 ;;		_main
  9218 ;; This function uses a non-reentrant model
  9219 ;;
  9220                           
  9221                           
  9222                           ;psect for function _TMR2_StartTimer
  9223  1474                     _TMR2_StartTimer:	
  9224                           
  9225                           ;tmr.c: 60: T2CONbits.TMR2ON = 1;
  9226                           
  9227                           ;incstack = 0
  9228                           ; Regs used in _TMR2_StartTimer: []
  9229  1474  0020               	movlb	0	; select bank0
  9230  1475  151F               	bsf	31,2	;volatile
  9231  1476  0008               	return
  9232  1477                     __end_of_TMR2_StartTimer:	
  9233                           
  9234                           	psect	text33
  9235  1471                     __ptext33:	
  9236 ;; *************** function _TMR0_StartTimer *****************
  9237 ;; Defined at:
  9238 ;;		line 30 in file "src/tmr.c"
  9239 ;; Parameters:    Size  Location     Type
  9240 ;;		None
  9241 ;; Auto vars:     Size  Location     Type
  9242 ;;		None
  9243 ;; Return value:  Size  Location     Type
  9244 ;;                  1    wreg      void 
  9245 ;; Registers used:
  9246 ;;		None
  9247 ;; Tracked objects:
  9248 ;;		On entry : 0/0
  9249 ;;		On exit  : 0/0
  9250 ;;		Unchanged: 0/0
  9251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;Total ram usage:        0 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; Hardware stack levels required when called:    6
  9259 ;; This function calls:
  9260 ;;		Nothing
  9261 ;; This function is called by:
  9262 ;;		_main
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266                           
  9267                           ;psect for function _TMR0_StartTimer
  9268  1471                     _TMR0_StartTimer:	
  9269                           
  9270                           ;tmr.c: 33: T0CON0bits.T0EN = 1;
  9271                           
  9272                           ;incstack = 0
  9273                           ; Regs used in _TMR0_StartTimer: []
  9274  1471  0020               	movlb	0	; select bank0
  9275  1472  1797               	bsf	23,7	;volatile
  9276  1473  0008               	return
  9277  1474                     __end_of_TMR0_StartTimer:	
  9278                           
  9279                           	psect	text34
  9280  16BC                     __ptext34:	
  9281 ;; *************** function _SYSTEM_Initialize *****************
  9282 ;; Defined at:
  9283 ;;		line 58 in file "src/comman.c"
  9284 ;; Parameters:    Size  Location     Type
  9285 ;;		None
  9286 ;; Auto vars:     Size  Location     Type
  9287 ;;		None
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  1    wreg      void 
  9290 ;; Registers used:
  9291 ;;		wreg, status,2, status,0, pclath, cstack
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;Total ram usage:        0 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    7
  9304 ;; This function calls:
  9305 ;;		_EUSART_Initialize
  9306 ;;		_OSCILLATOR_Initialize
  9307 ;;		_PIN_MANAGER_Initialize
  9308 ;;		_PWM1_Initialize
  9309 ;;		_PWM2_Initialize
  9310 ;;		_PWM3_Initialize
  9311 ;;		_PWM4_Initialize
  9312 ;;		_TMR0_Initialize
  9313 ;;		_TMR2_Initialize
  9314 ;; This function is called by:
  9315 ;;		_main
  9316 ;; This function uses a non-reentrant model
  9317 ;;
  9318                           
  9319                           
  9320                           ;psect for function _SYSTEM_Initialize
  9321  16BC                     _SYSTEM_Initialize:	
  9322                           
  9323                           ;comman.c: 60: PIN_MANAGER_Initialize();
  9324                           
  9325                           ;incstack = 0
  9326                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9327  16BC  318B  2303  3196   	fcall	_PIN_MANAGER_Initialize
  9328                           
  9329                           ;comman.c: 61: OSCILLATOR_Initialize();
  9330  16BF  3194  24B9  3196   	fcall	_OSCILLATOR_Initialize
  9331                           
  9332                           ;comman.c: 62: PWM1_Initialize();
  9333  16C2  3194  24C3  3196   	fcall	_PWM1_Initialize
  9334                           
  9335                           ;comman.c: 63: PWM2_Initialize();
  9336  16C5  3194  24CD  3196   	fcall	_PWM2_Initialize
  9337                           
  9338                           ;comman.c: 64: PWM4_Initialize();
  9339  16C8  3194  24EC  3196   	fcall	_PWM4_Initialize
  9340                           
  9341                           ;comman.c: 65: PWM3_Initialize();
  9342  16CB  3194  24E1  3196   	fcall	_PWM3_Initialize
  9343                           
  9344                           ;comman.c: 66: TMR2_Initialize();
  9345  16CE  3194  24D7  3196   	fcall	_TMR2_Initialize
  9346                           
  9347                           ;comman.c: 67: TMR0_Initialize();
  9348  16D1  3194  24F7  3196   	fcall	_TMR0_Initialize
  9349                           
  9350                           ;comman.c: 68: EUSART_Initialize();
  9351  16D4  3195  253A         	fcall	_EUSART_Initialize
  9352  16D6  0008               	return
  9353  16D7                     __end_of_SYSTEM_Initialize:	
  9354                           
  9355                           	psect	text35
  9356  14D7                     __ptext35:	
  9357 ;; *************** function _TMR2_Initialize *****************
  9358 ;; Defined at:
  9359 ;;		line 37 in file "src/tmr.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;		None
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;		None
  9364 ;; Return value:  Size  Location     Type
  9365 ;;                  1    wreg      void 
  9366 ;; Registers used:
  9367 ;;		wreg, status,2
  9368 ;; Tracked objects:
  9369 ;;		On entry : 0/0
  9370 ;;		On exit  : 0/0
  9371 ;;		Unchanged: 0/0
  9372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;Total ram usage:        0 bytes
  9378 ;; Hardware stack levels used:    1
  9379 ;; Hardware stack levels required when called:    6
  9380 ;; This function calls:
  9381 ;;		Nothing
  9382 ;; This function is called by:
  9383 ;;		_SYSTEM_Initialize
  9384 ;; This function uses a non-reentrant model
  9385 ;;
  9386                           
  9387                           
  9388                           ;psect for function _TMR2_Initialize
  9389  14D7                     _TMR2_Initialize:	
  9390                           
  9391                           ;tmr.c: 42: T2CON = 0x03;
  9392                           
  9393                           ;incstack = 0
  9394                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  9395  14D7  3003               	movlw	3
  9396  14D8  0020               	movlb	0	; select bank0
  9397  14D9  009F               	movwf	31	;volatile
  9398                           
  9399                           ;tmr.c: 45: PR2 = 0xF9;
  9400  14DA  30F9               	movlw	249
  9401  14DB  009E               	movwf	30	;volatile
  9402                           
  9403                           ;tmr.c: 48: TMR2 = 0x00;
  9404  14DC  019D               	clrf	29	;volatile
  9405                           
  9406                           ;tmr.c: 51: PIR1bits.TMR2IF = 0;
  9407  14DD  1091               	bcf	17,1	;volatile
  9408                           
  9409                           ;tmr.c: 54: PIE1bits.TMR2IE = 1;
  9410  14DE  0021               	movlb	1	; select bank1
  9411  14DF  1491               	bsf	17,1	;volatile
  9412  14E0  0008               	return
  9413  14E1                     __end_of_TMR2_Initialize:	
  9414                           
  9415                           	psect	text36
  9416  14F7                     __ptext36:	
  9417 ;; *************** function _TMR0_Initialize *****************
  9418 ;; Defined at:
  9419 ;;		line 7 in file "src/tmr.c"
  9420 ;; Parameters:    Size  Location     Type
  9421 ;;		None
  9422 ;; Auto vars:     Size  Location     Type
  9423 ;;		None
  9424 ;; Return value:  Size  Location     Type
  9425 ;;                  1    wreg      void 
  9426 ;; Registers used:
  9427 ;;		wreg, status,2
  9428 ;; Tracked objects:
  9429 ;;		On entry : 0/0
  9430 ;;		On exit  : 0/0
  9431 ;;		Unchanged: 0/0
  9432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;Total ram usage:        0 bytes
  9438 ;; Hardware stack levels used:    1
  9439 ;; Hardware stack levels required when called:    6
  9440 ;; This function calls:
  9441 ;;		Nothing
  9442 ;; This function is called by:
  9443 ;;		_SYSTEM_Initialize
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447                           
  9448                           ;psect for function _TMR0_Initialize
  9449  14F7                     _TMR0_Initialize:	
  9450                           
  9451                           ;tmr.c: 12: T0CON0 = 0x00;
  9452                           
  9453                           ;incstack = 0
  9454                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  9455  14F7  0020               	movlb	0	; select bank0
  9456  14F8  0197               	clrf	23	;volatile
  9457                           
  9458                           ;tmr.c: 15: T0CON1 = 0xD7;
  9459  14F9  30D7               	movlw	215
  9460  14FA  0098               	movwf	24	;volatile
  9461                           
  9462                           ;tmr.c: 18: TMR0H = 0xFF;
  9463  14FB  30FF               	movlw	255
  9464  14FC  0096               	movwf	22	;volatile
  9465                           
  9466                           ;tmr.c: 21: TMR0L = 0x00;
  9467  14FD  0195               	clrf	21	;volatile
  9468                           
  9469                           ;tmr.c: 24: PIR0bits.TMR0IF = 0;
  9470  14FE  1290               	bcf	16,5	;volatile
  9471                           
  9472                           ;tmr.c: 27: PIE0bits.TMR0IE = 1;
  9473  14FF  0021               	movlb	1	; select bank1
  9474  1500  1690               	bsf	16,5	;volatile
  9475  1501  0008               	return
  9476  1502                     __end_of_TMR0_Initialize:	
  9477                           
  9478                           	psect	text37
  9479  14EC                     __ptext37:	
  9480 ;; *************** function _PWM4_Initialize *****************
  9481 ;; Defined at:
  9482 ;;		line 109 in file "src/pwm.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;                  1    wreg      void 
  9489 ;; Registers used:
  9490 ;;		wreg, status,2, status,0
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;Total ram usage:        0 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    6
  9503 ;; This function calls:
  9504 ;;		Nothing
  9505 ;; This function is called by:
  9506 ;;		_SYSTEM_Initialize
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           
  9511                           ;psect for function _PWM4_Initialize
  9512  14EC                     _PWM4_Initialize:	
  9513                           
  9514                           ;pwm.c: 114: CCP4CON = 0x9F;
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _PWM4_Initialize: [wreg+status,2+status,0]
  9518  14EC  309F               	movlw	159
  9519  14ED  0026               	movlb	6	; select bank6
  9520  14EE  0097               	movwf	23	;volatile
  9521                           
  9522                           ;pwm.c: 117: CCPR4H = 0x00;
  9523  14EF  0196               	clrf	22	;volatile
  9524                           
  9525                           ;pwm.c: 120: CCPR4L = 0x00;
  9526  14F0  0195               	clrf	21	;volatile
  9527                           
  9528                           ;pwm.c: 123: CCPTMRSbits.C4TSEL = 0x1;
  9529  14F1  0025               	movlb	5	; select bank5
  9530  14F2  081F               	movf	31,w	;volatile
  9531  14F3  393F               	andlw	-193
  9532  14F4  3840               	iorlw	64
  9533  14F5  009F               	movwf	31	;volatile
  9534  14F6  0008               	return
  9535  14F7                     __end_of_PWM4_Initialize:	
  9536                           
  9537                           	psect	text38
  9538  14E1                     __ptext38:	
  9539 ;; *************** function _PWM3_Initialize *****************
  9540 ;; Defined at:
  9541 ;;		line 74 in file "src/pwm.c"
  9542 ;; Parameters:    Size  Location     Type
  9543 ;;		None
  9544 ;; Auto vars:     Size  Location     Type
  9545 ;;		None
  9546 ;; Return value:  Size  Location     Type
  9547 ;;                  1    wreg      void 
  9548 ;; Registers used:
  9549 ;;		wreg, status,2, status,0
  9550 ;; Tracked objects:
  9551 ;;		On entry : 0/0
  9552 ;;		On exit  : 0/0
  9553 ;;		Unchanged: 0/0
  9554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9559 ;;Total ram usage:        0 bytes
  9560 ;; Hardware stack levels used:    1
  9561 ;; Hardware stack levels required when called:    6
  9562 ;; This function calls:
  9563 ;;		Nothing
  9564 ;; This function is called by:
  9565 ;;		_SYSTEM_Initialize
  9566 ;; This function uses a non-reentrant model
  9567 ;;
  9568                           
  9569                           
  9570                           ;psect for function _PWM3_Initialize
  9571  14E1                     _PWM3_Initialize:	
  9572                           
  9573                           ;pwm.c: 79: CCP3CON = 0x9F;
  9574                           
  9575                           ;incstack = 0
  9576                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  9577  14E1  309F               	movlw	159
  9578  14E2  0026               	movlb	6	; select bank6
  9579  14E3  0093               	movwf	19	;volatile
  9580                           
  9581                           ;pwm.c: 82: CCPR3H = 0x00;
  9582  14E4  0192               	clrf	18	;volatile
  9583                           
  9584                           ;pwm.c: 85: CCPR3L = 0x00;
  9585  14E5  0191               	clrf	17	;volatile
  9586                           
  9587                           ;pwm.c: 88: CCPTMRSbits.C3TSEL = 0x1;
  9588  14E6  0025               	movlb	5	; select bank5
  9589  14E7  081F               	movf	31,w	;volatile
  9590  14E8  39CF               	andlw	-49
  9591  14E9  3810               	iorlw	16
  9592  14EA  009F               	movwf	31	;volatile
  9593  14EB  0008               	return
  9594  14EC                     __end_of_PWM3_Initialize:	
  9595                           
  9596                           	psect	text39
  9597  14CD                     __ptext39:	
  9598 ;; *************** function _PWM2_Initialize *****************
  9599 ;; Defined at:
  9600 ;;		line 39 in file "src/pwm.c"
  9601 ;; Parameters:    Size  Location     Type
  9602 ;;		None
  9603 ;; Auto vars:     Size  Location     Type
  9604 ;;		None
  9605 ;; Return value:  Size  Location     Type
  9606 ;;                  1    wreg      void 
  9607 ;; Registers used:
  9608 ;;		wreg, status,2, status,0
  9609 ;; Tracked objects:
  9610 ;;		On entry : 0/0
  9611 ;;		On exit  : 0/0
  9612 ;;		Unchanged: 0/0
  9613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9618 ;;Total ram usage:        0 bytes
  9619 ;; Hardware stack levels used:    1
  9620 ;; Hardware stack levels required when called:    6
  9621 ;; This function calls:
  9622 ;;		Nothing
  9623 ;; This function is called by:
  9624 ;;		_SYSTEM_Initialize
  9625 ;; This function uses a non-reentrant model
  9626 ;;
  9627                           
  9628                           
  9629                           ;psect for function _PWM2_Initialize
  9630  14CD                     _PWM2_Initialize:	
  9631                           
  9632                           ;pwm.c: 44: CCP2CON = 0x9F;
  9633                           
  9634                           ;incstack = 0
  9635                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
  9636  14CD  309F               	movlw	159
  9637  14CE  0025               	movlb	5	; select bank5
  9638  14CF  0097               	movwf	23	;volatile
  9639                           
  9640                           ;pwm.c: 47: CCPR2H = 0x00;
  9641  14D0  0196               	clrf	22	;volatile
  9642                           
  9643                           ;pwm.c: 50: CCPR2L = 0x00;
  9644  14D1  0195               	clrf	21	;volatile
  9645                           
  9646                           ;pwm.c: 53: CCPTMRSbits.C2TSEL = 0x1;
  9647  14D2  081F               	movf	31,w	;volatile
  9648  14D3  39F3               	andlw	-13
  9649  14D4  3804               	iorlw	4
  9650  14D5  009F               	movwf	31	;volatile
  9651  14D6  0008               	return
  9652  14D7                     __end_of_PWM2_Initialize:	
  9653                           
  9654                           	psect	text40
  9655  14C3                     __ptext40:	
  9656 ;; *************** function _PWM1_Initialize *****************
  9657 ;; Defined at:
  9658 ;;		line 4 in file "src/pwm.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;		None
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;		None
  9663 ;; Return value:  Size  Location     Type
  9664 ;;                  1    wreg      void 
  9665 ;; Registers used:
  9666 ;;		wreg, status,2, status,0
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 0/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;Total ram usage:        0 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:    6
  9679 ;; This function calls:
  9680 ;;		Nothing
  9681 ;; This function is called by:
  9682 ;;		_SYSTEM_Initialize
  9683 ;; This function uses a non-reentrant model
  9684 ;;
  9685                           
  9686                           
  9687                           ;psect for function _PWM1_Initialize
  9688  14C3                     _PWM1_Initialize:	
  9689                           
  9690                           ;pwm.c: 9: CCP1CON = 0x9F;
  9691                           
  9692                           ;incstack = 0
  9693                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
  9694  14C3  309F               	movlw	159
  9695  14C4  0025               	movlb	5	; select bank5
  9696  14C5  0093               	movwf	19	;volatile
  9697                           
  9698                           ;pwm.c: 12: CCPR1H = 0x00;
  9699  14C6  0192               	clrf	18	;volatile
  9700                           
  9701                           ;pwm.c: 15: CCPR1L = 0x00;
  9702  14C7  0191               	clrf	17	;volatile
  9703                           
  9704                           ;pwm.c: 18: CCPTMRSbits.C1TSEL = 0x1;
  9705  14C8  081F               	movf	31,w	;volatile
  9706  14C9  39FC               	andlw	-4
  9707  14CA  3801               	iorlw	1
  9708  14CB  009F               	movwf	31	;volatile
  9709  14CC  0008               	return
  9710  14CD                     __end_of_PWM1_Initialize:	
  9711                           
  9712                           	psect	text41
  9713  0B03                     __ptext41:	
  9714 ;; *************** function _PIN_MANAGER_Initialize *****************
  9715 ;; Defined at:
  9716 ;;		line 3 in file "src/pin.c"
  9717 ;; Parameters:    Size  Location     Type
  9718 ;;		None
  9719 ;; Auto vars:     Size  Location     Type
  9720 ;;  state           1    0[BANK0 ] unsigned char 
  9721 ;; Return value:  Size  Location     Type
  9722 ;;                  1    wreg      void 
  9723 ;; Registers used:
  9724 ;;		wreg, status,2, status,0
  9725 ;; Tracked objects:
  9726 ;;		On entry : 0/0
  9727 ;;		On exit  : 0/0
  9728 ;;		Unchanged: 0/0
  9729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;Total ram usage:        1 bytes
  9735 ;; Hardware stack levels used:    1
  9736 ;; Hardware stack levels required when called:    6
  9737 ;; This function calls:
  9738 ;;		Nothing
  9739 ;; This function is called by:
  9740 ;;		_SYSTEM_Initialize
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           
  9745                           ;psect for function _PIN_MANAGER_Initialize
  9746  0B03                     _PIN_MANAGER_Initialize:	
  9747                           
  9748                           ;pin.c: 8: LATA = 0x00;
  9749                           
  9750                           ;incstack = 0
  9751                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  9752  0B03  0022               	movlb	2	; select bank2
  9753  0B04  018C               	clrf	12	;volatile
  9754                           
  9755                           ;pin.c: 9: LATB = 0xD0;
  9756  0B05  30D0               	movlw	208
  9757  0B06  008D               	movwf	13	;volatile
  9758                           
  9759                           ;pin.c: 10: LATC = 0x00;
  9760  0B07  018E               	clrf	14	;volatile
  9761                           
  9762                           ;pin.c: 15: TRISA = 0x37;
  9763  0B08  3037               	movlw	55
  9764  0B09  0021               	movlb	1	; select bank1
  9765  0B0A  008C               	movwf	12	;volatile
  9766                           
  9767                           ;pin.c: 16: TRISB = 0x00;
  9768  0B0B  018D               	clrf	13	;volatile
  9769                           
  9770                           ;pin.c: 17: TRISC = 0x05;
  9771  0B0C  3005               	movlw	5
  9772  0B0D  008E               	movwf	14	;volatile
  9773                           
  9774                           ;pin.c: 22: ANSELC = 0x00;
  9775  0B0E  0023               	movlb	3	; select bank3
  9776  0B0F  018E               	clrf	14	;volatile
  9777                           
  9778                           ;pin.c: 23: ANSELB = 0x00;
  9779  0B10  018D               	clrf	13	;volatile
  9780                           
  9781                           ;pin.c: 24: ANSELA = 0x00;
  9782  0B11  018C               	clrf	12	;volatile
  9783                           
  9784                           ;pin.c: 29: WPUB = 0x00;
  9785  0B12  0024               	movlb	4	; select bank4
  9786  0B13  018D               	clrf	13	;volatile
  9787                           
  9788                           ;pin.c: 30: WPUA = 0x06;
  9789  0B14  3006               	movlw	6
  9790  0B15  008C               	movwf	12	;volatile
  9791                           
  9792                           ;pin.c: 31: WPUC = 0x00;
  9793  0B16  018E               	clrf	14	;volatile
  9794                           
  9795                           ;pin.c: 36: ODCONA = 0x00;
  9796  0B17  0025               	movlb	5	; select bank5
  9797  0B18  018C               	clrf	12	;volatile
  9798                           
  9799                           ;pin.c: 37: ODCONB = 0x00;
  9800  0B19  018D               	clrf	13	;volatile
  9801                           
  9802                           ;pin.c: 38: ODCONC = 0x00;
  9803  0B1A  018E               	clrf	14	;volatile
  9804                           
  9805                           ;pin.c: 40: unsigned char state = GIE;
  9806  0B1B  3000               	movlw	0
  9807  0B1C  1B8B               	btfsc	11,7	;volatile
  9808  0B1D  3001               	movlw	1
  9809  0B1E  0020               	movlb	0	; select bank0
  9810  0B1F  00A0               	movwf	PIN_MANAGER_Initialize@state
  9811                           
  9812                           ;pin.c: 41: GIE = 0;
  9813  0B20  138B               	bcf	11,7	;volatile
  9814                           
  9815                           ;pin.c: 42: PPSLOCK = 0x55;
  9816  0B21  3055               	movlw	85
  9817  0B22  003C               	movlb	28	; select bank28
  9818  0B23  008F               	movwf	15	;volatile
  9819                           
  9820                           ;pin.c: 43: PPSLOCK = 0xAA;
  9821  0B24  30AA               	movlw	170
  9822  0B25  008F               	movwf	15	;volatile
  9823                           
  9824                           ;pin.c: 44: PPSLOCKbits.PPSLOCKED = 0x00;
  9825  0B26  100F               	bcf	15,0	;volatile
  9826                           
  9827                           ;pin.c: 46: RXPPSbits.RXPPS = 0x12;
  9828  0B27  0824               	movf	36,w	;volatile
  9829  0B28  39E0               	andlw	-32
  9830  0B29  3812               	iorlw	18
  9831  0B2A  00A4               	movwf	36	;volatile
  9832                           
  9833                           ;pin.c: 47: RB4PPSbits.RB4PPS = 0x14;
  9834  0B2B  003D               	movlb	29	; select bank29
  9835  0B2C  081C               	movf	28,w	;volatile
  9836  0B2D  39E0               	andlw	-32
  9837  0B2E  3814               	iorlw	20
  9838  0B2F  009C               	movwf	28	;volatile
  9839                           
  9840                           ;pin.c: 48: RC4PPSbits.RC4PPS = 0x0D;
  9841  0B30  0824               	movf	36,w	;volatile
  9842  0B31  39E0               	andlw	-32
  9843  0B32  380D               	iorlw	13
  9844  0B33  00A4               	movwf	36	;volatile
  9845                           
  9846                           ;pin.c: 49: RC3PPSbits.RC3PPS = 0x0E;
  9847  0B34  0823               	movf	35,w	;volatile
  9848  0B35  39E0               	andlw	-32
  9849  0B36  380E               	iorlw	14
  9850  0B37  00A3               	movwf	35	;volatile
  9851                           
  9852                           ;pin.c: 50: RC6PPSbits.RC6PPS = 0x0F;
  9853  0B38  0826               	movf	38,w	;volatile
  9854  0B39  39E0               	andlw	-32
  9855  0B3A  380F               	iorlw	15
  9856  0B3B  00A6               	movwf	38	;volatile
  9857                           
  9858                           ;pin.c: 51: RC5PPSbits.RC5PPS = 0x0C;
  9859  0B3C  0825               	movf	37,w	;volatile
  9860  0B3D  39E0               	andlw	-32
  9861  0B3E  380C               	iorlw	12
  9862  0B3F  00A5               	movwf	37	;volatile
  9863                           
  9864                           ;pin.c: 53: PPSLOCK = 0x55;
  9865  0B40  3055               	movlw	85
  9866  0B41  003C               	movlb	28	; select bank28
  9867  0B42  008F               	movwf	15	;volatile
  9868                           
  9869                           ;pin.c: 54: PPSLOCK = 0xAA;
  9870  0B43  30AA               	movlw	170
  9871  0B44  008F               	movwf	15	;volatile
  9872                           
  9873                           ;pin.c: 55: PPSLOCKbits.PPSLOCKED = 0x01;
  9874  0B45  140F               	bsf	15,0	;volatile
  9875                           
  9876                           ;pin.c: 57: GIE = state;
  9877  0B46  0020               	movlb	0	; select bank0
  9878  0B47  1C20               	btfss	PIN_MANAGER_Initialize@state,0
  9879  0B48  2B4B               	goto	u3260
  9880  0B49  178B               	bsf	11,7	;volatile
  9881  0B4A  0008               	return
  9882  0B4B                     u3260:	
  9883  0B4B  138B               	bcf	11,7	;volatile
  9884  0B4C  0008               	return
  9885  0B4D                     __end_of_PIN_MANAGER_Initialize:	
  9886                           
  9887                           	psect	text42
  9888  14B9                     __ptext42:	
  9889 ;; *************** function _OSCILLATOR_Initialize *****************
  9890 ;; Defined at:
  9891 ;;		line 43 in file "src/comman.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;		None
  9894 ;; Auto vars:     Size  Location     Type
  9895 ;;		None
  9896 ;; Return value:  Size  Location     Type
  9897 ;;                  1    wreg      void 
  9898 ;; Registers used:
  9899 ;;		wreg, status,2
  9900 ;; Tracked objects:
  9901 ;;		On entry : 0/0
  9902 ;;		On exit  : 0/0
  9903 ;;		Unchanged: 0/0
  9904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;Total ram usage:        0 bytes
  9910 ;; Hardware stack levels used:    1
  9911 ;; Hardware stack levels required when called:    6
  9912 ;; This function calls:
  9913 ;;		Nothing
  9914 ;; This function is called by:
  9915 ;;		_SYSTEM_Initialize
  9916 ;; This function uses a non-reentrant model
  9917 ;;
  9918                           
  9919                           
  9920                           ;psect for function _OSCILLATOR_Initialize
  9921  14B9                     _OSCILLATOR_Initialize:	
  9922                           
  9923                           ;comman.c: 46: OSCCON1 = 0x60;
  9924                           
  9925                           ;incstack = 0
  9926                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9927  14B9  3060               	movlw	96
  9928  14BA  0032               	movlb	18	; select bank18
  9929  14BB  0099               	movwf	25	;volatile
  9930                           
  9931                           ;comman.c: 48: OSCCON3 = 0x00;
  9932  14BC  019B               	clrf	27	;volatile
  9933                           
  9934                           ;comman.c: 50: OSCEN = 0x48;
  9935  14BD  3048               	movlw	72
  9936  14BE  009D               	movwf	29	;volatile
  9937                           
  9938                           ;comman.c: 52: OSCFRQ = 0x06;
  9939  14BF  3006               	movlw	6
  9940  14C0  009F               	movwf	31	;volatile
  9941                           
  9942                           ;comman.c: 54: OSCTUNE = 0x00;
  9943  14C1  019E               	clrf	30	;volatile
  9944  14C2  0008               	return
  9945  14C3                     __end_of_OSCILLATOR_Initialize:	
  9946                           
  9947                           	psect	text43
  9948  153A                     __ptext43:	
  9949 ;; *************** function _EUSART_Initialize *****************
  9950 ;; Defined at:
  9951 ;;		line 6 in file "src/eusart.c"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;		None
  9954 ;; Auto vars:     Size  Location     Type
  9955 ;;		None
  9956 ;; Return value:  Size  Location     Type
  9957 ;;                  1    wreg      void 
  9958 ;; Registers used:
  9959 ;;		wreg
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;Total ram usage:        0 bytes
  9970 ;; Hardware stack levels used:    1
  9971 ;; Hardware stack levels required when called:    6
  9972 ;; This function calls:
  9973 ;;		Nothing
  9974 ;; This function is called by:
  9975 ;;		_SYSTEM_Initialize
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           
  9980                           ;psect for function _EUSART_Initialize
  9981  153A                     _EUSART_Initialize:	
  9982                           
  9983                           ;eusart.c: 9: PIE1bits.RCIE = 0;
  9984                           
  9985                           ;incstack = 0
  9986                           ; Regs used in _EUSART_Initialize: [wreg]
  9987  153A  0021               	movlb	1	; select bank1
  9988  153B  1291               	bcf	17,5	;volatile
  9989                           
  9990                           ;eusart.c: 10: PIE1bits.TXIE = 0;
  9991  153C  1211               	bcf	17,4	;volatile
  9992                           
  9993                           ;eusart.c: 15: BAUD1CON = 0x08;
  9994  153D  3008               	movlw	8
  9995  153E  0023               	movlb	3	; select bank3
  9996  153F  009F               	movwf	31	;volatile
  9997                           
  9998                           ;eusart.c: 18: RC1STA = 0x90;
  9999  1540  3090               	movlw	144
 10000  1541  009D               	movwf	29	;volatile
 10001                           
 10002                           ;eusart.c: 21: TX1STA = 0x24;
 10003  1542  3024               	movlw	36
 10004  1543  009E               	movwf	30	;volatile
 10005                           
 10006                           ;eusart.c: 24: SP1BRGL = 0xA0;
 10007  1544  30A0               	movlw	160
 10008  1545  009B               	movwf	27	;volatile
 10009                           
 10010                           ;eusart.c: 27: SP1BRGH = 0x01;
 10011  1546  3001               	movlw	1
 10012  1547  009C               	movwf	28	;volatile
 10013                           
 10014                           ;eusart.c: 30: PIE1bits.RCIE = 1;
 10015  1548  0021               	movlb	1	; select bank1
 10016  1549  1691               	bsf	17,5	;volatile
 10017  154A  0008               	return
 10018  154B                     __end_of_EUSART_Initialize:	
 10019                           
 10020                           	psect	text44
 10021  03EC                     __ptext44:	
 10022 ;; *************** function _DecodeDATA *****************
 10023 ;; Defined at:
 10024 ;;		line 208 in file "src/ble.c"
 10025 ;; Parameters:    Size  Location     Type
 10026 ;;		None
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;  val             2   17[BANK0 ] unsigned int 
 10029 ;;  val             2   21[BANK0 ] unsigned int 
 10030 ;;  i               1   25[BANK0 ] unsigned char 
 10031 ;;  i               1   28[BANK0 ] unsigned char 
 10032 ;;  i               1   23[BANK0 ] unsigned char 
 10033 ;;  i               1   24[BANK0 ] unsigned char 
 10034 ;;  len             1   20[BANK0 ] unsigned char 
 10035 ;;  idx             1   27[BANK0 ] unsigned char 
 10036 ;;  idx             1   26[BANK0 ] unsigned char 
 10037 ;;  len             1   16[BANK0 ] unsigned char 
 10038 ;;  idx             1   15[BANK0 ] unsigned char 
 10039 ;;  len             1   19[BANK0 ] unsigned char 
 10040 ;; Return value:  Size  Location     Type
 10041 ;;                  1    wreg      void 
 10042 ;; Registers used:
 10043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;Total ram usage:       19 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; Hardware stack levels required when called:    9
 10056 ;; This function calls:
 10057 ;;		___lwdiv
 10058 ;;		_bleSendDeviceData
 10059 ;;		_bleSendDeviceTime
 10060 ;;		_getCRC
 10061 ;;		_indicateLedBle
 10062 ;;		_turnOffLedRamp
 10063 ;;		_turnOnLedRamp
 10064 ;;		_updatePWM
 10065 ;; This function is called by:
 10066 ;;		_main
 10067 ;; This function uses a non-reentrant model
 10068 ;;
 10069                           
 10070                           
 10071                           ;psect for function _DecodeDATA
 10072  03EC                     _DecodeDATA:	
 10073                           
 10074                           ;ble.c: 211: if(gLedRunPara.find || rxBuf[0] != 0x68)
 10075                           
 10076                           ;incstack = 0
 10077                           ; Regs used in _DecodeDATA: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10078  03EC  0021               	movlb	1	; select bank1
 10079  03ED  1850               	btfsc	_gLedRunPara^(0+128),0	;volatile
 10080  03EE  0008               	return
 10081  03EF  3068               	movlw	104
 10082  03F0  0022               	movlb	2	; select bank2
 10083  03F1  064F               	xorwf	_rxBuf^(0+256),w
 10084  03F2  1D03               	btfss	3,2
 10085  03F3  0008               	return
 10086  03F4  2F19               	goto	l4134
 10087  03F5                     l3938:	
 10088                           ;ble.c: 216: {
 10089                           ;ble.c: 217: case 0x02:
 10090                           
 10091                           ;ble.c: 214: }
 10092                           ;ble.c: 215: switch(rxBuf[1])
 10093                           
 10094                           ;ble.c: 212: {
 10095                           ;ble.c: 213: return;
 10096                           
 10097                           
 10098                           ;ble.c: 218: if(getCRC(rxBuf, 3) == rxBuf[3])
 10099  03F5  3003               	movlw	3
 10100  03F6  0020               	movlb	0	; select bank0
 10101  03F7  00AA               	movwf	??_DecodeDATA
 10102  03F8  082A               	movf	??_DecodeDATA,w
 10103  03F9  00A0               	movwf	getCRC@len
 10104  03FA  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 10105  03FB  3196  2688  3183   	fcall	_getCRC
 10106  03FE  0022               	movlb	2	; select bank2
 10107  03FF  0652               	xorwf	(_rxBuf^(0+256)+3),w
 10108  0400  1D03               	skipz
 10109  0401  0008               	return
 10110                           
 10111                           ;ble.c: 219: {
 10112                           ;ble.c: 220: if(rxBuf[2] == 0x00)
 10113  0402  0851               	movf	(_rxBuf^(0+256)+2),w
 10114  0403  1D03               	btfss	3,2
 10115  0404  2C10               	goto	l3948
 10116                           
 10117                           ;ble.c: 221: {
 10118                           ;ble.c: 222: gLedPara.fAuto = 0;
 10119  0405  1020               	bcf	_gLedPara^(0+256),0	;volatile
 10120                           
 10121                           ;ble.c: 223: if (gLedPara.mPara.manualPara.fOn)
 10122  0406  1C21               	btfss	(_gLedPara^(0+256)+1),0	;volatile
 10123  0407  2C0C               	goto	l3946
 10124                           
 10125                           ;ble.c: 224: {
 10126                           ;ble.c: 225: turnOnLedRamp();
 10127  0408  3196  266F  3183   	fcall	_turnOnLedRamp
 10128                           
 10129                           ;ble.c: 226: }
 10130  040B  2C14               	goto	l121
 10131  040C                     l3946:	
 10132                           
 10133                           ;ble.c: 227: else
 10134                           ;ble.c: 228: {
 10135                           ;ble.c: 229: turnOffLedRamp();
 10136  040C  3195  255C  3183   	fcall	_turnOffLedRamp
 10137                           
 10138                           ;ble.c: 230: }
 10139                           ;ble.c: 231: }
 10140  040F  2C14               	goto	l121
 10141  0410                     l3948:	
 10142                           
 10143                           ;ble.c: 232: else if(rxBuf[2] == 0x01)
 10144  0410  0022               	movlb	2	; select bank2
 10145  0411  0351               	decf	(_rxBuf^(0+256)+2),w
 10146  0412  1903               	btfsc	3,2
 10147                           
 10148                           ;ble.c: 233: {
 10149                           ;ble.c: 234: gLedPara.fAuto = 1;
 10150  0413  1420               	bsf	_gLedPara^(0+256),0	;volatile
 10151  0414                     l121:	
 10152                           
 10153                           ;ble.c: 235: }
 10154                           ;ble.c: 236: gLedRunPara.fSave = 1;
 10155  0414  0021               	movlb	1	; select bank1
 10156  0415  1550               	bsf	_gLedRunPara^(0+128),2	;volatile
 10157                           
 10158                           ;ble.c: 237: gLedRunPara.nSaveDelayCount = 3;
 10159  0416  3003               	movlw	3
 10160  0417  0020               	movlb	0	; select bank0
 10161  0418  00AA               	movwf	??_DecodeDATA
 10162  0419  082A               	movf	??_DecodeDATA,w
 10163  041A  0021               	movlb	1	; select bank1
 10164  041B  00D3               	movwf	(_gLedRunPara^(0+128)+3)	;volatile
 10165                           
 10166                           ;ble.c: 238: bleSendDeviceData();
 10167  041C  318D  2506         	fcall	_bleSendDeviceData
 10168                           
 10169                           ;ble.c: 239: }
 10170                           ;ble.c: 240: break;
 10171  041E  0008               	return
 10172  041F                     l124:	
 10173                           ;ble.c: 242: case 0x03:
 10174                           
 10175                           
 10176                           ;ble.c: 243: if( !gLedPara.fAuto )
 10177  041F  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 10178  0420  0008               	return
 10179                           
 10180                           ;ble.c: 244: {
 10181                           ;ble.c: 245: if(getCRC(rxBuf, 3) == rxBuf[3])
 10182  0421  3003               	movlw	3
 10183  0422  0020               	movlb	0	; select bank0
 10184  0423  00AA               	movwf	??_DecodeDATA
 10185  0424  082A               	movf	??_DecodeDATA,w
 10186  0425  00A0               	movwf	getCRC@len
 10187  0426  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 10188  0427  3196  2688  3183   	fcall	_getCRC
 10189  042A  0022               	movlb	2	; select bank2
 10190  042B  0652               	xorwf	(_rxBuf^(0+256)+3),w
 10191  042C  1D03               	skipz
 10192  042D  0008               	return
 10193                           
 10194                           ;ble.c: 246: {
 10195                           ;ble.c: 247: if(rxBuf[2] == 0x00)
 10196  042E  0851               	movf	(_rxBuf^(0+256)+2),w
 10197  042F  1D03               	btfss	3,2
 10198  0430  2C36               	goto	l3964
 10199                           
 10200                           ;ble.c: 248: {
 10201                           ;ble.c: 249: gLedPara.mPara.manualPara.fOn = 0;
 10202  0431  1021               	bcf	(_gLedPara^(0+256)+1),0	;volatile
 10203                           
 10204                           ;ble.c: 250: turnOffLedRamp();
 10205  0432  3195  255C  3183   	fcall	_turnOffLedRamp
 10206                           
 10207                           ;ble.c: 251: }
 10208  0435  2C3E               	goto	l3970
 10209  0436                     l3964:	
 10210                           
 10211                           ;ble.c: 252: else if(rxBuf[2] == 0x01)
 10212  0436  0022               	movlb	2	; select bank2
 10213  0437  0351               	decf	(_rxBuf^(0+256)+2),w
 10214  0438  1D03               	btfss	3,2
 10215  0439  2C3E               	goto	l3970
 10216                           
 10217                           ;ble.c: 253: {
 10218                           ;ble.c: 254: gLedPara.mPara.manualPara.fOn = 1;
 10219  043A  1421               	bsf	(_gLedPara^(0+256)+1),0	;volatile
 10220                           
 10221                           ;ble.c: 255: turnOnLedRamp();
 10222  043B  3196  266F  3183   	fcall	_turnOnLedRamp
 10223  043E                     l3970:	
 10224                           
 10225                           ;ble.c: 256: }
 10226                           ;ble.c: 257: gLedRunPara.fSave = 1;
 10227  043E  0021               	movlb	1	; select bank1
 10228  043F  1550               	bsf	_gLedRunPara^(0+128),2	;volatile
 10229                           
 10230                           ;ble.c: 258: gLedRunPara.nSaveDelayCount = 3;
 10231  0440  3003               	movlw	3
 10232  0441  0020               	movlb	0	; select bank0
 10233  0442  00AA               	movwf	??_DecodeDATA
 10234  0443  082A               	movf	??_DecodeDATA,w
 10235  0444  0021               	movlb	1	; select bank1
 10236  0445  00D3               	movwf	(_gLedRunPara^(0+128)+3)	;volatile
 10237                           
 10238                           ;ble.c: 259: bleSendDeviceData();
 10239  0446  318D  2506         	fcall	_bleSendDeviceData
 10240                           
 10241                           ;ble.c: 260: }
 10242                           ;ble.c: 261: }
 10243                           ;ble.c: 262: break;
 10244  0448  0008               	return
 10245  0449                     l130:	
 10246                           ;ble.c: 264: case 0x04:
 10247                           
 10248                           
 10249                           ;ble.c: 265: if(gLedPara.mPara.manualPara.fOn && (!gLedPara.fAuto) )
 10250  0449  1C21               	btfss	(_gLedPara^(0+256)+1),0	;volatile
 10251  044A  0008               	return
 10252  044B  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 10253  044C  0008               	return
 10254                           
 10255                           ;ble.c: 266: {
 10256                           ;ble.c: 267: gLedPara.mPara.manualPara.fDyn = 0;
 10257  044D  01A2               	clrf	(_gLedPara^(0+256)+2)	;volatile
 10258                           
 10259                           ;ble.c: 268: unsigned char len = 2+2*4;
 10260  044E  300A               	movlw	10
 10261  044F  0020               	movlb	0	; select bank0
 10262  0450  00AA               	movwf	??_DecodeDATA
 10263  0451  082A               	movf	??_DecodeDATA,w
 10264  0452  00B3               	movwf	DecodeDATA@len
 10265                           
 10266                           ;ble.c: 269: if (getCRC(rxBuf, len) == rxBuf[len])
 10267  0453  0833               	movf	DecodeDATA@len,w
 10268  0454  3E4F               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 10269  0455  0084               	movwf	4
 10270  0456  3001               	movlw	1	; select bank2/3
 10271  0457  0085               	movwf	5
 10272  0458  0833               	movf	DecodeDATA@len,w
 10273  0459  00AA               	movwf	??_DecodeDATA
 10274  045A  082A               	movf	??_DecodeDATA,w
 10275  045B  00A0               	movwf	getCRC@len
 10276  045C  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 10277  045D  3196  2688  3183   	fcall	_getCRC
 10278  0460  0600               	xorwf	0,w
 10279  0461  1D03               	skipz
 10280  0462  0008               	return
 10281                           
 10282                           ;ble.c: 270: {
 10283                           ;ble.c: 271: for (unsigned char i = 0; i < 4; i++)
 10284  0463  0020               	movlb	0	; select bank0
 10285  0464  01BC               	clrf	DecodeDATA@i
 10286  0465  3004               	movlw	4
 10287  0466  023C               	subwf	DecodeDATA@i,w
 10288  0467  1803               	btfsc	3,0
 10289  0468  2CA5               	goto	l134
 10290  0469                     l3990:	
 10291                           
 10292                           ;ble.c: 272: {
 10293                           ;ble.c: 273: unsigned int val = (rxBuf[2+2*i]<<8)|rxBuf[3+2*i];
 10294  0469  353C               	lslf	DecodeDATA@i,w
 10295  046A  3E03               	addlw	3
 10296  046B  3E4F               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 10297  046C  0086               	movwf	6
 10298  046D  3001               	movlw	1	; select bank2/3
 10299  046E  0087               	movwf	7
 10300  046F  0801               	movf	1,w
 10301  0470  00AA               	movwf	??_DecodeDATA
 10302  0471  01AB               	clrf	??_DecodeDATA+1
 10303  0472  353C               	lslf	DecodeDATA@i,w
 10304  0473  3E02               	addlw	2
 10305  0474  3E4F               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 10306  0475  0086               	movwf	6
 10307  0476  3001               	movlw	1	; select bank2/3
 10308  0477  0087               	movwf	7
 10309  0478  0801               	movf	1,w
 10310  0479  00AC               	movwf	??_DecodeDATA+2
 10311  047A  01AD               	clrf	??_DecodeDATA+3
 10312  047B  082C               	movf	??_DecodeDATA+2,w
 10313  047C  00AD               	movwf	??_DecodeDATA+3
 10314  047D  01AC               	clrf	??_DecodeDATA+2
 10315  047E  082A               	movf	??_DecodeDATA,w
 10316  047F  042C               	iorwf	??_DecodeDATA+2,w
 10317  0480  00B5               	movwf	DecodeDATA@val
 10318  0481  082B               	movf	??_DecodeDATA+1,w
 10319  0482  042D               	iorwf	??_DecodeDATA+3,w
 10320  0483  00B6               	movwf	DecodeDATA@val+1
 10321                           
 10322                           ;ble.c: 274: if (val <= 1000)
 10323  0484  3003               	movlw	3
 10324  0485  0236               	subwf	DecodeDATA@val+1,w
 10325  0486  30E9               	movlw	233
 10326  0487  1903               	skipnz
 10327  0488  0235               	subwf	DecodeDATA@val,w
 10328  0489  1803               	skipnc
 10329  048A  2C9D               	goto	l3996
 10330                           
 10331                           ;ble.c: 275: {
 10332                           ;ble.c: 276: gLedPara.mPara.manualPara.nBrt[i] = val;
 10333  048B  353C               	lslf	DecodeDATA@i,w
 10334  048C  3E02               	addlw	2
 10335  048D  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 10336  048E  0086               	movwf	6
 10337  048F  3001               	movlw	1	; select bank2/3
 10338  0490  0087               	movwf	7
 10339  0491  0835               	movf	DecodeDATA@val,w
 10340  0492  3FC0               	movwi [0]fsr1
 10341  0493  0836               	movf	DecodeDATA@val+1,w
 10342  0494  3FC1               	movwi [1]fsr1
 10343                           
 10344                           ;ble.c: 277: gLedRunPara.nTargetBrt[i] = val;
 10345  0495  353C               	lslf	DecodeDATA@i,w
 10346  0496  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
 10347  0497  0086               	movwf	6
 10348  0498  0187               	clrf	7
 10349  0499  0835               	movf	DecodeDATA@val,w
 10350  049A  3FC0               	movwi [0]fsr1
 10351  049B  0836               	movf	DecodeDATA@val+1,w
 10352  049C  3FC1               	movwi [1]fsr1
 10353  049D                     l3996:	
 10354  049D  3001               	movlw	1
 10355  049E  00AA               	movwf	??_DecodeDATA
 10356  049F  082A               	movf	??_DecodeDATA,w
 10357  04A0  07BC               	addwf	DecodeDATA@i,f
 10358  04A1  3004               	movlw	4
 10359  04A2  023C               	subwf	DecodeDATA@i,w
 10360  04A3  1C03               	skipc
 10361  04A4  2C69               	goto	l3990
 10362  04A5                     l134:	
 10363                           
 10364                           ;ble.c: 278: }
 10365                           ;ble.c: 279: }
 10366                           ;ble.c: 280: gLedRunPara.fSave = 1;
 10367  04A5  0021               	movlb	1	; select bank1
 10368  04A6  1550               	bsf	_gLedRunPara^(0+128),2	;volatile
 10369                           
 10370                           ;ble.c: 281: gLedRunPara.nSaveDelayCount = 3;
 10371  04A7  3003               	movlw	3
 10372  04A8  0020               	movlb	0	; select bank0
 10373  04A9  00AA               	movwf	??_DecodeDATA
 10374  04AA  082A               	movf	??_DecodeDATA,w
 10375  04AB  0021               	movlb	1	; select bank1
 10376  04AC  00D3               	movwf	(_gLedRunPara^(0+128)+3)	;volatile
 10377                           
 10378                           ;ble.c: 282: }
 10379                           ;ble.c: 283: }
 10380                           ;ble.c: 284: break;
 10381  04AD  0008               	return
 10382  04AE                     l4002:	
 10383                           ;ble.c: 286: case 0x05:
 10384                           
 10385                           
 10386                           ;ble.c: 287: if(rxBuf[0] ^ rxBuf[1] == rxBuf[2])
 10387  04AE  0022               	movlb	2	; select bank2
 10388  04AF  0850               	movf	(_rxBuf^(0+256)+1),w
 10389  04B0  0651               	xorwf	(_rxBuf^(0+256)+2),w
 10390  04B1  1D03               	btfss	3,2
 10391  04B2  2CB5               	goto	u4250
 10392  04B3  3001               	movlw	1
 10393  04B4  2CB6               	goto	u4260
 10394  04B5                     u4250:	
 10395  04B5  3000               	movlw	0
 10396  04B6                     u4260:	
 10397  04B6  0020               	movlb	0	; select bank0
 10398  04B7  00AA               	movwf	??_DecodeDATA
 10399  04B8  01AB               	clrf	??_DecodeDATA+1
 10400  04B9  082A               	movf	??_DecodeDATA,w
 10401  04BA  0022               	movlb	2	; select bank2
 10402  04BB  064F               	xorwf	_rxBuf^(0+256),w
 10403  04BC  0020               	movlb	0	; select bank0
 10404  04BD  00AC               	movwf	??_DecodeDATA+2
 10405  04BE  082B               	movf	??_DecodeDATA+1,w
 10406  04BF  00AD               	movwf	??_DecodeDATA+3
 10407  04C0  082C               	movf	??_DecodeDATA+2,w
 10408  04C1  042D               	iorwf	??_DecodeDATA+3,w
 10409  04C2  1903               	btfsc	3,2
 10410  04C3  0008               	return
 10411                           
 10412                           ;ble.c: 288: {
 10413                           ;ble.c: 289: bleSendDeviceData();
 10414  04C4  318D  2506         	fcall	_bleSendDeviceData
 10415                           
 10416                           ;ble.c: 290: }
 10417                           ;ble.c: 291: break;
 10418  04C6  0008               	return
 10419  04C7                     l4006:	
 10420                           ;ble.c: 293: case 0x06:
 10421                           
 10422                           
 10423                           ;ble.c: 294: if (rxBuf[2] < 4 && getCRC(rxBuf, 3) == rxBuf[3])
 10424  04C7  3004               	movlw	4
 10425  04C8  0022               	movlb	2	; select bank2
 10426  04C9  0251               	subwf	(_rxBuf^(0+256)+2),w
 10427  04CA  1803               	skipnc
 10428  04CB  0008               	return
 10429  04CC  3003               	movlw	3
 10430  04CD  0020               	movlb	0	; select bank0
 10431  04CE  00AA               	movwf	??_DecodeDATA
 10432  04CF  082A               	movf	??_DecodeDATA,w
 10433  04D0  00A0               	movwf	getCRC@len
 10434  04D1  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 10435  04D2  3196  2688  3183   	fcall	_getCRC
 10436  04D5  0022               	movlb	2	; select bank2
 10437  04D6  0652               	xorwf	(_rxBuf^(0+256)+3),w
 10438  04D7  1D03               	skipz
 10439  04D8  0008               	return
 10440                           
 10441                           ;ble.c: 295: {
 10442                           ;ble.c: 296: unsigned char idx = rxBuf[2];
 10443  04D9  0851               	movf	(_rxBuf^(0+256)+2),w
 10444  04DA  0020               	movlb	0	; select bank0
 10445  04DB  00AA               	movwf	??_DecodeDATA
 10446  04DC  082A               	movf	??_DecodeDATA,w
 10447  04DD  00AF               	movwf	DecodeDATA@idx
 10448                           
 10449                           ;ble.c: 297: for (unsigned char i = 0; i < 4; i++)
 10450  04DE  01B8               	clrf	DecodeDATA@i_242
 10451  04DF  3004               	movlw	4
 10452  04E0  0238               	subwf	DecodeDATA@i_242,w
 10453  04E1  1803               	btfsc	3,0
 10454  04E2  2D10               	goto	l141
 10455  04E3                     l4018:	
 10456                           
 10457                           ;ble.c: 298: {
 10458                           ;ble.c: 299: gLedPara.mPara.manualPara.nCustomBrt[idx][i] = gLedRunPara.nCurrentBrt[i]/1
      +                          0;
 10459  04E3  300A               	movlw	10
 10460  04E4  00A0               	movwf	___lwdiv@divisor
 10461  04E5  3000               	movlw	0
 10462  04E6  00A1               	movwf	___lwdiv@divisor+1
 10463  04E7  3538               	lslf	DecodeDATA@i_242,w
 10464  04E8  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 10465  04E9  0086               	movwf	6
 10466  04EA  0187               	clrf	7
 10467  04EB  3F40               	moviw [0]fsr1
 10468  04EC  00A2               	movwf	___lwdiv@dividend
 10469  04ED  3F41               	moviw [1]fsr1
 10470  04EE  00A3               	movwf	___lwdiv@dividend+1
 10471  04EF  318A  2216  3183   	fcall	___lwdiv
 10472  04F2  0020               	movlb	0	; select bank0
 10473  04F3  0820               	movf	?___lwdiv,w
 10474  04F4  00AA               	movwf	??_DecodeDATA
 10475  04F5  082F               	movf	DecodeDATA@idx,w
 10476  04F6  00AB               	movwf	??_DecodeDATA+1
 10477  04F7  3002               	movlw	2
 10478  04F8                     u4315:	
 10479  04F8  35AB               	lslf	??_DecodeDATA+1,f
 10480  04F9  0B89               	decfsz	9,f
 10481  04FA  2CF8               	goto	u4315
 10482  04FB  3021               	movlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 10483  04FC  072B               	addwf	??_DecodeDATA+1,w
 10484  04FD  00AC               	movwf	??_DecodeDATA+2
 10485  04FE  0838               	movf	DecodeDATA@i_242,w
 10486  04FF  072C               	addwf	??_DecodeDATA+2,w
 10487  0500  00AD               	movwf	??_DecodeDATA+3
 10488  0501  082D               	movf	??_DecodeDATA+3,w
 10489  0502  3E0A               	addlw	10
 10490  0503  0086               	movwf	6
 10491  0504  3001               	movlw	1	; select bank2/3
 10492  0505  0087               	movwf	7
 10493  0506  082A               	movf	??_DecodeDATA,w
 10494  0507  0081               	movwf	1
 10495  0508  3001               	movlw	1
 10496  0509  00AA               	movwf	??_DecodeDATA
 10497  050A  082A               	movf	??_DecodeDATA,w
 10498  050B  07B8               	addwf	DecodeDATA@i_242,f
 10499  050C  3004               	movlw	4
 10500  050D  0238               	subwf	DecodeDATA@i_242,w
 10501  050E  1C03               	skipc
 10502  050F  2CE3               	goto	l4018
 10503  0510                     l141:	
 10504                           
 10505                           ;ble.c: 300: }
 10506                           ;ble.c: 301: gLedRunPara.fSave = 1;
 10507  0510  0021               	movlb	1	; select bank1
 10508  0511  1550               	bsf	_gLedRunPara^(0+128),2	;volatile
 10509                           
 10510                           ;ble.c: 302: gLedRunPara.nSaveDelayCount = 3;
 10511  0512  3003               	movlw	3
 10512  0513  0020               	movlb	0	; select bank0
 10513  0514  00AA               	movwf	??_DecodeDATA
 10514  0515  082A               	movf	??_DecodeDATA,w
 10515  0516  0021               	movlb	1	; select bank1
 10516  0517  00D3               	movwf	(_gLedRunPara^(0+128)+3)	;volatile
 10517                           
 10518                           ;ble.c: 303: bleSendDeviceData();
 10519  0518  318D  2506         	fcall	_bleSendDeviceData
 10520                           
 10521                           ;ble.c: 304: }
 10522                           ;ble.c: 305: break;
 10523  051A  0008               	return
 10524  051B                     l4028:	
 10525                           ;ble.c: 307: case 0x07:
 10526                           
 10527                           
 10528                           ;ble.c: 308: if (getCRC(rxBuf, 2*4+10) == rxBuf[2*4+10])
 10529  051B  3012               	movlw	18
 10530  051C  0020               	movlb	0	; select bank0
 10531  051D  00AA               	movwf	??_DecodeDATA
 10532  051E  082A               	movf	??_DecodeDATA,w
 10533  051F  00A0               	movwf	getCRC@len
 10534  0520  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 10535  0521  3196  2688  3183   	fcall	_getCRC
 10536  0524  0022               	movlb	2	; select bank2
 10537  0525  0661               	xorwf	(_rxBuf^(0+256)+18),w
 10538  0526  1D03               	skipz
 10539  0527  0008               	return
 10540                           
 10541                           ;ble.c: 309: {
 10542                           ;ble.c: 310: unsigned char len = sizeof(gLedPara.aPara.array);
 10543  0528  3010               	movlw	16
 10544  0529  0020               	movlb	0	; select bank0
 10545  052A  00AA               	movwf	??_DecodeDATA
 10546  052B  082A               	movf	??_DecodeDATA,w
 10547  052C  00B0               	movwf	DecodeDATA@len_243
 10548                           
 10549                           ;ble.c: 311: for (unsigned char i = 0; i < len; i++)
 10550  052D  01B7               	clrf	DecodeDATA@i_244
 10551  052E                     l4038:	
 10552  052E  0830               	movf	DecodeDATA@len_243,w
 10553  052F  0237               	subwf	DecodeDATA@i_244,w
 10554  0530  1803               	btfsc	3,0
 10555  0531  2D46               	goto	l146
 10556                           
 10557                           ;ble.c: 312: {
 10558                           ;ble.c: 313: gLedPara.aPara.array[i] = rxBuf[2+i];
 10559  0532  0837               	movf	DecodeDATA@i_244,w
 10560  0533  3E02               	addlw	2
 10561  0534  3E4F               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 10562  0535  0086               	movwf	6
 10563  0536  3001               	movlw	1	; select bank2/3
 10564  0537  0087               	movwf	7
 10565  0538  0801               	movf	1,w
 10566  0539  00AA               	movwf	??_DecodeDATA
 10567  053A  0837               	movf	DecodeDATA@i_244,w
 10568  053B  3E3B               	addlw	(low ((_gLedPara| (0+256)+27)))& (0+255)
 10569  053C  0086               	movwf	6
 10570  053D  3001               	movlw	1	; select bank2/3
 10571  053E  0087               	movwf	7
 10572  053F  082A               	movf	??_DecodeDATA,w
 10573  0540  0081               	movwf	1
 10574  0541  3001               	movlw	1
 10575  0542  00AA               	movwf	??_DecodeDATA
 10576  0543  082A               	movf	??_DecodeDATA,w
 10577  0544  07B7               	addwf	DecodeDATA@i_244,f
 10578  0545  2D2E               	goto	l4038
 10579  0546                     l146:	
 10580                           
 10581                           ;ble.c: 314: }
 10582                           ;ble.c: 315: gLedRunPara.fSave = 1;
 10583  0546  0021               	movlb	1	; select bank1
 10584  0547  1550               	bsf	_gLedRunPara^(0+128),2	;volatile
 10585                           
 10586                           ;ble.c: 316: gLedRunPara.nSaveDelayCount = 3;
 10587  0548  3003               	movlw	3
 10588  0549  0020               	movlb	0	; select bank0
 10589  054A  00AA               	movwf	??_DecodeDATA
 10590  054B  082A               	movf	??_DecodeDATA,w
 10591  054C  0021               	movlb	1	; select bank1
 10592  054D  00D3               	movwf	(_gLedRunPara^(0+128)+3)	;volatile
 10593                           
 10594                           ;ble.c: 317: bleSendDeviceData();
 10595  054E  318D  2506         	fcall	_bleSendDeviceData
 10596                           
 10597                           ;ble.c: 318: }
 10598                           ;ble.c: 319: break;
 10599  0550  0008               	return
 10600  0551                     l147:	
 10601                           ;ble.c: 321: case 0x08:
 10602                           
 10603                           
 10604                           ;ble.c: 322: if (gLedPara.mPara.manualPara.fOn && getCRC(rxBuf, 4) == rxBuf[4] && rxBuf[
      +                          2] < 4)
 10605  0551  1C21               	btfss	(_gLedPara^(0+256)+1),0	;volatile
 10606  0552  0008               	return
 10607  0553  3004               	movlw	4
 10608  0554  0020               	movlb	0	; select bank0
 10609  0555  00AA               	movwf	??_DecodeDATA
 10610  0556  082A               	movf	??_DecodeDATA,w
 10611  0557  00A0               	movwf	getCRC@len
 10612  0558  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 10613  0559  3196  2688  3183   	fcall	_getCRC
 10614  055C  0022               	movlb	2	; select bank2
 10615  055D  0653               	xorwf	(_rxBuf^(0+256)+4),w
 10616  055E  1D03               	skipz
 10617  055F  0008               	return
 10618  0560  3004               	movlw	4
 10619  0561  0251               	subwf	(_rxBuf^(0+256)+2),w
 10620  0562  1803               	skipnc
 10621  0563  0008               	return
 10622                           
 10623                           ;ble.c: 323: {
 10624                           ;ble.c: 324: unsigned char idx = rxBuf[2];
 10625  0564  0851               	movf	(_rxBuf^(0+256)+2),w
 10626  0565  0020               	movlb	0	; select bank0
 10627  0566  00AA               	movwf	??_DecodeDATA
 10628  0567  082A               	movf	??_DecodeDATA,w
 10629  0568  00BA               	movwf	DecodeDATA@idx_245
 10630                           
 10631                           ;ble.c: 325: if (gLedPara.mPara.manualPara.nBrt[idx] + rxBuf[3] < 1000)
 10632  0569  353A               	lslf	DecodeDATA@idx_245,w
 10633  056A  3E02               	addlw	2
 10634  056B  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 10635  056C  0086               	movwf	6
 10636  056D  3001               	movlw	1	; select bank2/3
 10637  056E  0087               	movwf	7
 10638  056F  3F40               	moviw [0]fsr1
 10639  0570  00AA               	movwf	??_DecodeDATA
 10640  0571  3F41               	moviw [1]fsr1
 10641  0572  00AB               	movwf	??_DecodeDATA+1
 10642  0573  0022               	movlb	2	; select bank2
 10643  0574  0852               	movf	(_rxBuf^(0+256)+3),w
 10644  0575  0020               	movlb	0	; select bank0
 10645  0576  072A               	addwf	??_DecodeDATA,w
 10646  0577  00AC               	movwf	??_DecodeDATA+2
 10647  0578  082B               	movf	??_DecodeDATA+1,w
 10648  0579  1803               	skipnc
 10649  057A  0A2B               	incf	??_DecodeDATA+1,w
 10650  057B  00AD               	movwf	??_DecodeDATA+3
 10651  057C  3003               	movlw	3
 10652  057D  022D               	subwf	??_DecodeDATA+3,w
 10653  057E  30E8               	movlw	232
 10654  057F  1903               	skipnz
 10655  0580  022C               	subwf	??_DecodeDATA+2,w
 10656  0581  1803               	skipnc
 10657  0582  2D9F               	goto	l4056
 10658                           
 10659                           ;ble.c: 326: {
 10660                           ;ble.c: 327: gLedPara.mPara.manualPara.nBrt[idx] += rxBuf[3];
 10661  0583  353A               	lslf	DecodeDATA@idx_245,w
 10662  0584  3E02               	addlw	2
 10663  0585  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 10664  0586  0086               	movwf	6
 10665  0587  3001               	movlw	1	; select bank2/3
 10666  0588  0087               	movwf	7
 10667  0589  0022               	movlb	2	; select bank2
 10668  058A  0852               	movf	(_rxBuf^(0+256)+3),w
 10669  058B  0781               	addwf	1,f
 10670  058C  3141               	addfsr 1,1
 10671  058D  1803               	skipnc
 10672  058E  0A81               	incf	1,f
 10673                           
 10674                           ;ble.c: 328: gLedRunPara.nTargetBrt[idx] = gLedPara.mPara.manualPara.nBrt[idx];
 10675  058F  0020               	movlb	0	; select bank0
 10676  0590  353A               	lslf	DecodeDATA@idx_245,w
 10677  0591  3E02               	addlw	2
 10678  0592  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 10679  0593  0086               	movwf	6
 10680  0594  3001               	movlw	1	; select bank2/3
 10681  0595  0087               	movwf	7
 10682  0596  353A               	lslf	DecodeDATA@idx_245,w
 10683  0597  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
 10684  0598  0084               	movwf	4
 10685  0599  0185               	clrf	5
 10686  059A  3F40               	moviw [0]fsr1
 10687  059B  3F80               	movwi [0]fsr0
 10688  059C  3F41               	moviw [1]fsr1
 10689  059D  3F81               	movwi [1]fsr0
 10690                           
 10691                           ;ble.c: 329: }
 10692  059E  2DB9               	goto	l4058
 10693  059F                     l4056:	
 10694                           
 10695                           ;ble.c: 330: else
 10696                           ;ble.c: 331: {
 10697                           ;ble.c: 332: gLedPara.mPara.manualPara.nBrt[idx] = 1000;
 10698  059F  30E8               	movlw	232
 10699  05A0  00AA               	movwf	??_DecodeDATA
 10700  05A1  3003               	movlw	3
 10701  05A2  00AB               	movwf	??_DecodeDATA+1
 10702  05A3  353A               	lslf	DecodeDATA@idx_245,w
 10703  05A4  3E02               	addlw	2
 10704  05A5  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 10705  05A6  0086               	movwf	6
 10706  05A7  3001               	movlw	1	; select bank2/3
 10707  05A8  0087               	movwf	7
 10708  05A9  082A               	movf	??_DecodeDATA,w
 10709  05AA  3FC0               	movwi [0]fsr1
 10710  05AB  082B               	movf	??_DecodeDATA+1,w
 10711  05AC  3FC1               	movwi [1]fsr1
 10712                           
 10713                           ;ble.c: 333: gLedRunPara.nTargetBrt[idx] = 1000;
 10714  05AD  30E8               	movlw	232
 10715  05AE  00AA               	movwf	??_DecodeDATA
 10716  05AF  3003               	movlw	3
 10717  05B0  00AB               	movwf	??_DecodeDATA+1
 10718  05B1  353A               	lslf	DecodeDATA@idx_245,w
 10719  05B2  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
 10720  05B3  0086               	movwf	6
 10721  05B4  0187               	clrf	7
 10722  05B5  082A               	movf	??_DecodeDATA,w
 10723  05B6  3FC0               	movwi [0]fsr1
 10724  05B7  082B               	movf	??_DecodeDATA+1,w
 10725  05B8  3FC1               	movwi [1]fsr1
 10726  05B9                     l4058:	
 10727                           
 10728                           ;ble.c: 334: }
 10729                           ;ble.c: 335: gLedRunPara.fSave = 1;
 10730  05B9  0021               	movlb	1	; select bank1
 10731  05BA  1550               	bsf	_gLedRunPara^(0+128),2	;volatile
 10732                           
 10733                           ;ble.c: 336: gLedRunPara.nSaveDelayCount = 3;
 10734  05BB  3003               	movlw	3
 10735  05BC  0020               	movlb	0	; select bank0
 10736  05BD  00AA               	movwf	??_DecodeDATA
 10737  05BE  082A               	movf	??_DecodeDATA,w
 10738  05BF  0021               	movlb	1	; select bank1
 10739  05C0  00D3               	movwf	(_gLedRunPara^(0+128)+3)	;volatile
 10740                           
 10741                           ;ble.c: 337: }
 10742                           ;ble.c: 338: break;
 10743  05C1  0008               	return
 10744  05C2                     l151:	
 10745                           ;ble.c: 340: case 0x09:
 10746                           
 10747                           
 10748                           ;ble.c: 341: if (gLedPara.mPara.manualPara.fOn && getCRC(rxBuf, 4) == rxBuf[4] && rxBuf[
      +                          2] < 4)
 10749  05C2  1C21               	btfss	(_gLedPara^(0+256)+1),0	;volatile
 10750  05C3  0008               	return
 10751  05C4  3004               	movlw	4
 10752  05C5  0020               	movlb	0	; select bank0
 10753  05C6  00AA               	movwf	??_DecodeDATA
 10754  05C7  082A               	movf	??_DecodeDATA,w
 10755  05C8  00A0               	movwf	getCRC@len
 10756  05C9  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 10757  05CA  3196  2688  3183   	fcall	_getCRC
 10758  05CD  0022               	movlb	2	; select bank2
 10759  05CE  0653               	xorwf	(_rxBuf^(0+256)+4),w
 10760  05CF  1D03               	skipz
 10761  05D0  0008               	return
 10762  05D1  3004               	movlw	4
 10763  05D2  0251               	subwf	(_rxBuf^(0+256)+2),w
 10764  05D3  1803               	skipnc
 10765  05D4  0008               	return
 10766                           
 10767                           ;ble.c: 342: {
 10768                           ;ble.c: 343: unsigned char idx = rxBuf[2];
 10769  05D5  0851               	movf	(_rxBuf^(0+256)+2),w
 10770  05D6  0020               	movlb	0	; select bank0
 10771  05D7  00AA               	movwf	??_DecodeDATA
 10772  05D8  082A               	movf	??_DecodeDATA,w
 10773  05D9  00BB               	movwf	DecodeDATA@idx_246
 10774                           
 10775                           ;ble.c: 344: if (gLedPara.mPara.manualPara.nBrt[idx] > rxBuf[3])
 10776  05DA  353B               	lslf	DecodeDATA@idx_246,w
 10777  05DB  3E02               	addlw	2
 10778  05DC  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 10779  05DD  0086               	movwf	6
 10780  05DE  3001               	movlw	1	; select bank2/3
 10781  05DF  0087               	movwf	7
 10782  05E0  3F40               	moviw [0]fsr1
 10783  05E1  00AA               	movwf	??_DecodeDATA
 10784  05E2  3F41               	moviw [1]fsr1
 10785  05E3  00AB               	movwf	??_DecodeDATA+1
 10786  05E4  0022               	movlb	2	; select bank2
 10787  05E5  0852               	movf	(_rxBuf^(0+256)+3),w
 10788  05E6  0020               	movlb	0	; select bank0
 10789  05E7  00AC               	movwf	??_DecodeDATA+2
 10790  05E8  01AD               	clrf	??_DecodeDATA+3
 10791  05E9  082B               	movf	??_DecodeDATA+1,w
 10792  05EA  022D               	subwf	??_DecodeDATA+3,w
 10793  05EB  1D03               	skipz
 10794  05EC  2DEF               	goto	u4425
 10795  05ED  082A               	movf	??_DecodeDATA,w
 10796  05EE  022C               	subwf	??_DecodeDATA+2,w
 10797  05EF                     u4425:	
 10798  05EF  1803               	skipnc
 10799  05F0  2E0E               	goto	l4074
 10800                           
 10801                           ;ble.c: 345: {
 10802                           ;ble.c: 346: gLedPara.mPara.manualPara.nBrt[idx] -= rxBuf[3];
 10803  05F1  353B               	lslf	DecodeDATA@idx_246,w
 10804  05F2  3E02               	addlw	2
 10805  05F3  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 10806  05F4  0086               	movwf	6
 10807  05F5  3001               	movlw	1	; select bank2/3
 10808  05F6  0087               	movwf	7
 10809  05F7  0022               	movlb	2	; select bank2
 10810  05F8  0852               	movf	(_rxBuf^(0+256)+3),w
 10811  05F9  0281               	subwf	1,f
 10812  05FA  3141               	addfsr 1,1
 10813  05FB  1C03               	skipc
 10814  05FC  0381               	decf	1,f
 10815  05FD  317F               	addfsr 1,-1
 10816                           
 10817                           ;ble.c: 347: gLedRunPara.nTargetBrt[idx] = gLedPara.mPara.manualPara.nBrt[idx];
 10818  05FE  0020               	movlb	0	; select bank0
 10819  05FF  353B               	lslf	DecodeDATA@idx_246,w
 10820  0600  3E02               	addlw	2
 10821  0601  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 10822  0602  0086               	movwf	6
 10823  0603  3001               	movlw	1	; select bank2/3
 10824  0604  0087               	movwf	7
 10825  0605  353B               	lslf	DecodeDATA@idx_246,w
 10826  0606  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
 10827  0607  0084               	movwf	4
 10828  0608  0185               	clrf	5
 10829  0609  3F40               	moviw [0]fsr1
 10830  060A  3F80               	movwi [0]fsr0
 10831  060B  3F41               	moviw [1]fsr1
 10832  060C  3F81               	movwi [1]fsr0
 10833                           
 10834                           ;ble.c: 348: }
 10835  060D  2E1E               	goto	l4076
 10836  060E                     l4074:	
 10837                           
 10838                           ;ble.c: 349: else
 10839                           ;ble.c: 350: {
 10840                           ;ble.c: 351: gLedPara.mPara.manualPara.nBrt[idx] = 0;
 10841  060E  353B               	lslf	DecodeDATA@idx_246,w
 10842  060F  3E02               	addlw	2
 10843  0610  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 10844  0611  0086               	movwf	6
 10845  0612  3001               	movlw	1	; select bank2/3
 10846  0613  0087               	movwf	7
 10847  0614  3000               	movlw	0
 10848  0615  3FC0               	movwi [0]fsr1
 10849  0616  3FC1               	movwi [1]fsr1
 10850                           
 10851                           ;ble.c: 352: gLedRunPara.nTargetBrt[idx] = 0;
 10852  0617  353B               	lslf	DecodeDATA@idx_246,w
 10853  0618  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
 10854  0619  0086               	movwf	6
 10855  061A  0187               	clrf	7
 10856  061B  3000               	movlw	0
 10857  061C  3FC0               	movwi [0]fsr1
 10858  061D  3FC1               	movwi [1]fsr1
 10859  061E                     l4076:	
 10860                           
 10861                           ;ble.c: 353: }
 10862                           ;ble.c: 354: gLedRunPara.fSave = 1;
 10863  061E  0021               	movlb	1	; select bank1
 10864  061F  1550               	bsf	_gLedRunPara^(0+128),2	;volatile
 10865                           
 10866                           ;ble.c: 355: gLedRunPara.nSaveDelayCount = 3;
 10867  0620  3003               	movlw	3
 10868  0621  0020               	movlb	0	; select bank0
 10869  0622  00AA               	movwf	??_DecodeDATA
 10870  0623  082A               	movf	??_DecodeDATA,w
 10871  0624  0021               	movlb	1	; select bank1
 10872  0625  00D3               	movwf	(_gLedRunPara^(0+128)+3)	;volatile
 10873                           
 10874                           ;ble.c: 356: }
 10875                           ;ble.c: 357: break;
 10876  0626  0008               	return
 10877  0627                     l155:	
 10878                           ;ble.c: 359: case 0x0B:
 10879                           
 10880                           
 10881                           ;ble.c: 360: if (gLedPara.fAuto)
 10882  0627  1C20               	btfss	_gLedPara^(0+256),0	;volatile
 10883  0628  0008               	return
 10884                           
 10885                           ;ble.c: 361: {
 10886                           ;ble.c: 362: unsigned char len = 2+2*4;
 10887  0629  300A               	movlw	10
 10888  062A  0020               	movlb	0	; select bank0
 10889  062B  00AA               	movwf	??_DecodeDATA
 10890  062C  082A               	movf	??_DecodeDATA,w
 10891  062D  00B4               	movwf	DecodeDATA@len_247
 10892                           
 10893                           ;ble.c: 363: if (getCRC(rxBuf, len) == rxBuf[len])
 10894  062E  0834               	movf	DecodeDATA@len_247,w
 10895  062F  3E4F               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 10896  0630  0084               	movwf	4
 10897  0631  3001               	movlw	1	; select bank2/3
 10898  0632  0085               	movwf	5
 10899  0633  0834               	movf	DecodeDATA@len_247,w
 10900  0634  00AA               	movwf	??_DecodeDATA
 10901  0635  082A               	movf	??_DecodeDATA,w
 10902  0636  00A0               	movwf	getCRC@len
 10903  0637  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 10904  0638  3196  2688  3183   	fcall	_getCRC
 10905  063B  0600               	xorwf	0,w
 10906  063C  1D03               	skipz
 10907  063D  0008               	return
 10908                           
 10909                           ;ble.c: 364: {
 10910                           ;ble.c: 365: for (unsigned char i = 0; i < 4; i++)
 10911  063E  0020               	movlb	0	; select bank0
 10912  063F  01B9               	clrf	DecodeDATA@i_248
 10913  0640  3004               	movlw	4
 10914  0641  0239               	subwf	DecodeDATA@i_248,w
 10915  0642  1803               	btfsc	3,0
 10916  0643  2E76               	goto	l4100
 10917  0644                     l4090:	
 10918                           
 10919                           ;ble.c: 366: {
 10920                           ;ble.c: 367: unsigned int val = (rxBuf[2+2*i]<<8)|rxBuf[3+2*i];
 10921  0644  3539               	lslf	DecodeDATA@i_248,w
 10922  0645  3E03               	addlw	3
 10923  0646  3E4F               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 10924  0647  0086               	movwf	6
 10925  0648  3001               	movlw	1	; select bank2/3
 10926  0649  0087               	movwf	7
 10927  064A  0801               	movf	1,w
 10928  064B  00AA               	movwf	??_DecodeDATA
 10929  064C  01AB               	clrf	??_DecodeDATA+1
 10930  064D  3539               	lslf	DecodeDATA@i_248,w
 10931  064E  3E02               	addlw	2
 10932  064F  3E4F               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 10933  0650  0086               	movwf	6
 10934  0651  3001               	movlw	1	; select bank2/3
 10935  0652  0087               	movwf	7
 10936  0653  0801               	movf	1,w
 10937  0654  00AC               	movwf	??_DecodeDATA+2
 10938  0655  01AD               	clrf	??_DecodeDATA+3
 10939  0656  082C               	movf	??_DecodeDATA+2,w
 10940  0657  00AD               	movwf	??_DecodeDATA+3
 10941  0658  01AC               	clrf	??_DecodeDATA+2
 10942  0659  082A               	movf	??_DecodeDATA,w
 10943  065A  042C               	iorwf	??_DecodeDATA+2,w
 10944  065B  00B1               	movwf	DecodeDATA@val_249
 10945  065C  082B               	movf	??_DecodeDATA+1,w
 10946  065D  042D               	iorwf	??_DecodeDATA+3,w
 10947  065E  00B2               	movwf	DecodeDATA@val_249+1
 10948                           
 10949                           ;ble.c: 368: if (val <= 1000)
 10950  065F  3003               	movlw	3
 10951  0660  0232               	subwf	DecodeDATA@val_249+1,w
 10952  0661  30E9               	movlw	233
 10953  0662  1903               	skipnz
 10954  0663  0231               	subwf	DecodeDATA@val_249,w
 10955  0664  1803               	skipnc
 10956  0665  2E6E               	goto	l4096
 10957                           
 10958                           ;ble.c: 369: {
 10959                           ;ble.c: 370: gLedRunPara.nCurrentBrt[i] = val;
 10960  0666  3539               	lslf	DecodeDATA@i_248,w
 10961  0667  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 10962  0668  0086               	movwf	6
 10963  0669  0187               	clrf	7
 10964  066A  0831               	movf	DecodeDATA@val_249,w
 10965  066B  3FC0               	movwi [0]fsr1
 10966  066C  0832               	movf	DecodeDATA@val_249+1,w
 10967  066D  3FC1               	movwi [1]fsr1
 10968  066E                     l4096:	
 10969  066E  3001               	movlw	1
 10970  066F  00AA               	movwf	??_DecodeDATA
 10971  0670  082A               	movf	??_DecodeDATA,w
 10972  0671  07B9               	addwf	DecodeDATA@i_248,f
 10973  0672  3004               	movlw	4
 10974  0673  0239               	subwf	DecodeDATA@i_248,w
 10975  0674  1C03               	skipc
 10976  0675  2E44               	goto	l4090
 10977  0676                     l4100:	
 10978                           
 10979                           ;ble.c: 371: }
 10980                           ;ble.c: 372: }
 10981                           ;ble.c: 373: updatePWM();
 10982  0676  3189  2157         	fcall	_updatePWM
 10983                           
 10984                           ;ble.c: 374: gLedRunPara.fPrev = 1;
 10985  0678  0021               	movlb	1	; select bank1
 10986  0679  15D0               	bsf	_gLedRunPara^(0+128),3	;volatile
 10987                           
 10988                           ;ble.c: 375: gLedRunPara.nPrevCount = 3;
 10989  067A  3003               	movlw	3
 10990  067B  0020               	movlb	0	; select bank0
 10991  067C  00AA               	movwf	??_DecodeDATA
 10992  067D  082A               	movf	??_DecodeDATA,w
 10993  067E  0021               	movlb	1	; select bank1
 10994  067F  00D2               	movwf	(_gLedRunPara^(0+128)+2)	;volatile
 10995                           
 10996                           ;ble.c: 376: }
 10997                           ;ble.c: 377: }
 10998                           ;ble.c: 378: break;
 10999  0680  0008               	return
 11000  0681                     l4106:	
 11001                           ;ble.c: 380: case 0x0C:
 11002                           
 11003                           
 11004                           ;ble.c: 381: if(rxBuf[0] ^ rxBuf[1] == rxBuf[2])
 11005  0681  0022               	movlb	2	; select bank2
 11006  0682  0850               	movf	(_rxBuf^(0+256)+1),w
 11007  0683  0651               	xorwf	(_rxBuf^(0+256)+2),w
 11008  0684  1D03               	btfss	3,2
 11009  0685  2E88               	goto	u4480
 11010  0686  3001               	movlw	1
 11011  0687  2E89               	goto	u4490
 11012  0688                     u4480:	
 11013  0688  3000               	movlw	0
 11014  0689                     u4490:	
 11015  0689  0020               	movlb	0	; select bank0
 11016  068A  00AA               	movwf	??_DecodeDATA
 11017  068B  01AB               	clrf	??_DecodeDATA+1
 11018  068C  082A               	movf	??_DecodeDATA,w
 11019  068D  0022               	movlb	2	; select bank2
 11020  068E  064F               	xorwf	_rxBuf^(0+256),w
 11021  068F  0020               	movlb	0	; select bank0
 11022  0690  00AC               	movwf	??_DecodeDATA+2
 11023  0691  082B               	movf	??_DecodeDATA+1,w
 11024  0692  00AD               	movwf	??_DecodeDATA+3
 11025  0693  082C               	movf	??_DecodeDATA+2,w
 11026  0694  042D               	iorwf	??_DecodeDATA+3,w
 11027  0695  1903               	btfsc	3,2
 11028  0696  0008               	return
 11029                           
 11030                           ;ble.c: 382: {
 11031                           ;ble.c: 383: gLedRunPara.fPrev = 0;
 11032  0697  0021               	movlb	1	; select bank1
 11033  0698  11D0               	bcf	_gLedRunPara^(0+128),3	;volatile
 11034                           
 11035                           ;ble.c: 384: gLedRunPara.nPrevCount = 0;
 11036  0699  01D2               	clrf	(_gLedRunPara^(0+128)+2)	;volatile
 11037                           
 11038                           ;ble.c: 385: }
 11039                           ;ble.c: 386: break;
 11040  069A  0008               	return
 11041  069B                     l4112:	
 11042                           ;ble.c: 388: case 0x0D:
 11043                           
 11044                           
 11045                           ;ble.c: 389: if (rxBuf[0] ^ rxBuf[1] == rxBuf[2])
 11046  069B  0022               	movlb	2	; select bank2
 11047  069C  0850               	movf	(_rxBuf^(0+256)+1),w
 11048  069D  0651               	xorwf	(_rxBuf^(0+256)+2),w
 11049  069E  1D03               	btfss	3,2
 11050  069F  2EA2               	goto	u4510
 11051  06A0  3001               	movlw	1
 11052  06A1  2EA3               	goto	u4520
 11053  06A2                     u4510:	
 11054  06A2  3000               	movlw	0
 11055  06A3                     u4520:	
 11056  06A3  0020               	movlb	0	; select bank0
 11057  06A4  00AA               	movwf	??_DecodeDATA
 11058  06A5  01AB               	clrf	??_DecodeDATA+1
 11059  06A6  082A               	movf	??_DecodeDATA,w
 11060  06A7  0022               	movlb	2	; select bank2
 11061  06A8  064F               	xorwf	_rxBuf^(0+256),w
 11062  06A9  0020               	movlb	0	; select bank0
 11063  06AA  00AC               	movwf	??_DecodeDATA+2
 11064  06AB  082B               	movf	??_DecodeDATA+1,w
 11065  06AC  00AD               	movwf	??_DecodeDATA+3
 11066  06AD  082C               	movf	??_DecodeDATA+2,w
 11067  06AE  042D               	iorwf	??_DecodeDATA+3,w
 11068  06AF  1903               	btfsc	3,2
 11069  06B0  0008               	return
 11070                           
 11071                           ;ble.c: 390: {
 11072                           ;ble.c: 391: bleSendDeviceTime();
 11073  06B1  318A  22C2         	fcall	_bleSendDeviceTime
 11074                           
 11075                           ;ble.c: 392: }
 11076                           ;ble.c: 393: break;
 11077  06B3  0008               	return
 11078  06B4                     l4116:	
 11079                           ;ble.c: 395: case 0x0E:
 11080                           
 11081                           
 11082                           ;ble.c: 396: if (getCRC(rxBuf, 9) == rxBuf[9])
 11083  06B4  3009               	movlw	9
 11084  06B5  0020               	movlb	0	; select bank0
 11085  06B6  00AA               	movwf	??_DecodeDATA
 11086  06B7  082A               	movf	??_DecodeDATA,w
 11087  06B8  00A0               	movwf	getCRC@len
 11088  06B9  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 11089  06BA  3196  2688  3183   	fcall	_getCRC
 11090  06BD  0022               	movlb	2	; select bank2
 11091  06BE  0658               	xorwf	(_rxBuf^(0+256)+9),w
 11092  06BF  1D03               	skipz
 11093  06C0  0008               	return
 11094                           
 11095                           ;ble.c: 397: {
 11096                           ;ble.c: 398: gCurrentTime.datetime.year = rxBuf[2];
 11097  06C1  0851               	movf	(_rxBuf^(0+256)+2),w
 11098  06C2  0020               	movlb	0	; select bank0
 11099  06C3  00AA               	movwf	??_DecodeDATA
 11100  06C4  082A               	movf	??_DecodeDATA,w
 11101  06C5  0021               	movlb	1	; select bank1
 11102  06C6  00E5               	movwf	_gCurrentTime^(0+128)	;volatile
 11103                           
 11104                           ;ble.c: 399: gCurrentTime.datetime.month = rxBuf[3];
 11105  06C7  0022               	movlb	2	; select bank2
 11106  06C8  0852               	movf	(_rxBuf^(0+256)+3),w
 11107  06C9  0020               	movlb	0	; select bank0
 11108  06CA  00AA               	movwf	??_DecodeDATA
 11109  06CB  082A               	movf	??_DecodeDATA,w
 11110  06CC  0021               	movlb	1	; select bank1
 11111  06CD  00E6               	movwf	(_gCurrentTime^(0+128)+1)	;volatile
 11112                           
 11113                           ;ble.c: 400: gCurrentTime.datetime.day = rxBuf[4];
 11114  06CE  0022               	movlb	2	; select bank2
 11115  06CF  0853               	movf	(_rxBuf^(0+256)+4),w
 11116  06D0  0020               	movlb	0	; select bank0
 11117  06D1  00AA               	movwf	??_DecodeDATA
 11118  06D2  082A               	movf	??_DecodeDATA,w
 11119  06D3  0021               	movlb	1	; select bank1
 11120  06D4  00E7               	movwf	(_gCurrentTime^(0+128)+2)	;volatile
 11121                           
 11122                           ;ble.c: 401: gCurrentTime.datetime.wk = rxBuf[5];
 11123  06D5  0022               	movlb	2	; select bank2
 11124  06D6  0854               	movf	(_rxBuf^(0+256)+5),w
 11125  06D7  0020               	movlb	0	; select bank0
 11126  06D8  00AA               	movwf	??_DecodeDATA
 11127  06D9  082A               	movf	??_DecodeDATA,w
 11128  06DA  0021               	movlb	1	; select bank1
 11129  06DB  00E8               	movwf	(_gCurrentTime^(0+128)+3)	;volatile
 11130                           
 11131                           ;ble.c: 402: gCurrentTime.datetime.hour = rxBuf[6];
 11132  06DC  0022               	movlb	2	; select bank2
 11133  06DD  0855               	movf	(_rxBuf^(0+256)+6),w
 11134  06DE  0020               	movlb	0	; select bank0
 11135  06DF  00AA               	movwf	??_DecodeDATA
 11136  06E0  082A               	movf	??_DecodeDATA,w
 11137  06E1  0021               	movlb	1	; select bank1
 11138  06E2  00E9               	movwf	(_gCurrentTime^(0+128)+4)	;volatile
 11139                           
 11140                           ;ble.c: 403: gCurrentTime.datetime.minute = rxBuf[7];
 11141  06E3  0022               	movlb	2	; select bank2
 11142  06E4  0856               	movf	(_rxBuf^(0+256)+7),w
 11143  06E5  0020               	movlb	0	; select bank0
 11144  06E6  00AA               	movwf	??_DecodeDATA
 11145  06E7  082A               	movf	??_DecodeDATA,w
 11146  06E8  0021               	movlb	1	; select bank1
 11147  06E9  00EA               	movwf	(_gCurrentTime^(0+128)+5)	;volatile
 11148                           
 11149                           ;ble.c: 404: gCurrentTime.datetime.second = rxBuf[8];
 11150  06EA  0022               	movlb	2	; select bank2
 11151  06EB  0857               	movf	(_rxBuf^(0+256)+8),w
 11152  06EC  0020               	movlb	0	; select bank0
 11153  06ED  00AA               	movwf	??_DecodeDATA
 11154  06EE  082A               	movf	??_DecodeDATA,w
 11155  06EF  0021               	movlb	1	; select bank1
 11156  06F0  00EB               	movwf	(_gCurrentTime^(0+128)+6)	;volatile
 11157                           
 11158                           ;ble.c: 405: gLedPara.fSta = 3;
 11159  06F1  3006               	movlw	6
 11160  06F2  0022               	movlb	2	; select bank2
 11161  06F3  04A0               	iorwf	_gLedPara^(0+256),f	;volatile
 11162                           
 11163                           ;ble.c: 406: indicateLedBle();
 11164  06F4  3194  248B  3183   	fcall	_indicateLedBle
 11165                           
 11166                           ;ble.c: 407: bleSendDeviceData();
 11167  06F7  318D  2506         	fcall	_bleSendDeviceData
 11168                           
 11169                           ;ble.c: 408: }
 11170                           ;ble.c: 409: break;
 11171  06F9  0008               	return
 11172  06FA                     l4126:	
 11173                           ;ble.c: 411: case 0x0F:
 11174                           
 11175                           
 11176                           ;ble.c: 412: if (rxBuf[0] ^ rxBuf[1] == rxBuf[2])
 11177  06FA  0022               	movlb	2	; select bank2
 11178  06FB  0850               	movf	(_rxBuf^(0+256)+1),w
 11179  06FC  0651               	xorwf	(_rxBuf^(0+256)+2),w
 11180  06FD  1D03               	btfss	3,2
 11181  06FE  2F01               	goto	u4550
 11182  06FF  3001               	movlw	1
 11183  0700  2F02               	goto	u4560
 11184  0701                     u4550:	
 11185  0701  3000               	movlw	0
 11186  0702                     u4560:	
 11187  0702  0020               	movlb	0	; select bank0
 11188  0703  00AA               	movwf	??_DecodeDATA
 11189  0704  01AB               	clrf	??_DecodeDATA+1
 11190  0705  082A               	movf	??_DecodeDATA,w
 11191  0706  0022               	movlb	2	; select bank2
 11192  0707  064F               	xorwf	_rxBuf^(0+256),w
 11193  0708  0020               	movlb	0	; select bank0
 11194  0709  00AC               	movwf	??_DecodeDATA+2
 11195  070A  082B               	movf	??_DecodeDATA+1,w
 11196  070B  00AD               	movwf	??_DecodeDATA+3
 11197  070C  082C               	movf	??_DecodeDATA+2,w
 11198  070D  042D               	iorwf	??_DecodeDATA+3,w
 11199  070E  1903               	btfsc	3,2
 11200  070F  0008               	return
 11201                           
 11202                           ;ble.c: 413: {
 11203                           ;ble.c: 414: gLedRunPara.find = 1;
 11204  0710  0021               	movlb	1	; select bank1
 11205  0711  1450               	bsf	_gLedRunPara^(0+128),0	;volatile
 11206                           
 11207                           ;ble.c: 415: gLedRunPara.nFlashCount = 3;
 11208  0712  3003               	movlw	3
 11209  0713  0020               	movlb	0	; select bank0
 11210  0714  00AA               	movwf	??_DecodeDATA
 11211  0715  082A               	movf	??_DecodeDATA,w
 11212  0716  0021               	movlb	1	; select bank1
 11213  0717  00D1               	movwf	(_gLedRunPara^(0+128)+1)	;volatile
 11214                           
 11215                           ;ble.c: 421: }
 11216                           
 11217                           ;ble.c: 420: break;
 11218                           
 11219                           ;ble.c: 419: default:
 11220                           
 11221                           ;ble.c: 416: }
 11222                           ;ble.c: 417: break;
 11223  0718  0008               	return
 11224  0719                     l4134:	
 11225  0719  0022               	movlb	2	; select bank2
 11226  071A  0850               	movf	(_rxBuf^(0+256)+1),w
 11227                           
 11228                           ; Switch size 1, requested type "space"
 11229                           ; Number of cases is 13, Range of values is 2 to 15
 11230                           ; switch strategies available:
 11231                           ; Name         Instructions Cycles
 11232                           ; direct_byte           37     9 (fixed)
 11233                           ; simple_byte           40    21 (average)
 11234                           ; jumptable            263     9 (fixed)
 11235                           ;	Chosen strategy is direct_byte
 11236  071B  3EFE               	addlw	-2
 11237  071C  1C03               	skipc
 11238  071D  0008               	return
 11239  071E  0084               	movwf	4
 11240  071F  300E               	movlw	14
 11241  0720  0204               	subwf	4,w
 11242  0721  1803               	skipnc
 11243  0722  0008               	return
 11244  0723  3190               	movlp	high S4492
 11245  0724  3504               	lslf	4,w
 11246  0725  3E6D               	addlw	low S4492
 11247  0726  0082               	movwf	2
 11248  0727                     l114:	
 11249  0727  0008               	return
 11250  0728                     __end_of_DecodeDATA:	
 11251                           
 11252                           	psect	swtext1
 11253  106D                     __pswtext1:	
 11254  106D                     S4492:	
 11255  106D  3183  2BF5         	ljmp	l3938
 11256  106F  3184  2C1F         	ljmp	l124
 11257  1071  3184  2C49         	ljmp	l130
 11258  1073  3184  2CAE         	ljmp	l4002
 11259  1075  3184  2CC7         	ljmp	l4006
 11260  1077  3185  2D1B         	ljmp	l4028
 11261  1079  3185  2D51         	ljmp	l147
 11262  107B  3185  2DC2         	ljmp	l151
 11263  107D  3187  2F27         	ljmp	l114
 11264  107F  3186  2E27         	ljmp	l155
 11265  1081  3186  2E81         	ljmp	l4106
 11266  1083  3186  2E9B         	ljmp	l4112
 11267  1085  3186  2EB4         	ljmp	l4116
 11268  1087  3186  2EFA         	ljmp	l4126
 11269                           
 11270                           	psect	text45
 11271  0957                     __ptext45:	
 11272 ;; *************** function _updatePWM *****************
 11273 ;; Defined at:
 11274 ;;		line 7 in file "src/led.c"
 11275 ;; Parameters:    Size  Location     Type
 11276 ;;		None
 11277 ;; Auto vars:     Size  Location     Type
 11278 ;;		None
 11279 ;; Return value:  Size  Location     Type
 11280 ;;                  1    wreg      void 
 11281 ;; Registers used:
 11282 ;;		wreg, status,2, status,0, pclath, cstack
 11283 ;; Tracked objects:
 11284 ;;		On entry : 0/0
 11285 ;;		On exit  : 0/0
 11286 ;;		Unchanged: 0/0
 11287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11292 ;;Total ram usage:        0 bytes
 11293 ;; Hardware stack levels used:    1
 11294 ;; Hardware stack levels required when called:    7
 11295 ;; This function calls:
 11296 ;;		_PWM1_LoadDutyValue
 11297 ;;		_PWM2_LoadDutyValue
 11298 ;;		_PWM3_LoadDutyValue
 11299 ;;		_PWM4_LoadDutyValue
 11300 ;; This function is called by:
 11301 ;;		_DecodeDATA
 11302 ;;		_autoRun
 11303 ;;		_updateDayBright
 11304 ;;		_updateNightBright
 11305 ;; This function uses a non-reentrant model
 11306 ;;
 11307                           
 11308                           
 11309                           ;psect for function _updatePWM
 11310  0957                     _updatePWM:	
 11311                           
 11312                           ;led.c: 9: PWM3_LoadDutyValue( gLedRunPara.nCurrentBrt[0] );
 11313                           
 11314                           ;incstack = 0
 11315                           ; Regs used in _updatePWM: [wreg+status,2+status,0+pclath+cstack]
 11316  0957  0021               	movlb	1	; select bank1
 11317  0958  085D               	movf	((_gLedRunPara+1)^(0+128)+12),w	;volatile
 11318  0959  0020               	movlb	0	; select bank0
 11319  095A  00A1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 11320  095B  0021               	movlb	1	; select bank1
 11321  095C  085C               	movf	(_gLedRunPara^(0+128)+12),w	;volatile
 11322  095D  0020               	movlb	0	; select bank0
 11323  095E  00A0               	movwf	PWM3_LoadDutyValue@dutyValue
 11324  095F  3197  27A2  3189   	fcall	_PWM3_LoadDutyValue
 11325                           
 11326                           ;led.c: 10: PWM2_LoadDutyValue( gLedRunPara.nCurrentBrt[1] );
 11327  0962  0021               	movlb	1	; select bank1
 11328  0963  085F               	movf	((_gLedRunPara+1)^(0+128)+14),w	;volatile
 11329  0964  0020               	movlb	0	; select bank0
 11330  0965  00A1               	movwf	PWM2_LoadDutyValue@dutyValue+1
 11331  0966  0021               	movlb	1	; select bank1
 11332  0967  085E               	movf	(_gLedRunPara^(0+128)+14),w	;volatile
 11333  0968  0020               	movlb	0	; select bank0
 11334  0969  00A0               	movwf	PWM2_LoadDutyValue@dutyValue
 11335  096A  3197  2783  3189   	fcall	_PWM2_LoadDutyValue
 11336                           
 11337                           ;led.c: 11: PWM4_LoadDutyValue( gLedRunPara.nCurrentBrt[2] );
 11338  096D  0021               	movlb	1	; select bank1
 11339  096E  0861               	movf	((_gLedRunPara+1)^(0+128)+16),w	;volatile
 11340  096F  0020               	movlb	0	; select bank0
 11341  0970  00A1               	movwf	PWM4_LoadDutyValue@dutyValue+1
 11342  0971  0021               	movlb	1	; select bank1
 11343  0972  0860               	movf	(_gLedRunPara^(0+128)+16),w	;volatile
 11344  0973  0020               	movlb	0	; select bank0
 11345  0974  00A0               	movwf	PWM4_LoadDutyValue@dutyValue
 11346  0975  3197  27C1  3189   	fcall	_PWM4_LoadDutyValue
 11347                           
 11348                           ;led.c: 12: PWM1_LoadDutyValue( gLedRunPara.nCurrentBrt[3] );
 11349  0978  0021               	movlb	1	; select bank1
 11350  0979  0863               	movf	((_gLedRunPara+1)^(0+128)+18),w	;volatile
 11351  097A  0020               	movlb	0	; select bank0
 11352  097B  00A1               	movwf	PWM1_LoadDutyValue@dutyValue+1
 11353  097C  0021               	movlb	1	; select bank1
 11354  097D  0862               	movf	(_gLedRunPara^(0+128)+18),w	;volatile
 11355  097E  0020               	movlb	0	; select bank0
 11356  097F  00A0               	movwf	PWM1_LoadDutyValue@dutyValue
 11357  0980  3197  2764         	fcall	_PWM1_LoadDutyValue
 11358  0982  0008               	return
 11359  0983                     __end_of_updatePWM:	
 11360                           
 11361                           	psect	text46
 11362  17C1                     __ptext46:	
 11363 ;; *************** function _PWM4_LoadDutyValue *****************
 11364 ;; Defined at:
 11365 ;;		line 126 in file "src/pwm.c"
 11366 ;; Parameters:    Size  Location     Type
 11367 ;;  dutyValue       2    0[BANK0 ] unsigned int 
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;		None
 11370 ;; Return value:  Size  Location     Type
 11371 ;;                  1    wreg      void 
 11372 ;; Registers used:
 11373 ;;		wreg, status,2
 11374 ;; Tracked objects:
 11375 ;;		On entry : 0/0
 11376 ;;		On exit  : 0/0
 11377 ;;		Unchanged: 0/0
 11378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11379 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11382 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;Total ram usage:        2 bytes
 11384 ;; Hardware stack levels used:    1
 11385 ;; Hardware stack levels required when called:    6
 11386 ;; This function calls:
 11387 ;;		Nothing
 11388 ;; This function is called by:
 11389 ;;		_updatePWM
 11390 ;;		_turnMaxLed
 11391 ;;		_turnOffLed
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           
 11396                           ;psect for function _PWM4_LoadDutyValue
 11397  17C1                     _PWM4_LoadDutyValue:	
 11398                           
 11399                           ;pwm.c: 128: dutyValue &= 0x03FF;
 11400                           
 11401                           ;incstack = 0
 11402                           ; Regs used in _PWM4_LoadDutyValue: [wreg+status,2]
 11403  17C1  30FF               	movlw	255
 11404  17C2  0020               	movlb	0	; select bank0
 11405  17C3  05A0               	andwf	PWM4_LoadDutyValue@dutyValue,f
 11406  17C4  3003               	movlw	3
 11407  17C5  05A1               	andwf	PWM4_LoadDutyValue@dutyValue+1,f
 11408                           
 11409                           ;pwm.c: 131: if(CCP4CONbits.CCP4FMT)
 11410  17C6  0026               	movlb	6	; select bank6
 11411  17C7  1E17               	btfss	23,4	;volatile
 11412  17C8  2FD7               	goto	l3014
 11413                           
 11414                           ;pwm.c: 132: {
 11415                           ;pwm.c: 133: dutyValue <<= 6;
 11416  17C9  3006               	movlw	6
 11417  17CA  0020               	movlb	0	; select bank0
 11418  17CB                     u2705:	
 11419  17CB  35A0               	lslf	PWM4_LoadDutyValue@dutyValue,f
 11420  17CC  0DA1               	rlf	PWM4_LoadDutyValue@dutyValue+1,f
 11421  17CD  0B89               	decfsz	9,f
 11422  17CE  2FCB               	goto	u2705
 11423                           
 11424                           ;pwm.c: 134: CCPR4H = dutyValue >> 8;
 11425  17CF  0821               	movf	PWM4_LoadDutyValue@dutyValue+1,w
 11426  17D0  0026               	movlb	6	; select bank6
 11427  17D1  0096               	movwf	22	;volatile
 11428                           
 11429                           ;pwm.c: 135: CCPR4L = dutyValue;
 11430  17D2  0020               	movlb	0	; select bank0
 11431  17D3  0820               	movf	PWM4_LoadDutyValue@dutyValue,w
 11432  17D4  0026               	movlb	6	; select bank6
 11433  17D5  0095               	movwf	21	;volatile
 11434                           
 11435                           ;pwm.c: 136: }
 11436  17D6  0008               	return
 11437  17D7                     l3014:	
 11438                           
 11439                           ;pwm.c: 137: else
 11440                           ;pwm.c: 138: {
 11441                           ;pwm.c: 139: CCPR4H = dutyValue >> 8;
 11442  17D7  0020               	movlb	0	; select bank0
 11443  17D8  0821               	movf	PWM4_LoadDutyValue@dutyValue+1,w
 11444  17D9  0026               	movlb	6	; select bank6
 11445  17DA  0096               	movwf	22	;volatile
 11446                           
 11447                           ;pwm.c: 140: CCPR4L = dutyValue;
 11448  17DB  0020               	movlb	0	; select bank0
 11449  17DC  0820               	movf	PWM4_LoadDutyValue@dutyValue,w
 11450  17DD  0026               	movlb	6	; select bank6
 11451  17DE  0095               	movwf	21	;volatile
 11452  17DF  0008               	return
 11453  17E0                     __end_of_PWM4_LoadDutyValue:	
 11454                           
 11455                           	psect	text47
 11456  17A2                     __ptext47:	
 11457 ;; *************** function _PWM3_LoadDutyValue *****************
 11458 ;; Defined at:
 11459 ;;		line 91 in file "src/pwm.c"
 11460 ;; Parameters:    Size  Location     Type
 11461 ;;  dutyValue       2    0[BANK0 ] unsigned int 
 11462 ;; Auto vars:     Size  Location     Type
 11463 ;;		None
 11464 ;; Return value:  Size  Location     Type
 11465 ;;                  1    wreg      void 
 11466 ;; Registers used:
 11467 ;;		wreg, status,2
 11468 ;; Tracked objects:
 11469 ;;		On entry : 0/0
 11470 ;;		On exit  : 0/0
 11471 ;;		Unchanged: 0/0
 11472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11473 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11477 ;;Total ram usage:        2 bytes
 11478 ;; Hardware stack levels used:    1
 11479 ;; Hardware stack levels required when called:    6
 11480 ;; This function calls:
 11481 ;;		Nothing
 11482 ;; This function is called by:
 11483 ;;		_updatePWM
 11484 ;;		_turnMaxLed
 11485 ;;		_turnOffLed
 11486 ;; This function uses a non-reentrant model
 11487 ;;
 11488                           
 11489                           
 11490                           ;psect for function _PWM3_LoadDutyValue
 11491  17A2                     _PWM3_LoadDutyValue:	
 11492                           
 11493                           ;pwm.c: 93: dutyValue &= 0x03FF;
 11494                           
 11495                           ;incstack = 0
 11496                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2]
 11497  17A2  30FF               	movlw	255
 11498  17A3  0020               	movlb	0	; select bank0
 11499  17A4  05A0               	andwf	PWM3_LoadDutyValue@dutyValue,f
 11500  17A5  3003               	movlw	3
 11501  17A6  05A1               	andwf	PWM3_LoadDutyValue@dutyValue+1,f
 11502                           
 11503                           ;pwm.c: 96: if(CCP3CONbits.CCP3FMT)
 11504  17A7  0026               	movlb	6	; select bank6
 11505  17A8  1E13               	btfss	19,4	;volatile
 11506  17A9  2FB8               	goto	l2986
 11507                           
 11508                           ;pwm.c: 97: {
 11509                           ;pwm.c: 98: dutyValue <<= 6;
 11510  17AA  3006               	movlw	6
 11511  17AB  0020               	movlb	0	; select bank0
 11512  17AC                     u2665:	
 11513  17AC  35A0               	lslf	PWM3_LoadDutyValue@dutyValue,f
 11514  17AD  0DA1               	rlf	PWM3_LoadDutyValue@dutyValue+1,f
 11515  17AE  0B89               	decfsz	9,f
 11516  17AF  2FAC               	goto	u2665
 11517                           
 11518                           ;pwm.c: 99: CCPR3H = dutyValue >> 8;
 11519  17B0  0821               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 11520  17B1  0026               	movlb	6	; select bank6
 11521  17B2  0092               	movwf	18	;volatile
 11522                           
 11523                           ;pwm.c: 100: CCPR3L = dutyValue;
 11524  17B3  0020               	movlb	0	; select bank0
 11525  17B4  0820               	movf	PWM3_LoadDutyValue@dutyValue,w
 11526  17B5  0026               	movlb	6	; select bank6
 11527  17B6  0091               	movwf	17	;volatile
 11528                           
 11529                           ;pwm.c: 101: }
 11530  17B7  0008               	return
 11531  17B8                     l2986:	
 11532                           
 11533                           ;pwm.c: 102: else
 11534                           ;pwm.c: 103: {
 11535                           ;pwm.c: 104: CCPR3H = dutyValue >> 8;
 11536  17B8  0020               	movlb	0	; select bank0
 11537  17B9  0821               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 11538  17BA  0026               	movlb	6	; select bank6
 11539  17BB  0092               	movwf	18	;volatile
 11540                           
 11541                           ;pwm.c: 105: CCPR3L = dutyValue;
 11542  17BC  0020               	movlb	0	; select bank0
 11543  17BD  0820               	movf	PWM3_LoadDutyValue@dutyValue,w
 11544  17BE  0026               	movlb	6	; select bank6
 11545  17BF  0091               	movwf	17	;volatile
 11546  17C0  0008               	return
 11547  17C1                     __end_of_PWM3_LoadDutyValue:	
 11548                           
 11549                           	psect	text48
 11550  1783                     __ptext48:	
 11551 ;; *************** function _PWM2_LoadDutyValue *****************
 11552 ;; Defined at:
 11553 ;;		line 56 in file "src/pwm.c"
 11554 ;; Parameters:    Size  Location     Type
 11555 ;;  dutyValue       2    0[BANK0 ] unsigned int 
 11556 ;; Auto vars:     Size  Location     Type
 11557 ;;		None
 11558 ;; Return value:  Size  Location     Type
 11559 ;;                  1    wreg      void 
 11560 ;; Registers used:
 11561 ;;		wreg, status,2
 11562 ;; Tracked objects:
 11563 ;;		On entry : 0/0
 11564 ;;		On exit  : 0/0
 11565 ;;		Unchanged: 0/0
 11566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11567 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;Total ram usage:        2 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:    6
 11574 ;; This function calls:
 11575 ;;		Nothing
 11576 ;; This function is called by:
 11577 ;;		_updatePWM
 11578 ;;		_turnMaxLed
 11579 ;;		_turnOffLed
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           
 11584                           ;psect for function _PWM2_LoadDutyValue
 11585  1783                     _PWM2_LoadDutyValue:	
 11586                           
 11587                           ;pwm.c: 58: dutyValue &= 0x03FF;
 11588                           
 11589                           ;incstack = 0
 11590                           ; Regs used in _PWM2_LoadDutyValue: [wreg+status,2]
 11591  1783  30FF               	movlw	255
 11592  1784  0020               	movlb	0	; select bank0
 11593  1785  05A0               	andwf	PWM2_LoadDutyValue@dutyValue,f
 11594  1786  3003               	movlw	3
 11595  1787  05A1               	andwf	PWM2_LoadDutyValue@dutyValue+1,f
 11596                           
 11597                           ;pwm.c: 61: if(CCP2CONbits.CCP2FMT)
 11598  1788  0025               	movlb	5	; select bank5
 11599  1789  1E17               	btfss	23,4	;volatile
 11600  178A  2F99               	goto	l3000
 11601                           
 11602                           ;pwm.c: 62: {
 11603                           ;pwm.c: 63: dutyValue <<= 6;
 11604  178B  3006               	movlw	6
 11605  178C  0020               	movlb	0	; select bank0
 11606  178D                     u2685:	
 11607  178D  35A0               	lslf	PWM2_LoadDutyValue@dutyValue,f
 11608  178E  0DA1               	rlf	PWM2_LoadDutyValue@dutyValue+1,f
 11609  178F  0B89               	decfsz	9,f
 11610  1790  2F8D               	goto	u2685
 11611                           
 11612                           ;pwm.c: 64: CCPR2H = dutyValue >> 8;
 11613  1791  0821               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 11614  1792  0025               	movlb	5	; select bank5
 11615  1793  0096               	movwf	22	;volatile
 11616                           
 11617                           ;pwm.c: 65: CCPR2L = dutyValue;
 11618  1794  0020               	movlb	0	; select bank0
 11619  1795  0820               	movf	PWM2_LoadDutyValue@dutyValue,w
 11620  1796  0025               	movlb	5	; select bank5
 11621  1797  0095               	movwf	21	;volatile
 11622                           
 11623                           ;pwm.c: 66: }
 11624  1798  0008               	return
 11625  1799                     l3000:	
 11626                           
 11627                           ;pwm.c: 67: else
 11628                           ;pwm.c: 68: {
 11629                           ;pwm.c: 69: CCPR2H = dutyValue >> 8;
 11630  1799  0020               	movlb	0	; select bank0
 11631  179A  0821               	movf	PWM2_LoadDutyValue@dutyValue+1,w
 11632  179B  0025               	movlb	5	; select bank5
 11633  179C  0096               	movwf	22	;volatile
 11634                           
 11635                           ;pwm.c: 70: CCPR2L = dutyValue;
 11636  179D  0020               	movlb	0	; select bank0
 11637  179E  0820               	movf	PWM2_LoadDutyValue@dutyValue,w
 11638  179F  0025               	movlb	5	; select bank5
 11639  17A0  0095               	movwf	21	;volatile
 11640  17A1  0008               	return
 11641  17A2                     __end_of_PWM2_LoadDutyValue:	
 11642                           
 11643                           	psect	text49
 11644  1764                     __ptext49:	
 11645 ;; *************** function _PWM1_LoadDutyValue *****************
 11646 ;; Defined at:
 11647 ;;		line 21 in file "src/pwm.c"
 11648 ;; Parameters:    Size  Location     Type
 11649 ;;  dutyValue       2    0[BANK0 ] unsigned int 
 11650 ;; Auto vars:     Size  Location     Type
 11651 ;;		None
 11652 ;; Return value:  Size  Location     Type
 11653 ;;                  1    wreg      void 
 11654 ;; Registers used:
 11655 ;;		wreg, status,2
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11661 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;Total ram usage:        2 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    6
 11668 ;; This function calls:
 11669 ;;		Nothing
 11670 ;; This function is called by:
 11671 ;;		_updatePWM
 11672 ;;		_turnMaxLed
 11673 ;;		_turnOffLed
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           
 11678                           ;psect for function _PWM1_LoadDutyValue
 11679  1764                     _PWM1_LoadDutyValue:	
 11680                           
 11681                           ;pwm.c: 23: dutyValue &= 0x03FF;
 11682                           
 11683                           ;incstack = 0
 11684                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2]
 11685  1764  30FF               	movlw	255
 11686  1765  0020               	movlb	0	; select bank0
 11687  1766  05A0               	andwf	PWM1_LoadDutyValue@dutyValue,f
 11688  1767  3003               	movlw	3
 11689  1768  05A1               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 11690                           
 11691                           ;pwm.c: 26: if(CCP1CONbits.CCP1FMT)
 11692  1769  0025               	movlb	5	; select bank5
 11693  176A  1E13               	btfss	19,4	;volatile
 11694  176B  2F7A               	goto	l3028
 11695                           
 11696                           ;pwm.c: 27: {
 11697                           ;pwm.c: 28: dutyValue <<= 6;
 11698  176C  3006               	movlw	6
 11699  176D  0020               	movlb	0	; select bank0
 11700  176E                     u2725:	
 11701  176E  35A0               	lslf	PWM1_LoadDutyValue@dutyValue,f
 11702  176F  0DA1               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 11703  1770  0B89               	decfsz	9,f
 11704  1771  2F6E               	goto	u2725
 11705                           
 11706                           ;pwm.c: 29: CCPR1H = dutyValue >> 8;
 11707  1772  0821               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 11708  1773  0025               	movlb	5	; select bank5
 11709  1774  0092               	movwf	18	;volatile
 11710                           
 11711                           ;pwm.c: 30: CCPR1L = dutyValue;
 11712  1775  0020               	movlb	0	; select bank0
 11713  1776  0820               	movf	PWM1_LoadDutyValue@dutyValue,w
 11714  1777  0025               	movlb	5	; select bank5
 11715  1778  0091               	movwf	17	;volatile
 11716                           
 11717                           ;pwm.c: 31: }
 11718  1779  0008               	return
 11719  177A                     l3028:	
 11720                           
 11721                           ;pwm.c: 32: else
 11722                           ;pwm.c: 33: {
 11723                           ;pwm.c: 34: CCPR1H = dutyValue >> 8;
 11724  177A  0020               	movlb	0	; select bank0
 11725  177B  0821               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 11726  177C  0025               	movlb	5	; select bank5
 11727  177D  0092               	movwf	18	;volatile
 11728                           
 11729                           ;pwm.c: 35: CCPR1L = dutyValue;
 11730  177E  0020               	movlb	0	; select bank0
 11731  177F  0820               	movf	PWM1_LoadDutyValue@dutyValue,w
 11732  1780  0025               	movlb	5	; select bank5
 11733  1781  0091               	movwf	17	;volatile
 11734  1782  0008               	return
 11735  1783                     __end_of_PWM1_LoadDutyValue:	
 11736                           
 11737                           	psect	text50
 11738  166F                     __ptext50:	
 11739 ;; *************** function _turnOnLedRamp *****************
 11740 ;; Defined at:
 11741 ;;		line 119 in file "src/led.c"
 11742 ;; Parameters:    Size  Location     Type
 11743 ;;		None
 11744 ;; Auto vars:     Size  Location     Type
 11745 ;;  i               1    1[BANK0 ] unsigned char 
 11746 ;; Return value:  Size  Location     Type
 11747 ;;                  1    wreg      void 
 11748 ;; Registers used:
 11749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11750 ;; Tracked objects:
 11751 ;;		On entry : 0/0
 11752 ;;		On exit  : 0/0
 11753 ;;		Unchanged: 0/0
 11754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;Total ram usage:        2 bytes
 11760 ;; Hardware stack levels used:    1
 11761 ;; Hardware stack levels required when called:    6
 11762 ;; This function calls:
 11763 ;;		Nothing
 11764 ;; This function is called by:
 11765 ;;		_DecodeDATA
 11766 ;;		_initLedStatus
 11767 ;; This function uses a non-reentrant model
 11768 ;;
 11769                           
 11770                           
 11771                           ;psect for function _turnOnLedRamp
 11772  166F                     _turnOnLedRamp:	
 11773                           
 11774                           ;led.c: 121: for (unsigned char i = 0; i < 4; i++)
 11775                           
 11776                           ;incstack = 0
 11777                           ; Regs used in _turnOnLedRamp: [wreg-fsr1h+status,2+status,0]
 11778  166F  0020               	movlb	0	; select bank0
 11779  1670  01A1               	clrf	turnOnLedRamp@i
 11780  1671                     L8:	
 11781  1671  3004               	movlw	4
 11782  1672  0221               	subwf	turnOnLedRamp@i,w
 11783  1673  1803               	btfsc	3,0
 11784  1674  0008               	return
 11785                           
 11786                           ;led.c: 122: {
 11787                           ;led.c: 123: gLedRunPara.nTargetBrt[i] = gLedPara.mPara.manualPara.nBrt[i];
 11788  1675  3521               	lslf	turnOnLedRamp@i,w
 11789  1676  3E02               	addlw	2
 11790  1677  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 11791  1678  0086               	movwf	6
 11792  1679  3001               	movlw	1	; select bank2/3
 11793  167A  0087               	movwf	7
 11794  167B  3521               	lslf	turnOnLedRamp@i,w
 11795  167C  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
 11796  167D  0084               	movwf	4
 11797  167E  0185               	clrf	5
 11798  167F  3F40               	moviw [0]fsr1
 11799  1680  3F80               	movwi [0]fsr0
 11800  1681  3F41               	moviw [1]fsr1
 11801  1682  3F81               	movwi [1]fsr0
 11802  1683  3001               	movlw	1
 11803  1684  00A0               	movwf	??_turnOnLedRamp
 11804  1685  0820               	movf	??_turnOnLedRamp,w
 11805  1686  07A1               	addwf	turnOnLedRamp@i,f
 11806  1687  2E71               	goto	L8
 11807  1688                     __end_of_turnOnLedRamp:	
 11808                           
 11809                           	psect	text51
 11810  155C                     __ptext51:	
 11811 ;; *************** function _turnOffLedRamp *****************
 11812 ;; Defined at:
 11813 ;;		line 130 in file "src/led.c"
 11814 ;; Parameters:    Size  Location     Type
 11815 ;;		None
 11816 ;; Auto vars:     Size  Location     Type
 11817 ;;  i               1    1[BANK0 ] unsigned char 
 11818 ;; Return value:  Size  Location     Type
 11819 ;;                  1    wreg      void 
 11820 ;; Registers used:
 11821 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11822 ;; Tracked objects:
 11823 ;;		On entry : 0/0
 11824 ;;		On exit  : 0/0
 11825 ;;		Unchanged: 0/0
 11826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11830 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;Total ram usage:        2 bytes
 11832 ;; Hardware stack levels used:    1
 11833 ;; Hardware stack levels required when called:    6
 11834 ;; This function calls:
 11835 ;;		Nothing
 11836 ;; This function is called by:
 11837 ;;		_DecodeDATA
 11838 ;;		_initLedStatus
 11839 ;; This function uses a non-reentrant model
 11840 ;;
 11841                           
 11842                           
 11843                           ;psect for function _turnOffLedRamp
 11844  155C                     _turnOffLedRamp:	
 11845                           
 11846                           ;led.c: 132: for (unsigned char i = 0; i < 4; i++)
 11847                           
 11848                           ;incstack = 0
 11849                           ; Regs used in _turnOffLedRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
 11850  155C  0020               	movlb	0	; select bank0
 11851  155D  01A1               	clrf	turnOffLedRamp@i
 11852  155E                     L9:	
 11853  155E  3004               	movlw	4
 11854  155F  0221               	subwf	turnOffLedRamp@i,w
 11855  1560  1803               	btfsc	3,0
 11856  1561  0008               	return
 11857                           
 11858                           ;led.c: 133: {
 11859                           ;led.c: 134: gLedRunPara.nTargetBrt[i] = 0;
 11860  1562  3521               	lslf	turnOffLedRamp@i,w
 11861  1563  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
 11862  1564  0086               	movwf	6
 11863  1565  0187               	clrf	7
 11864  1566  3000               	movlw	0
 11865  1567  3FC0               	movwi [0]fsr1
 11866  1568  3FC1               	movwi [1]fsr1
 11867  1569  3001               	movlw	1
 11868  156A  00A0               	movwf	??_turnOffLedRamp
 11869  156B  0820               	movf	??_turnOffLedRamp,w
 11870  156C  07A1               	addwf	turnOffLedRamp@i,f
 11871  156D  2D5E               	goto	L9
 11872  156E                     __end_of_turnOffLedRamp:	
 11873                           
 11874                           	psect	text52
 11875  148B                     __ptext52:	
 11876 ;; *************** function _indicateLedBle *****************
 11877 ;; Defined at:
 11878 ;;		line 355 in file "src/led.c"
 11879 ;; Parameters:    Size  Location     Type
 11880 ;;		None
 11881 ;; Auto vars:     Size  Location     Type
 11882 ;;		None
 11883 ;; Return value:  Size  Location     Type
 11884 ;;                  1    wreg      void 
 11885 ;; Registers used:
 11886 ;;		None
 11887 ;; Tracked objects:
 11888 ;;		On entry : 0/0
 11889 ;;		On exit  : 0/0
 11890 ;;		Unchanged: 0/0
 11891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11896 ;;Total ram usage:        0 bytes
 11897 ;; Hardware stack levels used:    1
 11898 ;; Hardware stack levels required when called:    6
 11899 ;; This function calls:
 11900 ;;		Nothing
 11901 ;; This function is called by:
 11902 ;;		_DecodeDATA
 11903 ;;		_initLedStatus
 11904 ;; This function uses a non-reentrant model
 11905 ;;
 11906                           
 11907                           
 11908                           ;psect for function _indicateLedBle
 11909  148B                     _indicateLedBle:	
 11910                           
 11911                           ;incstack = 0
 11912                           ; Regs used in _indicateLedBle: []
 11913                           ;led.c: 357: do { LATBbits.LATB6 = 1; } while(0);
 11914  148B  0022               	movlb	2	; select bank2
 11915  148C  170D               	bsf	13,6	;volatile
 11916                           
 11917                           ;led.c: 358: do { LATCbits.LATC7 = 0; } while(0);
 11918  148D  138E               	bcf	14,7	;volatile
 11919                           
 11920                           ;led.c: 359: do { LATBbits.LATB7 = 1; } while(0);
 11921  148E  178D               	bsf	13,7	;volatile
 11922  148F  0008               	return
 11923  1490                     __end_of_indicateLedBle:	
 11924                           
 11925                           	psect	text53
 11926  0AC2                     __ptext53:	
 11927 ;; *************** function _bleSendDeviceTime *****************
 11928 ;; Defined at:
 11929 ;;		line 114 in file "src/ble.c"
 11930 ;; Parameters:    Size  Location     Type
 11931 ;;		None
 11932 ;; Auto vars:     Size  Location     Type
 11933 ;;  i               1    9[BANK0 ] unsigned char 
 11934 ;;  len             1    8[BANK0 ] unsigned char 
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  1    wreg      void 
 11937 ;; Registers used:
 11938 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11939 ;; Tracked objects:
 11940 ;;		On entry : 0/0
 11941 ;;		On exit  : 0/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;Total ram usage:        4 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; Hardware stack levels required when called:    8
 11951 ;; This function calls:
 11952 ;;		_bleSendData
 11953 ;;		_getCRC
 11954 ;; This function is called by:
 11955 ;;		_DecodeDATA
 11956 ;; This function uses a non-reentrant model
 11957 ;;
 11958                           
 11959                           
 11960                           ;psect for function _bleSendDeviceTime
 11961  0AC2                     _bleSendDeviceTime:	
 11962                           
 11963                           ;ble.c: 116: unsigned char len = sizeof(gCurrentTime.array);
 11964                           
 11965                           ;incstack = 0
 11966                           ; Regs used in _bleSendDeviceTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11967  0AC2  3007               	movlw	7
 11968  0AC3  0020               	movlb	0	; select bank0
 11969  0AC4  00A6               	movwf	??_bleSendDeviceTime
 11970  0AC5  0826               	movf	??_bleSendDeviceTime,w
 11971  0AC6  00A8               	movwf	bleSendDeviceTime@len
 11972                           
 11973                           ;ble.c: 117: txBuf[0] = 0x68;
 11974  0AC7  3068               	movlw	104
 11975  0AC8  00A6               	movwf	??_bleSendDeviceTime
 11976  0AC9  0826               	movf	??_bleSendDeviceTime,w
 11977  0ACA  0023               	movlb	3	; select bank3
 11978  0ACB  00A0               	movwf	_txBuf^(0+384)
 11979                           
 11980                           ;ble.c: 118: txBuf[1] = 0x0D;
 11981  0ACC  300D               	movlw	13
 11982  0ACD  0020               	movlb	0	; select bank0
 11983  0ACE  00A6               	movwf	??_bleSendDeviceTime
 11984  0ACF  0826               	movf	??_bleSendDeviceTime,w
 11985  0AD0  0023               	movlb	3	; select bank3
 11986  0AD1  00A1               	movwf	(_txBuf^(0+384)+1)
 11987                           
 11988                           ;ble.c: 119: for (unsigned char i = 0; i < len; i++)
 11989  0AD2  0020               	movlb	0	; select bank0
 11990  0AD3  01A9               	clrf	bleSendDeviceTime@i
 11991  0AD4                     l3362:	
 11992  0AD4  0828               	movf	bleSendDeviceTime@len,w
 11993  0AD5  0229               	subwf	bleSendDeviceTime@i,w
 11994  0AD6  1803               	btfsc	3,0
 11995  0AD7  2AEB               	goto	l3364
 11996                           
 11997                           ;ble.c: 120: {
 11998                           ;ble.c: 121: txBuf[2+i] = gCurrentTime.array[i];
 11999  0AD8  0829               	movf	bleSendDeviceTime@i,w
 12000  0AD9  3EE5               	addlw	(low (_gCurrentTime| 0))& (0+255)
 12001  0ADA  0086               	movwf	6
 12002  0ADB  0187               	clrf	7
 12003  0ADC  0801               	movf	1,w
 12004  0ADD  00A6               	movwf	??_bleSendDeviceTime
 12005  0ADE  0829               	movf	bleSendDeviceTime@i,w
 12006  0ADF  3E02               	addlw	2
 12007  0AE0  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 12008  0AE1  0086               	movwf	6
 12009  0AE2  3001               	movlw	1	; select bank3/4
 12010  0AE3  0087               	movwf	7
 12011  0AE4  0826               	movf	??_bleSendDeviceTime,w
 12012  0AE5  0081               	movwf	1
 12013  0AE6  3001               	movlw	1
 12014  0AE7  00A6               	movwf	??_bleSendDeviceTime
 12015  0AE8  0826               	movf	??_bleSendDeviceTime,w
 12016  0AE9  07A9               	addwf	bleSendDeviceTime@i,f
 12017  0AEA  2AD4               	goto	l3362
 12018  0AEB                     l3364:	
 12019                           
 12020                           ;ble.c: 122: }
 12021                           ;ble.c: 123: txBuf[9] = getCRC(txBuf, len+2);
 12022  0AEB  0828               	movf	bleSendDeviceTime@len,w
 12023  0AEC  3E02               	addlw	2
 12024  0AED  00A6               	movwf	??_bleSendDeviceTime
 12025  0AEE  0826               	movf	??_bleSendDeviceTime,w
 12026  0AEF  00A0               	movwf	getCRC@len
 12027  0AF0  30A0               	movlw	(low (_txBuf| (0+256)))& (0+255)
 12028  0AF1  3196  2688  318A   	fcall	_getCRC
 12029  0AF4  0020               	movlb	0	; select bank0
 12030  0AF5  00A7               	movwf	??_bleSendDeviceTime+1
 12031  0AF6  0827               	movf	??_bleSendDeviceTime+1,w
 12032  0AF7  0023               	movlb	3	; select bank3
 12033  0AF8  00A9               	movwf	(_txBuf^(0+384)+9)
 12034                           
 12035                           ;ble.c: 124: bleSendData(txBuf, len+3);
 12036  0AF9  0020               	movlb	0	; select bank0
 12037  0AFA  0828               	movf	bleSendDeviceTime@len,w
 12038  0AFB  3E03               	addlw	3
 12039  0AFC  00A6               	movwf	??_bleSendDeviceTime
 12040  0AFD  0826               	movf	??_bleSendDeviceTime,w
 12041  0AFE  00A1               	movwf	bleSendData@len
 12042  0AFF  30A0               	movlw	(low (_txBuf| (0+256)))& (0+255)
 12043  0B00  3189  2102         	fcall	_bleSendData
 12044  0B02  0008               	return
 12045  0B03                     __end_of_bleSendDeviceTime:	
 12046                           
 12047                           	psect	text54
 12048  0D06                     __ptext54:	
 12049 ;; *************** function _bleSendDeviceData *****************
 12050 ;; Defined at:
 12051 ;;		line 87 in file "src/ble.c"
 12052 ;; Parameters:    Size  Location     Type
 12053 ;;		None
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;  i               1    9[BANK0 ] unsigned char 
 12056 ;;  len             1    8[BANK0 ] unsigned char 
 12057 ;; Return value:  Size  Location     Type
 12058 ;;                  1    wreg      void 
 12059 ;; Registers used:
 12060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12061 ;; Tracked objects:
 12062 ;;		On entry : 0/0
 12063 ;;		On exit  : 0/0
 12064 ;;		Unchanged: 0/0
 12065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;Total ram usage:        4 bytes
 12071 ;; Hardware stack levels used:    1
 12072 ;; Hardware stack levels required when called:    8
 12073 ;; This function calls:
 12074 ;;		_bleSendData
 12075 ;;		_getCRC
 12076 ;; This function is called by:
 12077 ;;		_DecodeDATA
 12078 ;; This function uses a non-reentrant model
 12079 ;;
 12080                           
 12081                           
 12082                           ;psect for function _bleSendDeviceData
 12083  0D06                     _bleSendDeviceData:	
 12084                           
 12085                           ;ble.c: 89: unsigned char i;
 12086                           ;ble.c: 90: unsigned char len;
 12087                           ;ble.c: 91: txBuf[0] = 0x68;
 12088                           
 12089                           ;incstack = 0
 12090                           ; Regs used in _bleSendDeviceData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12091  0D06  3068               	movlw	104
 12092  0D07  0020               	movlb	0	; select bank0
 12093  0D08  00A6               	movwf	??_bleSendDeviceData
 12094  0D09  0826               	movf	??_bleSendDeviceData,w
 12095  0D0A  0023               	movlb	3	; select bank3
 12096  0D0B  00A0               	movwf	_txBuf^(0+384)
 12097                           
 12098                           ;ble.c: 92: txBuf[1] = 0x05;
 12099  0D0C  3005               	movlw	5
 12100  0D0D  0020               	movlb	0	; select bank0
 12101  0D0E  00A6               	movwf	??_bleSendDeviceData
 12102  0D0F  0826               	movf	??_bleSendDeviceData,w
 12103  0D10  0023               	movlb	3	; select bank3
 12104  0D11  00A1               	movwf	(_txBuf^(0+384)+1)
 12105                           
 12106                           ;ble.c: 93: txBuf[2] = gLedPara.fAuto;
 12107  0D12  3000               	movlw	0
 12108  0D13  0022               	movlb	2	; select bank2
 12109  0D14  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 12110  0D15  3001               	movlw	1
 12111  0D16  0023               	movlb	3	; select bank3
 12112  0D17  00A2               	movwf	(_txBuf^(0+384)+2)
 12113                           
 12114                           ;ble.c: 94: if (gLedPara.fAuto)
 12115  0D18  0022               	movlb	2	; select bank2
 12116  0D19  1C20               	btfss	_gLedPara^(0+256),0	;volatile
 12117  0D1A  2D39               	goto	l3342
 12118                           
 12119                           ;ble.c: 95: {
 12120                           ;ble.c: 96: len = sizeof(gLedPara.aPara.array);
 12121  0D1B  3010               	movlw	16
 12122  0D1C  0020               	movlb	0	; select bank0
 12123  0D1D  00A6               	movwf	??_bleSendDeviceData
 12124  0D1E  0826               	movf	??_bleSendDeviceData,w
 12125  0D1F  00A8               	movwf	bleSendDeviceData@len
 12126                           
 12127                           ;ble.c: 97: for (i = 0; i < len; i++)
 12128  0D20  01A9               	clrf	bleSendDeviceData@i
 12129  0D21                     l3340:	
 12130  0D21  0828               	movf	bleSendDeviceData@len,w
 12131  0D22  0229               	subwf	bleSendDeviceData@i,w
 12132  0D23  1803               	btfsc	3,0
 12133  0D24  2D57               	goto	l3352
 12134                           
 12135                           ;ble.c: 98: {
 12136                           ;ble.c: 99: txBuf[3+i] = gLedPara.aPara.array[i];
 12137  0D25  0829               	movf	bleSendDeviceData@i,w
 12138  0D26  3E3B               	addlw	(low ((_gLedPara| (0+256)+27)))& (0+255)
 12139  0D27  0086               	movwf	6
 12140  0D28  3001               	movlw	1	; select bank2/3
 12141  0D29  0087               	movwf	7
 12142  0D2A  0801               	movf	1,w
 12143  0D2B  00A6               	movwf	??_bleSendDeviceData
 12144  0D2C  0829               	movf	bleSendDeviceData@i,w
 12145  0D2D  3E03               	addlw	3
 12146  0D2E  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 12147  0D2F  0086               	movwf	6
 12148  0D30  3001               	movlw	1	; select bank3/4
 12149  0D31  0087               	movwf	7
 12150  0D32  0826               	movf	??_bleSendDeviceData,w
 12151  0D33  0081               	movwf	1
 12152  0D34  3001               	movlw	1
 12153  0D35  00A6               	movwf	??_bleSendDeviceData
 12154  0D36  0826               	movf	??_bleSendDeviceData,w
 12155  0D37  07A9               	addwf	bleSendDeviceData@i,f
 12156  0D38  2D21               	goto	l3340
 12157  0D39                     l3342:	
 12158                           ;ble.c: 100: }
 12159                           ;ble.c: 101: }
 12160                           
 12161                           
 12162                           ;ble.c: 102: else
 12163                           ;ble.c: 103: {
 12164                           ;ble.c: 104: len = sizeof(gLedPara.mPara.array);
 12165  0D39  301A               	movlw	26
 12166  0D3A  0020               	movlb	0	; select bank0
 12167  0D3B  00A6               	movwf	??_bleSendDeviceData
 12168  0D3C  0826               	movf	??_bleSendDeviceData,w
 12169  0D3D  00A8               	movwf	bleSendDeviceData@len
 12170                           
 12171                           ;ble.c: 105: for (i = 0; i < len; i++)
 12172  0D3E  01A9               	clrf	bleSendDeviceData@i
 12173  0D3F                     l3350:	
 12174  0D3F  0828               	movf	bleSendDeviceData@len,w
 12175  0D40  0229               	subwf	bleSendDeviceData@i,w
 12176  0D41  1803               	btfsc	3,0
 12177  0D42  2D57               	goto	l3352
 12178                           
 12179                           ;ble.c: 106: {
 12180                           ;ble.c: 107: txBuf[3+i] = gLedPara.mPara.array[i];
 12181  0D43  0829               	movf	bleSendDeviceData@i,w
 12182  0D44  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 12183  0D45  0086               	movwf	6
 12184  0D46  3001               	movlw	1	; select bank2/3
 12185  0D47  0087               	movwf	7
 12186  0D48  0801               	movf	1,w
 12187  0D49  00A6               	movwf	??_bleSendDeviceData
 12188  0D4A  0829               	movf	bleSendDeviceData@i,w
 12189  0D4B  3E03               	addlw	3
 12190  0D4C  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 12191  0D4D  0086               	movwf	6
 12192  0D4E  3001               	movlw	1	; select bank3/4
 12193  0D4F  0087               	movwf	7
 12194  0D50  0826               	movf	??_bleSendDeviceData,w
 12195  0D51  0081               	movwf	1
 12196  0D52  3001               	movlw	1
 12197  0D53  00A6               	movwf	??_bleSendDeviceData
 12198  0D54  0826               	movf	??_bleSendDeviceData,w
 12199  0D55  07A9               	addwf	bleSendDeviceData@i,f
 12200  0D56  2D3F               	goto	l3350
 12201  0D57                     l3352:	
 12202                           
 12203                           ;ble.c: 108: }
 12204                           ;ble.c: 109: }
 12205                           ;ble.c: 110: txBuf[len+3] = getCRC(txBuf, len+3);
 12206  0D57  0828               	movf	bleSendDeviceData@len,w
 12207  0D58  3E03               	addlw	3
 12208  0D59  00A6               	movwf	??_bleSendDeviceData
 12209  0D5A  0826               	movf	??_bleSendDeviceData,w
 12210  0D5B  00A0               	movwf	getCRC@len
 12211  0D5C  30A0               	movlw	(low (_txBuf| (0+256)))& (0+255)
 12212  0D5D  3196  2688  318D   	fcall	_getCRC
 12213  0D60  0020               	movlb	0	; select bank0
 12214  0D61  00A7               	movwf	??_bleSendDeviceData+1
 12215  0D62  0828               	movf	bleSendDeviceData@len,w
 12216  0D63  3E03               	addlw	3
 12217  0D64  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 12218  0D65  0086               	movwf	6
 12219  0D66  3001               	movlw	1	; select bank3/4
 12220  0D67  0087               	movwf	7
 12221  0D68  0827               	movf	??_bleSendDeviceData+1,w
 12222  0D69  0081               	movwf	1
 12223                           
 12224                           ;ble.c: 111: bleSendData(txBuf, len+4);
 12225  0D6A  0828               	movf	bleSendDeviceData@len,w
 12226  0D6B  3E04               	addlw	4
 12227  0D6C  00A6               	movwf	??_bleSendDeviceData
 12228  0D6D  0826               	movf	??_bleSendDeviceData,w
 12229  0D6E  00A1               	movwf	bleSendData@len
 12230  0D6F  30A0               	movlw	(low (_txBuf| (0+256)))& (0+255)
 12231  0D70  3189  2102         	fcall	_bleSendData
 12232  0D72  0008               	return
 12233  0D73                     __end_of_bleSendDeviceData:	
 12234                           
 12235                           	psect	text55
 12236  1688                     __ptext55:	
 12237 ;; *************** function _getCRC *****************
 12238 ;; Defined at:
 12239 ;;		line 40 in file "src/ble.c"
 12240 ;; Parameters:    Size  Location     Type
 12241 ;;  pbuf            1    wreg     PTR unsigned char 
 12242 ;;		 -> rxBuf(32), txBuf(32), 
 12243 ;;  len             1    0[BANK0 ] unsigned char 
 12244 ;; Auto vars:     Size  Location     Type
 12245 ;;  pbuf            1    5[BANK0 ] PTR unsigned char 
 12246 ;;		 -> rxBuf(32), txBuf(32), 
 12247 ;;  i               1    4[BANK0 ] unsigned char 
 12248 ;;  result          1    3[BANK0 ] unsigned char 
 12249 ;; Return value:  Size  Location     Type
 12250 ;;                  1    wreg      unsigned char 
 12251 ;; Registers used:
 12252 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12253 ;; Tracked objects:
 12254 ;;		On entry : 0/0
 12255 ;;		On exit  : 0/0
 12256 ;;		Unchanged: 0/0
 12257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12258 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12259 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12260 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12261 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;Total ram usage:        6 bytes
 12263 ;; Hardware stack levels used:    1
 12264 ;; Hardware stack levels required when called:    6
 12265 ;; This function calls:
 12266 ;;		Nothing
 12267 ;; This function is called by:
 12268 ;;		_bleSendDeviceData
 12269 ;;		_bleSendDeviceTime
 12270 ;;		_DecodeDATA
 12271 ;; This function uses a non-reentrant model
 12272 ;;
 12273                           
 12274                           
 12275                           ;psect for function _getCRC
 12276  1688                     _getCRC:	
 12277                           
 12278                           ;incstack = 0
 12279                           ; Regs used in _getCRC: [wreg+fsr1l+fsr1h+status,2+status,0]
 12280                           ;getCRC@pbuf stored from wreg
 12281  1688  0020               	movlb	0	; select bank0
 12282  1689  00A5               	movwf	getCRC@pbuf
 12283                           
 12284                           ;ble.c: 42: unsigned char result = 0x00;
 12285  168A  01A3               	clrf	getCRC@result
 12286                           
 12287                           ;ble.c: 43: for(unsigned char i = 0; i < len; i++)
 12288  168B  01A4               	clrf	getCRC@i
 12289  168C                     l3112:	
 12290  168C  0820               	movf	getCRC@len,w
 12291  168D  0224               	subwf	getCRC@i,w
 12292  168E  1803               	btfsc	3,0
 12293  168F  2EA0               	goto	l3114
 12294                           
 12295                           ;ble.c: 44: {
 12296                           ;ble.c: 45: result ^= *(pbuf+i);
 12297  1690  0824               	movf	getCRC@i,w
 12298  1691  0725               	addwf	getCRC@pbuf,w
 12299  1692  00A1               	movwf	??_getCRC
 12300  1693  0821               	movf	??_getCRC,w
 12301  1694  0086               	movwf	6
 12302  1695  3001               	movlw	1	; select bank2/3
 12303  1696  0087               	movwf	7
 12304  1697  0801               	movf	1,w
 12305  1698  00A2               	movwf	??_getCRC+1
 12306  1699  0822               	movf	??_getCRC+1,w
 12307  169A  06A3               	xorwf	getCRC@result,f
 12308  169B  3001               	movlw	1
 12309  169C  00A1               	movwf	??_getCRC
 12310  169D  0821               	movf	??_getCRC,w
 12311  169E  07A4               	addwf	getCRC@i,f
 12312  169F  2E8C               	goto	l3112
 12313  16A0                     l3114:	
 12314                           
 12315                           ;ble.c: 46: }
 12316                           ;ble.c: 47: return result;
 12317  16A0  0823               	movf	getCRC@result,w
 12318  16A1  0008               	return
 12319  16A2                     __end_of_getCRC:	
 12320                           
 12321                           	psect	text56
 12322  0902                     __ptext56:	
 12323 ;; *************** function _bleSendData *****************
 12324 ;; Defined at:
 12325 ;;		line 74 in file "src/ble.c"
 12326 ;; Parameters:    Size  Location     Type
 12327 ;;  frame           1    wreg     PTR const unsigned char 
 12328 ;;		 -> txBuf(32), 
 12329 ;;  len             1    1[BANK0 ] unsigned char 
 12330 ;; Auto vars:     Size  Location     Type
 12331 ;;  frame           1    4[BANK0 ] PTR const unsigned char 
 12332 ;;		 -> txBuf(32), 
 12333 ;; Return value:  Size  Location     Type
 12334 ;;                  1    wreg      void 
 12335 ;; Registers used:
 12336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12342 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;Total ram usage:        4 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; Hardware stack levels required when called:    7
 12349 ;; This function calls:
 12350 ;;		_eusartSendByte
 12351 ;; This function is called by:
 12352 ;;		_bleSendDeviceData
 12353 ;;		_bleSendDeviceTime
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           
 12358                           ;psect for function _bleSendData
 12359  0902                     _bleSendData:	
 12360                           
 12361                           ;incstack = 0
 12362                           ; Regs used in _bleSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12363                           ;bleSendData@frame stored from wreg
 12364  0902  0020               	movlb	0	; select bank0
 12365  0903  00A4               	movwf	bleSendData@frame
 12366                           
 12367                           ;ble.c: 76: LATC1 = 0;
 12368  0904  0022               	movlb	2	; select bank2
 12369  0905  108E               	bcf	14,1	;volatile
 12370                           
 12371                           ;ble.c: 77: _delay((unsigned long)((800)*(16000000/4000000.0)));
 12372  0906  3005               	movlw	5
 12373  0907  0020               	movlb	0	; select bank0
 12374  0908  00A3               	movwf	??_bleSendData+1
 12375  0909  3026               	movlw	38
 12376  090A  00A2               	movwf	??_bleSendData
 12377  090B                     u5307:	
 12378  090B  0BA2               	decfsz	??_bleSendData,f
 12379  090C  290B               	goto	u5307
 12380  090D  0BA3               	decfsz	??_bleSendData+1,f
 12381  090E  290B               	goto	u5307
 12382  090F  0000               	nop
 12383  0910                     l3134:	
 12384                           ;ble.c: 78: while(len--)
 12385                           
 12386  0910  3001               	movlw	1
 12387  0911  0020               	movlb	0	; select bank0
 12388  0912  02A1               	subwf	bleSendData@len,f
 12389  0913  0A21               	incf	bleSendData@len,w
 12390  0914  1903               	btfsc	3,2
 12391  0915  2925               	goto	l54
 12392                           
 12393                           ;ble.c: 79: {
 12394                           ;ble.c: 80: eusartSendByte(*frame++);
 12395  0916  0020               	movlb	0	; select bank0
 12396  0917  0824               	movf	bleSendData@frame,w
 12397  0918  0086               	movwf	6
 12398  0919  3001               	movlw	1	; select bank2/3
 12399  091A  0087               	movwf	7
 12400  091B  0801               	movf	1,w
 12401  091C  3194  24B1  3189   	fcall	_eusartSendByte
 12402  091F  3001               	movlw	1
 12403  0920  0020               	movlb	0	; select bank0
 12404  0921  00A2               	movwf	??_bleSendData
 12405  0922  0822               	movf	??_bleSendData,w
 12406  0923  07A4               	addwf	bleSendData@frame,f
 12407  0924  2910               	goto	l3134
 12408  0925                     l54:	
 12409                           ;ble.c: 81: }
 12410                           ;ble.c: 83: while(!TRMT);
 12411                           
 12412  0925  0023               	movlb	3	; select bank3
 12413  0926  1C9E               	btfss	30,1	;volatile
 12414  0927  2925               	goto	l54
 12415                           
 12416                           ;ble.c: 84: LATC1 = 1;
 12417  0928  0022               	movlb	2	; select bank2
 12418  0929  148E               	bsf	14,1	;volatile
 12419  092A  0008               	return
 12420  092B                     __end_of_bleSendData:	
 12421                           
 12422                           	psect	text57
 12423  14B1                     __ptext57:	
 12424 ;; *************** function _eusartSendByte *****************
 12425 ;; Defined at:
 12426 ;;		line 44 in file "src/eusart.c"
 12427 ;; Parameters:    Size  Location     Type
 12428 ;;  byte            1    wreg     unsigned char 
 12429 ;; Auto vars:     Size  Location     Type
 12430 ;;  byte            1    0[BANK0 ] unsigned char 
 12431 ;; Return value:  Size  Location     Type
 12432 ;;                  1    wreg      void 
 12433 ;; Registers used:
 12434 ;;		wreg
 12435 ;; Tracked objects:
 12436 ;;		On entry : 0/0
 12437 ;;		On exit  : 0/0
 12438 ;;		Unchanged: 0/0
 12439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12443 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;Total ram usage:        1 bytes
 12445 ;; Hardware stack levels used:    1
 12446 ;; Hardware stack levels required when called:    6
 12447 ;; This function calls:
 12448 ;;		Nothing
 12449 ;; This function is called by:
 12450 ;;		_bleSendData
 12451 ;;		_eusartSendBuffer
 12452 ;; This function uses a non-reentrant model
 12453 ;;
 12454                           
 12455                           
 12456                           ;psect for function _eusartSendByte
 12457  14B1                     _eusartSendByte:	
 12458                           
 12459                           ;incstack = 0
 12460                           ; Regs used in _eusartSendByte: [wreg]
 12461                           ;eusartSendByte@byte stored from wreg
 12462  14B1  0020               	movlb	0	; select bank0
 12463  14B2  00A0               	movwf	eusartSendByte@byte
 12464  14B3                     l726:	
 12465                           ;eusart.c: 46: while(!TXIF);
 12466                           
 12467  14B3  1E11               	btfss	17,4	;volatile
 12468  14B4  2CB3               	goto	l726
 12469                           
 12470                           ;eusart.c: 47: TXREG = byte;
 12471  14B5  0820               	movf	eusartSendByte@byte,w
 12472  14B6  0023               	movlb	3	; select bank3
 12473  14B7  009A               	movwf	26	;volatile
 12474  14B8  0008               	return
 12475  14B9                     __end_of_eusartSendByte:	
 12476                           
 12477                           	psect	text58
 12478  0A16                     __ptext58:	
 12479 ;; *************** function ___lwdiv *****************
 12480 ;; Defined at:
 12481 ;;		line 6 in file "/Applications/microchip/xc8/v1.38/sources/common/lwdiv.c"
 12482 ;; Parameters:    Size  Location     Type
 12483 ;;  divisor         2    0[BANK0 ] unsigned int 
 12484 ;;  dividend        2    2[BANK0 ] unsigned int 
 12485 ;; Auto vars:     Size  Location     Type
 12486 ;;  quotient        2    5[BANK0 ] unsigned int 
 12487 ;;  counter         1    7[BANK0 ] unsigned char 
 12488 ;; Return value:  Size  Location     Type
 12489 ;;                  2    0[BANK0 ] unsigned int 
 12490 ;; Registers used:
 12491 ;;		wreg, status,2, status,0
 12492 ;; Tracked objects:
 12493 ;;		On entry : 0/0
 12494 ;;		On exit  : 0/0
 12495 ;;		Unchanged: 0/0
 12496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12497 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12498 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12499 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12500 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12501 ;;Total ram usage:        8 bytes
 12502 ;; Hardware stack levels used:    1
 12503 ;; Hardware stack levels required when called:    6
 12504 ;; This function calls:
 12505 ;;		Nothing
 12506 ;; This function is called by:
 12507 ;;		_DecodeDATA
 12508 ;; This function uses a non-reentrant model
 12509 ;;
 12510                           
 12511                           
 12512                           ;psect for function ___lwdiv
 12513  0A16                     ___lwdiv:	
 12514                           
 12515                           ;incstack = 0
 12516                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12517  0A16  0020               	movlb	0	; select bank0
 12518  0A17  01A5               	clrf	___lwdiv@quotient
 12519  0A18  01A6               	clrf	___lwdiv@quotient+1
 12520  0A19  0820               	movf	___lwdiv@divisor,w
 12521  0A1A  0421               	iorwf	___lwdiv@divisor+1,w
 12522  0A1B  1903               	btfsc	3,2
 12523  0A1C  2A46               	goto	l3872
 12524  0A1D  01A7               	clrf	___lwdiv@counter
 12525  0A1E  0AA7               	incf	___lwdiv@counter,f
 12526  0A1F                     l3860:	
 12527  0A1F  1BA1               	btfsc	___lwdiv@divisor+1,7
 12528  0A20  2A2B               	goto	l3862
 12529  0A21  3001               	movlw	1
 12530  0A22                     u3955:	
 12531  0A22  35A0               	lslf	___lwdiv@divisor,f
 12532  0A23  0DA1               	rlf	___lwdiv@divisor+1,f
 12533  0A24  0B89               	decfsz	9,f
 12534  0A25  2A22               	goto	u3955
 12535  0A26  3001               	movlw	1
 12536  0A27  00A4               	movwf	??___lwdiv
 12537  0A28  0824               	movf	??___lwdiv,w
 12538  0A29  07A7               	addwf	___lwdiv@counter,f
 12539  0A2A  2A1F               	goto	l3860
 12540  0A2B                     l3862:	
 12541  0A2B  3001               	movlw	1
 12542  0A2C                     u3975:	
 12543  0A2C  35A5               	lslf	___lwdiv@quotient,f
 12544  0A2D  0DA6               	rlf	___lwdiv@quotient+1,f
 12545  0A2E  0B89               	decfsz	9,f
 12546  0A2F  2A2C               	goto	u3975
 12547  0A30  0821               	movf	___lwdiv@divisor+1,w
 12548  0A31  0223               	subwf	___lwdiv@dividend+1,w
 12549  0A32  1D03               	skipz
 12550  0A33  2A36               	goto	u3985
 12551  0A34  0820               	movf	___lwdiv@divisor,w
 12552  0A35  0222               	subwf	___lwdiv@dividend,w
 12553  0A36                     u3985:	
 12554  0A36  1C03               	skipc
 12555  0A37  2A3D               	goto	l3868
 12556  0A38  0820               	movf	___lwdiv@divisor,w
 12557  0A39  02A2               	subwf	___lwdiv@dividend,f
 12558  0A3A  0821               	movf	___lwdiv@divisor+1,w
 12559  0A3B  3BA3               	subwfb	___lwdiv@dividend+1,f
 12560  0A3C  1425               	bsf	___lwdiv@quotient,0
 12561  0A3D                     l3868:	
 12562  0A3D  3001               	movlw	1
 12563  0A3E                     u3995:	
 12564  0A3E  36A1               	lsrf	___lwdiv@divisor+1,f
 12565  0A3F  0CA0               	rrf	___lwdiv@divisor,f
 12566  0A40  0B89               	decfsz	9,f
 12567  0A41  2A3E               	goto	u3995
 12568  0A42  3001               	movlw	1
 12569  0A43  02A7               	subwf	___lwdiv@counter,f
 12570  0A44  1D03               	btfss	3,2
 12571  0A45  2A2B               	goto	l3862
 12572  0A46                     l3872:	
 12573  0A46  0826               	movf	___lwdiv@quotient+1,w
 12574  0A47  00A1               	movwf	?___lwdiv+1
 12575  0A48  0825               	movf	___lwdiv@quotient,w
 12576  0A49  00A0               	movwf	?___lwdiv
 12577  0A4A  0008               	return
 12578  0A4B                     __end_of___lwdiv:	
 12579                           
 12580                           	psect	intentry
 12581  0004                     __pintentry:	
 12582 ;; *************** function _INTERRUPT_InterruptManager *****************
 12583 ;; Defined at:
 12584 ;;		line 107 in file "src/comman.c"
 12585 ;; Parameters:    Size  Location     Type
 12586 ;;		None
 12587 ;; Auto vars:     Size  Location     Type
 12588 ;;		None
 12589 ;; Return value:  Size  Location     Type
 12590 ;;                  1    wreg      void 
 12591 ;; Registers used:
 12592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12593 ;; Tracked objects:
 12594 ;;		On entry : 0/0
 12595 ;;		On exit  : 0/0
 12596 ;;		Unchanged: 0/0
 12597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12600 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12601 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;Total ram usage:        1 bytes
 12603 ;; Hardware stack levels used:    1
 12604 ;; Hardware stack levels required when called:    5
 12605 ;; This function calls:
 12606 ;;		_DecodeCMD
 12607 ;;		_EUSART_RCV_ISR
 12608 ;;		_TMR2_UserInterruptHandler
 12609 ;;		_runRTC
 12610 ;; This function is called by:
 12611 ;;		Interrupt level 1
 12612 ;; This function uses a non-reentrant model
 12613 ;;
 12614                           
 12615  0004                     _INTERRUPT_InterruptManager:	
 12616                           
 12617                           ;incstack = 0
 12618  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12619                           
 12620                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12621  0005  3180               	pagesel	$
 12622  0006  0020               	movlb	0	; select bank0
 12623  0007  087F               	movf	127,w
 12624  0008  00FB               	movwf	??_INTERRUPT_InterruptManager
 12625                           
 12626                           ;comman.c: 110: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 12627  0009  1F0B               	btfss	11,6	;volatile
 12628  000A  281E               	goto	i1l250
 12629  000B  0021               	movlb	1	; select bank1
 12630  000C  1E91               	btfss	17,5	;volatile
 12631  000D  281E               	goto	i1l250
 12632  000E  0020               	movlb	0	; select bank0
 12633  000F  1E91               	btfss	17,5	;volatile
 12634  0010  281E               	goto	i1l250
 12635                           
 12636                           ;comman.c: 111: {
 12637                           ;comman.c: 112: EUSART_RCV_ISR();
 12638  0011  3195  2594  3180   	fcall	_EUSART_RCV_ISR
 12639                           
 12640                           ;comman.c: 113: if (!eusartRunPara.fMode)
 12641  0014  0020               	movlb	0	; select bank0
 12642  0015  1864               	btfsc	_eusartRunPara,0	;volatile
 12643  0016  2834               	goto	i1l256
 12644                           
 12645                           ;comman.c: 114: {
 12646                           ;comman.c: 115: DecodeCMD();
 12647  0017  3187  2728  3180   	fcall	_DecodeCMD
 12648                           
 12649                           ;comman.c: 116: eusartRunPara.fRcving = 1;
 12650  001A  0020               	movlb	0	; select bank0
 12651  001B  16E4               	bsf	_eusartRunPara,5	;volatile
 12652                           
 12653                           ;comman.c: 117: eusartRunPara.nRcvInterval = 0;
 12654  001C  01E9               	clrf	_eusartRunPara+5	;volatile
 12655                           
 12656                           ;comman.c: 118: }
 12657                           ;comman.c: 120: }
 12658  001D  2834               	goto	i1l256
 12659  001E                     i1l250:	
 12660                           
 12661                           ;comman.c: 121: else if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 12662  001E  0021               	movlb	1	; select bank1
 12663  001F  1E90               	btfss	16,5	;volatile
 12664  0020  2829               	goto	i1l253
 12665  0021  0020               	movlb	0	; select bank0
 12666  0022  1E90               	btfss	16,5	;volatile
 12667  0023  2829               	goto	i1l253
 12668                           
 12669                           ;comman.c: 122: {
 12670                           ;comman.c: 123: PIR0bits.TMR0IF = 0;
 12671  0024  1290               	bcf	16,5	;volatile
 12672                           
 12673                           ;comman.c: 124: runRTC();
 12674  0025  318C  24A2  3180   	fcall	_runRTC
 12675                           
 12676                           ;comman.c: 125: }
 12677  0028  2834               	goto	i1l256
 12678  0029                     i1l253:	
 12679                           
 12680                           ;comman.c: 126: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF 
      +                          == 1)
 12681  0029  1F0B               	btfss	11,6	;volatile
 12682  002A  2834               	goto	i1l256
 12683  002B  0021               	movlb	1	; select bank1
 12684  002C  1C91               	btfss	17,1	;volatile
 12685  002D  2834               	goto	i1l256
 12686  002E  0020               	movlb	0	; select bank0
 12687  002F  1C91               	btfss	17,1	;volatile
 12688  0030  2834               	goto	i1l256
 12689                           
 12690                           ;comman.c: 127: {
 12691                           ;comman.c: 128: PIR1bits.TMR2IF = 0;
 12692  0031  1091               	bcf	17,1	;volatile
 12693                           
 12694                           ;comman.c: 129: TMR2_UserInterruptHandler();
 12695  0032  3189  21E1         	fcall	_TMR2_UserInterruptHandler
 12696  0034                     i1l256:	
 12697  0034  087B               	movf	??_INTERRUPT_InterruptManager,w
 12698  0035  0020               	movlb	0	; select bank0
 12699  0036  00FF               	movwf	127
 12700  0037  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12701  0038  0009               	retfie
 12702  0039                     __end_of_INTERRUPT_InterruptManager:	
 12703                           
 12704                           	psect	text60
 12705  0CA2                     __ptext60:	
 12706 ;; *************** function _runRTC *****************
 12707 ;; Defined at:
 12708 ;;		line 52 in file "src/rtc.c"
 12709 ;; Parameters:    Size  Location     Type
 12710 ;;		None
 12711 ;; Auto vars:     Size  Location     Type
 12712 ;;		None
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      void 
 12715 ;; Registers used:
 12716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;Total ram usage:        1 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:    2
 12729 ;; This function calls:
 12730 ;;		_checkIsYearLeap
 12731 ;; This function is called by:
 12732 ;;		_INTERRUPT_InterruptManager
 12733 ;; This function uses a non-reentrant model
 12734 ;;
 12735                           
 12736                           
 12737                           ;psect for function _runRTC
 12738  0CA2                     _runRTC:	
 12739                           
 12740                           ;rtc.c: 54: gCurrentTime.datetime.second++;
 12741                           
 12742                           ;incstack = 0
 12743                           ; Regs used in _runRTC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12744  0CA2  3001               	movlw	1
 12745  0CA3  00FA               	movwf	??_runRTC
 12746  0CA4  087A               	movf	??_runRTC,w
 12747  0CA5  0021               	movlb	1	; select bank1
 12748  0CA6  07EB               	addwf	(_gCurrentTime^(0+128)+6),f	;volatile
 12749                           
 12750                           ;rtc.c: 55: if (gCurrentTime.datetime.second >= 60)
 12751  0CA7  303C               	movlw	60
 12752  0CA8  026B               	subwf	(_gCurrentTime^(0+128)+6),w	;volatile
 12753  0CA9  1C03               	skipc
 12754  0CAA  2D04               	goto	i1l4256
 12755                           
 12756                           ;rtc.c: 56: {
 12757                           ;rtc.c: 57: gCurrentTime.datetime.second = 0;
 12758  0CAB  01EB               	clrf	(_gCurrentTime^(0+128)+6)	;volatile
 12759                           
 12760                           ;rtc.c: 58: gCurrentTime.datetime.minute++;
 12761  0CAC  3001               	movlw	1
 12762  0CAD  00FA               	movwf	??_runRTC
 12763  0CAE  087A               	movf	??_runRTC,w
 12764  0CAF  07EA               	addwf	(_gCurrentTime^(0+128)+5),f	;volatile
 12765                           
 12766                           ;rtc.c: 59: if (gCurrentTime.datetime.minute >= 60)
 12767  0CB0  303C               	movlw	60
 12768  0CB1  026A               	subwf	(_gCurrentTime^(0+128)+5),w	;volatile
 12769  0CB2  1C03               	skipc
 12770  0CB3  2D04               	goto	i1l4256
 12771                           
 12772                           ;rtc.c: 60: {
 12773                           ;rtc.c: 61: gCurrentTime.datetime.minute = 0;
 12774  0CB4  01EA               	clrf	(_gCurrentTime^(0+128)+5)	;volatile
 12775                           
 12776                           ;rtc.c: 62: gCurrentTime.datetime.hour++;
 12777  0CB5  3001               	movlw	1
 12778  0CB6  00FA               	movwf	??_runRTC
 12779  0CB7  087A               	movf	??_runRTC,w
 12780  0CB8  07E9               	addwf	(_gCurrentTime^(0+128)+4),f	;volatile
 12781                           
 12782                           ;rtc.c: 63: if (gCurrentTime.datetime.hour >= 24)
 12783  0CB9  3018               	movlw	24
 12784  0CBA  0269               	subwf	(_gCurrentTime^(0+128)+4),w	;volatile
 12785  0CBB  1C03               	skipc
 12786  0CBC  2D04               	goto	i1l4256
 12787                           
 12788                           ;rtc.c: 64: {
 12789                           ;rtc.c: 65: gCurrentTime.datetime.hour = 0;
 12790  0CBD  01E9               	clrf	(_gCurrentTime^(0+128)+4)	;volatile
 12791                           
 12792                           ;rtc.c: 66: gCurrentTime.datetime.day++;
 12793  0CBE  3001               	movlw	1
 12794  0CBF  00FA               	movwf	??_runRTC
 12795  0CC0  087A               	movf	??_runRTC,w
 12796  0CC1  07E7               	addwf	(_gCurrentTime^(0+128)+2),f	;volatile
 12797                           
 12798                           ;rtc.c: 67: gCurrentTime.datetime.wk++;
 12799  0CC2  3001               	movlw	1
 12800  0CC3  00FA               	movwf	??_runRTC
 12801  0CC4  087A               	movf	??_runRTC,w
 12802  0CC5  07E8               	addwf	(_gCurrentTime^(0+128)+3),f	;volatile
 12803                           
 12804                           ;rtc.c: 68: if (gCurrentTime.datetime.wk > 6)
 12805  0CC6  3007               	movlw	7
 12806  0CC7  0268               	subwf	(_gCurrentTime^(0+128)+3),w	;volatile
 12807  0CC8  1803               	btfsc	3,0
 12808                           
 12809                           ;rtc.c: 69: {
 12810                           ;rtc.c: 70: gCurrentTime.datetime.wk = 0;
 12811  0CC9  01E8               	clrf	(_gCurrentTime^(0+128)+3)	;volatile
 12812                           
 12813                           ;rtc.c: 71: }
 12814                           ;rtc.c: 72: if (checkIsYearLeap(gCurrentTime.datetime.year+2000))
 12815  0CCA  0865               	movf	_gCurrentTime^(0+128),w	;volatile
 12816  0CCB  3ED0               	addlw	208
 12817  0CCC  00F6               	movwf	checkIsYearLeap@year
 12818  0CCD  3007               	movlw	7
 12819  0CCE  1803               	skipnc
 12820  0CCF  3008               	movlw	8
 12821  0CD0  00F7               	movwf	checkIsYearLeap@year+1
 12822  0CD1  3189  2183  318C   	fcall	_checkIsYearLeap
 12823  0CD4  3A00               	xorlw	0
 12824  0CD5  1903               	skipnz
 12825  0CD6  2CD9               	goto	i1l4240
 12826                           
 12827                           ;rtc.c: 73: {
 12828                           ;rtc.c: 74: MONTH_DAY[1] = 29;
 12829  0CD7  301D               	movlw	29
 12830  0CD8  2CDA               	goto	L10
 12831  0CD9                     i1l4240:	
 12832                           ;rtc.c: 75: }
 12833                           
 12834                           
 12835                           ;rtc.c: 76: else
 12836                           ;rtc.c: 77: {
 12837                           ;rtc.c: 78: MONTH_DAY[1] = 28;
 12838  0CD9  301C               	movlw	28
 12839  0CDA                     L10:	
 12840  0CDA  00FA               	movwf	??_runRTC
 12841  0CDB  087A               	movf	??_runRTC,w
 12842  0CDC  0023               	movlb	3	; select bank3
 12843  0CDD  00C1               	movwf	(_MONTH_DAY^(0+384)+1)
 12844                           
 12845                           ;rtc.c: 79: }
 12846                           ;rtc.c: 80: if (gCurrentTime.datetime.month <= 12 && gCurrentTime.datetime.month > 0)
 12847  0CDE  300D               	movlw	13
 12848  0CDF  0021               	movlb	1	; select bank1
 12849  0CE0  0266               	subwf	(_gCurrentTime^(0+128)+1),w	;volatile
 12850  0CE1  1803               	skipnc
 12851  0CE2  2D04               	goto	i1l4256
 12852  0CE3  0866               	movf	(_gCurrentTime^(0+128)+1),w	;volatile
 12853  0CE4  1903               	btfsc	3,2
 12854  0CE5  2D04               	goto	i1l4256
 12855                           
 12856                           ;rtc.c: 81: {
 12857                           ;rtc.c: 82: if (gCurrentTime.datetime.day > MONTH_DAY[gCurrentTime.datetime.month-1])
 12858  0CE6  0866               	movf	(_gCurrentTime^(0+128)+1),w	;volatile
 12859  0CE7  3EFF               	addlw	255
 12860  0CE8  3EC0               	addlw	(low (_MONTH_DAY| (0+256)))& (0+255)
 12861  0CE9  0086               	movwf	6
 12862  0CEA  3001               	movlw	1	; select bank3/4
 12863  0CEB  0087               	movwf	7
 12864  0CEC  0867               	movf	(_gCurrentTime^(0+128)+2),w	;volatile
 12865  0CED  0201               	subwf	1,w
 12866  0CEE  1803               	skipnc
 12867  0CEF  2D04               	goto	i1l4256
 12868                           
 12869                           ;rtc.c: 83: {
 12870                           ;rtc.c: 84: gCurrentTime.datetime.day = 1;
 12871  0CF0  3001               	movlw	1
 12872  0CF1  00FA               	movwf	??_runRTC
 12873  0CF2  087A               	movf	??_runRTC,w
 12874  0CF3  00E7               	movwf	(_gCurrentTime^(0+128)+2)	;volatile
 12875                           
 12876                           ;rtc.c: 85: gCurrentTime.datetime.month++;
 12877  0CF4  3001               	movlw	1
 12878  0CF5  00FA               	movwf	??_runRTC
 12879  0CF6  087A               	movf	??_runRTC,w
 12880  0CF7  07E6               	addwf	(_gCurrentTime^(0+128)+1),f	;volatile
 12881                           
 12882                           ;rtc.c: 86: if (gCurrentTime.datetime.month > 12)
 12883  0CF8  300D               	movlw	13
 12884  0CF9  0266               	subwf	(_gCurrentTime^(0+128)+1),w	;volatile
 12885  0CFA  1C03               	skipc
 12886  0CFB  2D04               	goto	i1l4256
 12887                           
 12888                           ;rtc.c: 87: {
 12889                           ;rtc.c: 88: gCurrentTime.datetime.month = 1;
 12890  0CFC  3001               	movlw	1
 12891  0CFD  00FA               	movwf	??_runRTC
 12892  0CFE  087A               	movf	??_runRTC,w
 12893  0CFF  00E6               	movwf	(_gCurrentTime^(0+128)+1)	;volatile
 12894                           
 12895                           ;rtc.c: 89: gCurrentTime.datetime.year++;
 12896  0D00  3001               	movlw	1
 12897  0D01  00FA               	movwf	??_runRTC
 12898  0D02  087A               	movf	??_runRTC,w
 12899  0D03  07E5               	addwf	_gCurrentTime^(0+128),f	;volatile
 12900  0D04                     i1l4256:	
 12901                           
 12902                           ;rtc.c: 90: }
 12903                           ;rtc.c: 91: }
 12904                           ;rtc.c: 92: }
 12905                           ;rtc.c: 93: }
 12906                           ;rtc.c: 94: }
 12907                           ;rtc.c: 95: }
 12908                           ;rtc.c: 96: gLedRunPara.fSec = 1;
 12909  0D04  14D0               	bsf	_gLedRunPara^(0+128),1	;volatile
 12910  0D05  0008               	return
 12911  0D06                     __end_of_runRTC:	
 12912                           
 12913                           	psect	text61
 12914  0983                     __ptext61:	
 12915 ;; *************** function _checkIsYearLeap *****************
 12916 ;; Defined at:
 12917 ;;		line 16 in file "src/rtc.c"
 12918 ;; Parameters:    Size  Location     Type
 12919 ;;  year            2    6[COMMON] unsigned int 
 12920 ;; Auto vars:     Size  Location     Type
 12921 ;;		None
 12922 ;; Return value:  Size  Location     Type
 12923 ;;                  1    wreg      unsigned char 
 12924 ;; Registers used:
 12925 ;;		wreg, status,2, status,0, pclath, cstack
 12926 ;; Tracked objects:
 12927 ;;		On entry : 0/0
 12928 ;;		On exit  : 0/0
 12929 ;;		Unchanged: 0/0
 12930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12931 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;Total ram usage:        4 bytes
 12936 ;; Hardware stack levels used:    1
 12937 ;; Hardware stack levels required when called:    1
 12938 ;; This function calls:
 12939 ;;		___lwmod
 12940 ;; This function is called by:
 12941 ;;		_runRTC
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           
 12946                           ;psect for function _checkIsYearLeap
 12947  0983                     _checkIsYearLeap:	
 12948                           
 12949                           ;rtc.c: 18: if (year&0x03)
 12950                           
 12951                           ;incstack = 0
 12952                           ; Regs used in _checkIsYearLeap: [wreg+status,2+status,0+pclath+cstack]
 12953  0983  3003               	movlw	3
 12954  0984  0576               	andwf	checkIsYearLeap@year,w
 12955  0985  00F8               	movwf	??_checkIsYearLeap
 12956  0986  3000               	movlw	0
 12957  0987  0577               	andwf	checkIsYearLeap@year+1,w
 12958  0988  00F9               	movwf	??_checkIsYearLeap+1
 12959  0989  0878               	movf	??_checkIsYearLeap,w
 12960  098A  0479               	iorwf	??_checkIsYearLeap+1,w
 12961  098B  1903               	btfsc	3,2
 12962  098C  29AF               	goto	i1l3794
 12963                           
 12964                           ;rtc.c: 19: {
 12965                           ;rtc.c: 20: if (year%100 == 0)
 12966  098D  3064               	movlw	100
 12967  098E  00F0               	movwf	___lwmod@divisor
 12968  098F  3000               	movlw	0
 12969  0990  00F1               	movwf	___lwmod@divisor+1
 12970  0991  0877               	movf	checkIsYearLeap@year+1,w
 12971  0992  00F3               	movwf	___lwmod@dividend+1
 12972  0993  0876               	movf	checkIsYearLeap@year,w
 12973  0994  00F2               	movwf	___lwmod@dividend
 12974  0995  3189  212B  3189   	fcall	___lwmod
 12975  0998  0870               	movf	?___lwmod,w
 12976  0999  0471               	iorwf	?___lwmod+1,w
 12977  099A  1D03               	btfss	3,2
 12978  099B  29AD               	goto	i1l3790
 12979                           
 12980                           ;rtc.c: 21: {
 12981                           ;rtc.c: 22: if (year%400 == 0)
 12982  099C  3090               	movlw	144
 12983  099D  00F0               	movwf	___lwmod@divisor
 12984  099E  3001               	movlw	1
 12985  099F  00F1               	movwf	___lwmod@divisor+1
 12986  09A0  0877               	movf	checkIsYearLeap@year+1,w
 12987  09A1  00F3               	movwf	___lwmod@dividend+1
 12988  09A2  0876               	movf	checkIsYearLeap@year,w
 12989  09A3  00F2               	movwf	___lwmod@dividend
 12990  09A4  3189  212B  3189   	fcall	___lwmod
 12991  09A7  0870               	movf	?___lwmod,w
 12992  09A8  0471               	iorwf	?___lwmod+1,w
 12993  09A9  1D03               	btfss	3,2
 12994  09AA  29AF               	goto	i1l3794
 12995                           
 12996                           ;rtc.c: 23: {
 12997                           ;rtc.c: 24: return 1;
 12998  09AB  3001               	movlw	1
 12999  09AC  0008               	return
 13000  09AD                     i1l3790:	
 13001                           ;rtc.c: 25: }
 13002                           ;rtc.c: 26: }
 13003                           
 13004                           
 13005                           ;rtc.c: 27: else
 13006                           ;rtc.c: 28: {
 13007                           ;rtc.c: 29: return 1;
 13008  09AD  3001               	movlw	1
 13009  09AE  0008               	return
 13010  09AF                     i1l3794:	
 13011                           
 13012                           ;rtc.c: 30: }
 13013                           ;rtc.c: 31: }
 13014                           ;rtc.c: 32: return 0;
 13015  09AF  3000               	movlw	0
 13016  09B0  0008               	return
 13017  09B1                     __end_of_checkIsYearLeap:	
 13018                           
 13019                           	psect	text62
 13020  092B                     __ptext62:	
 13021 ;; *************** function ___lwmod *****************
 13022 ;; Defined at:
 13023 ;;		line 6 in file "/Applications/microchip/xc8/v1.38/sources/common/lwmod.c"
 13024 ;; Parameters:    Size  Location     Type
 13025 ;;  divisor         2    0[COMMON] unsigned int 
 13026 ;;  dividend        2    2[COMMON] unsigned int 
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;  counter         1    5[COMMON] unsigned char 
 13029 ;; Return value:  Size  Location     Type
 13030 ;;                  2    0[COMMON] unsigned int 
 13031 ;; Registers used:
 13032 ;;		wreg, status,2, status,0
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13038 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13039 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13041 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;Total ram usage:        6 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; This function calls:
 13045 ;;		Nothing
 13046 ;; This function is called by:
 13047 ;;		_checkIsYearLeap
 13048 ;; This function uses a non-reentrant model
 13049 ;;
 13050                           
 13051                           
 13052                           ;psect for function ___lwmod
 13053  092B                     ___lwmod:	
 13054                           
 13055                           ;incstack = 0
 13056                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13057  092B  0870               	movf	___lwmod@divisor,w
 13058  092C  0471               	iorwf	___lwmod@divisor+1,w
 13059  092D  1903               	btfsc	3,2
 13060  092E  2952               	goto	i1l3250
 13061  092F  01F5               	clrf	___lwmod@counter
 13062  0930  0AF5               	incf	___lwmod@counter,f
 13063  0931                     i1l3240:	
 13064  0931  1BF1               	btfsc	___lwmod@divisor+1,7
 13065  0932  293D               	goto	i1l3242
 13066  0933  3001               	movlw	1
 13067  0934                     u303_25:	
 13068  0934  35F0               	lslf	___lwmod@divisor,f
 13069  0935  0DF1               	rlf	___lwmod@divisor+1,f
 13070  0936  0B89               	decfsz	9,f
 13071  0937  2934               	goto	u303_25
 13072  0938  3001               	movlw	1
 13073  0939  00F4               	movwf	??___lwmod
 13074  093A  0874               	movf	??___lwmod,w
 13075  093B  07F5               	addwf	___lwmod@counter,f
 13076  093C  2931               	goto	i1l3240
 13077  093D                     i1l3242:	
 13078  093D  0871               	movf	___lwmod@divisor+1,w
 13079  093E  0273               	subwf	___lwmod@dividend+1,w
 13080  093F  1D03               	skipz
 13081  0940  2943               	goto	u305_25
 13082  0941  0870               	movf	___lwmod@divisor,w
 13083  0942  0272               	subwf	___lwmod@dividend,w
 13084  0943                     u305_25:	
 13085  0943  1C03               	skipc
 13086  0944  2949               	goto	i1l3246
 13087  0945  0870               	movf	___lwmod@divisor,w
 13088  0946  02F2               	subwf	___lwmod@dividend,f
 13089  0947  0871               	movf	___lwmod@divisor+1,w
 13090  0948  3BF3               	subwfb	___lwmod@dividend+1,f
 13091  0949                     i1l3246:	
 13092  0949  3001               	movlw	1
 13093  094A                     u306_25:	
 13094  094A  36F1               	lsrf	___lwmod@divisor+1,f
 13095  094B  0CF0               	rrf	___lwmod@divisor,f
 13096  094C  0B89               	decfsz	9,f
 13097  094D  294A               	goto	u306_25
 13098  094E  3001               	movlw	1
 13099  094F  02F5               	subwf	___lwmod@counter,f
 13100  0950  1D03               	btfss	3,2
 13101  0951  293D               	goto	i1l3242
 13102  0952                     i1l3250:	
 13103  0952  0873               	movf	___lwmod@dividend+1,w
 13104  0953  00F1               	movwf	?___lwmod+1
 13105  0954  0872               	movf	___lwmod@dividend,w
 13106  0955  00F0               	movwf	?___lwmod
 13107  0956  0008               	return
 13108  0957                     __end_of___lwmod:	
 13109                           
 13110                           	psect	text63
 13111  09E1                     __ptext63:	
 13112 ;; *************** function _TMR2_UserInterruptHandler *****************
 13113 ;; Defined at:
 13114 ;;		line 71 in file "src/comman.c"
 13115 ;; Parameters:    Size  Location     Type
 13116 ;;		None
 13117 ;; Auto vars:     Size  Location     Type
 13118 ;;		None
 13119 ;; Return value:  Size  Location     Type
 13120 ;;                  1    wreg      void 
 13121 ;; Registers used:
 13122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13123 ;; Tracked objects:
 13124 ;;		On entry : 0/0
 13125 ;;		On exit  : 0/0
 13126 ;;		Unchanged: 0/0
 13127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13130 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13131 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13132 ;;Total ram usage:        1 bytes
 13133 ;; Hardware stack levels used:    1
 13134 ;; Hardware stack levels required when called:    4
 13135 ;; This function calls:
 13136 ;;		_keyAction
 13137 ;;		_keyScan
 13138 ;;		_updateLed
 13139 ;; This function is called by:
 13140 ;;		_INTERRUPT_InterruptManager
 13141 ;; This function uses a non-reentrant model
 13142 ;;
 13143                           
 13144                           
 13145                           ;psect for function _TMR2_UserInterruptHandler
 13146  09E1                     _TMR2_UserInterruptHandler:	
 13147                           
 13148                           ;comman.c: 73: static unsigned char cnt = 0;
 13149                           ;comman.c: 75: if(eusartRunPara.fWaitForAck)
 13150                           
 13151                           ;incstack = 0
 13152                           ; Regs used in _TMR2_UserInterruptHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13153  09E1  0020               	movlb	0	; select bank0
 13154  09E2  1CE4               	btfss	_eusartRunPara,1	;volatile
 13155  09E3  29E8               	goto	i1l4170
 13156                           
 13157                           ;comman.c: 76: {
 13158                           ;comman.c: 77: eusartRunPara.nOverTime ++;
 13159  09E4  3001               	movlw	1
 13160  09E5  00F9               	movwf	??_TMR2_UserInterruptHandler
 13161  09E6  0879               	movf	??_TMR2_UserInterruptHandler,w
 13162  09E7  07E5               	addwf	_eusartRunPara+1,f	;volatile
 13163  09E8                     i1l4170:	
 13164                           
 13165                           ;comman.c: 78: }
 13166                           ;comman.c: 79: if(eusartRunPara.fRcving)
 13167  09E8  1EE4               	btfss	_eusartRunPara,5	;volatile
 13168  09E9  29F5               	goto	i1l4180
 13169                           
 13170                           ;comman.c: 80: {
 13171                           ;comman.c: 81: eusartRunPara.nRcvInterval ++;
 13172  09EA  3001               	movlw	1
 13173  09EB  00F9               	movwf	??_TMR2_UserInterruptHandler
 13174  09EC  0879               	movf	??_TMR2_UserInterruptHandler,w
 13175  09ED  07E9               	addwf	_eusartRunPara+5,f	;volatile
 13176                           
 13177                           ;comman.c: 82: if(eusartRunPara.nRcvInterval > 15)
 13178  09EE  3010               	movlw	16
 13179  09EF  0269               	subwf	_eusartRunPara+5,w	;volatile
 13180  09F0  1C03               	skipc
 13181  09F1  29F5               	goto	i1l4180
 13182                           
 13183                           ;comman.c: 83: {
 13184                           ;comman.c: 84: eusartRunPara.fRcving = 0;
 13185  09F2  12E4               	bcf	_eusartRunPara,5	;volatile
 13186                           
 13187                           ;comman.c: 85: eusartRunPara.nRcvState = 0;
 13188  09F3  01EA               	clrf	_eusartRunPara+6	;volatile
 13189                           
 13190                           ;comman.c: 86: eusartRunPara.nRcvIdx = 0;
 13191  09F4  01E8               	clrf	_eusartRunPara+4	;volatile
 13192  09F5                     i1l4180:	
 13193                           
 13194                           ;comman.c: 87: }
 13195                           ;comman.c: 88: }
 13196                           ;comman.c: 90: cnt++;
 13197  09F5  3001               	movlw	1
 13198  09F6  00F9               	movwf	??_TMR2_UserInterruptHandler
 13199  09F7  0879               	movf	??_TMR2_UserInterruptHandler,w
 13200  09F8  07ED               	addwf	TMR2_UserInterruptHandler@cnt,f
 13201                           
 13202                           ;comman.c: 91: if (cnt >= 4)
 13203  09F9  3004               	movlw	4
 13204  09FA  026D               	subwf	TMR2_UserInterruptHandler@cnt,w
 13205  09FB  1C03               	skipc
 13206  09FC  2A08               	goto	i1l4194
 13207                           
 13208                           ;comman.c: 92: {
 13209                           ;comman.c: 93: cnt = 0;
 13210  09FD  01ED               	clrf	TMR2_UserInterruptHandler@cnt
 13211                           
 13212                           ;comman.c: 94: keyScan();
 13213  09FE  318A  224B  3189   	fcall	_keyScan
 13214                           
 13215                           ;comman.c: 95: if (keyValue != 0x00)
 13216  0A01  087C               	movf	_keyValue,w	;volatile
 13217  0A02  1903               	btfsc	3,2
 13218  0A03  2A08               	goto	i1l4194
 13219                           
 13220                           ;comman.c: 96: {
 13221                           ;comman.c: 97: keyAction();
 13222  0A04  318E  26F0  3189   	fcall	_keyAction
 13223                           
 13224                           ;comman.c: 98: keyValue = 0x00;
 13225  0A07  01FC               	clrf	_keyValue	;volatile
 13226  0A08                     i1l4194:	
 13227                           
 13228                           ;comman.c: 99: }
 13229                           ;comman.c: 100: }
 13230                           ;comman.c: 101: if (!gLedRunPara.find && gLedPara.fSta == 3 && !gLedPara.fAuto)
 13231  0A08  0021               	movlb	1	; select bank1
 13232  0A09  1850               	btfsc	_gLedRunPara^(0+128),0	;volatile
 13233  0A0A  0008               	return
 13234  0A0B  0022               	movlb	2	; select bank2
 13235  0A0C  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 13236  0A0D  3903               	andlw	3
 13237  0A0E  3A03               	xorlw	3
 13238  0A0F  1D03               	skipz
 13239  0A10  0008               	return
 13240  0A11  1820               	btfsc	_gLedPara^(0+256),0	;volatile
 13241  0A12  0008               	return
 13242                           
 13243                           ;comman.c: 102: {
 13244                           ;comman.c: 103: updateLed();
 13245  0A13  318D  2573         	fcall	_updateLed
 13246  0A15  0008               	return
 13247  0A16                     __end_of_TMR2_UserInterruptHandler:	
 13248                           
 13249                           	psect	text64
 13250  0D73                     __ptext64:	
 13251 ;; *************** function _updateLed *****************
 13252 ;; Defined at:
 13253 ;;		line 15 in file "src/led.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;		None
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;  i               1    8[COMMON] unsigned char 
 13258 ;; Return value:  Size  Location     Type
 13259 ;;                  1    wreg      void 
 13260 ;; Registers used:
 13261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13262 ;; Tracked objects:
 13263 ;;		On entry : 0/0
 13264 ;;		On exit  : 0/0
 13265 ;;		Unchanged: 0/0
 13266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;Total ram usage:        7 bytes
 13272 ;; Hardware stack levels used:    1
 13273 ;; Hardware stack levels required when called:    2
 13274 ;; This function calls:
 13275 ;;		i1_updatePWM
 13276 ;; This function is called by:
 13277 ;;		_TMR2_UserInterruptHandler
 13278 ;; This function uses a non-reentrant model
 13279 ;;
 13280                           
 13281                           
 13282                           ;psect for function _updateLed
 13283  0D73                     _updateLed:	
 13284                           
 13285                           ;led.c: 17: for (unsigned char i = 0; i < 4; i++)
 13286                           
 13287                           ;incstack = 0
 13288                           ; Regs used in _updateLed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13289  0D73  01F8               	clrf	updateLed@i
 13290  0D74  3004               	movlw	4
 13291  0D75  0278               	subwf	updateLed@i,w
 13292  0D76  1803               	btfsc	3,0
 13293  0D77  2DF5               	goto	i1l3642
 13294  0D78                     i1l3622:	
 13295                           
 13296                           ;led.c: 18: {
 13297                           ;led.c: 19: if (gLedRunPara.nCurrentBrt[i] == gLedRunPara.nTargetBrt[i])
 13298  0D78  3578               	lslf	updateLed@i,w
 13299  0D79  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
 13300  0D7A  0086               	movwf	6
 13301  0D7B  0187               	clrf	7
 13302  0D7C  3F40               	moviw [0]fsr1
 13303  0D7D  00F2               	movwf	??_updateLed
 13304  0D7E  3F41               	moviw [1]fsr1
 13305  0D7F  00F3               	movwf	??_updateLed+1
 13306  0D80  3578               	lslf	updateLed@i,w
 13307  0D81  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 13308  0D82  0086               	movwf	6
 13309  0D83  0187               	clrf	7
 13310  0D84  3F40               	moviw [0]fsr1
 13311  0D85  00F4               	movwf	??_updateLed+2
 13312  0D86  3F41               	moviw [1]fsr1
 13313  0D87  00F5               	movwf	??_updateLed+3
 13314  0D88  0873               	movf	??_updateLed+1,w
 13315  0D89  0675               	xorwf	??_updateLed+3,w
 13316  0D8A  1D03               	skipz
 13317  0D8B  2D8E               	goto	u346_25
 13318  0D8C  0872               	movf	??_updateLed,w
 13319  0D8D  0674               	xorwf	??_updateLed+2,w
 13320  0D8E                     u346_25:	
 13321  0D8E  1903               	btfsc	3,2
 13322  0D8F  2DED               	goto	i1l3638
 13323                           
 13324                           ;led.c: 23: else
 13325                           ;led.c: 24: {
 13326                           ;led.c: 25: if (gLedRunPara.nCurrentBrt[i] + 4 < gLedRunPara.nTargetBrt[i])
 13327                           
 13328                           ;led.c: 22: }
 13329                           
 13330                           ;led.c: 20: {
 13331                           ;led.c: 21: continue;
 13332  0D90  3578               	lslf	updateLed@i,w
 13333  0D91  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
 13334  0D92  0086               	movwf	6
 13335  0D93  0187               	clrf	7
 13336  0D94  3F40               	moviw [0]fsr1
 13337  0D95  00F2               	movwf	??_updateLed
 13338  0D96  3F41               	moviw [1]fsr1
 13339  0D97  00F3               	movwf	??_updateLed+1
 13340  0D98  3578               	lslf	updateLed@i,w
 13341  0D99  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 13342  0D9A  0086               	movwf	6
 13343  0D9B  0187               	clrf	7
 13344  0D9C  3F40               	moviw [0]fsr1
 13345  0D9D  00F4               	movwf	??_updateLed+2
 13346  0D9E  3F41               	moviw [1]fsr1
 13347  0D9F  00F5               	movwf	??_updateLed+3
 13348  0DA0  0874               	movf	??_updateLed+2,w
 13349  0DA1  3E04               	addlw	4
 13350  0DA2  00F6               	movwf	??_updateLed+4
 13351  0DA3  3000               	movlw	0
 13352  0DA4  3D75               	addwfc	??_updateLed+3,w
 13353  0DA5  00F7               	movwf	??_updateLed+5
 13354  0DA6  0873               	movf	??_updateLed+1,w
 13355  0DA7  0277               	subwf	??_updateLed+5,w
 13356  0DA8  1D03               	skipz
 13357  0DA9  2DAC               	goto	u347_25
 13358  0DAA  0872               	movf	??_updateLed,w
 13359  0DAB  0276               	subwf	??_updateLed+4,w
 13360  0DAC                     u347_25:	
 13361  0DAC  1803               	skipnc
 13362  0DAD  2DB8               	goto	i1l3632
 13363                           
 13364                           ;led.c: 26: {
 13365                           ;led.c: 27: gLedRunPara.nCurrentBrt[i] += 4;
 13366  0DAE  3578               	lslf	updateLed@i,w
 13367  0DAF  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 13368  0DB0  0086               	movwf	6
 13369  0DB1  0187               	clrf	7
 13370  0DB2  3004               	movlw	4
 13371  0DB3  0781               	addwf	1,f
 13372  0DB4  3141               	addfsr 1,1
 13373  0DB5  1803               	skipnc
 13374  0DB6  0A81               	incf	1,f
 13375                           
 13376                           ;led.c: 28: }
 13377  0DB7  2DED               	goto	i1l3638
 13378  0DB8                     i1l3632:	
 13379                           
 13380                           ;led.c: 29: else if(gLedRunPara.nTargetBrt[i] + 4 < gLedRunPara.nCurrentBrt[i])
 13381  0DB8  3578               	lslf	updateLed@i,w
 13382  0DB9  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 13383  0DBA  0086               	movwf	6
 13384  0DBB  0187               	clrf	7
 13385  0DBC  3F40               	moviw [0]fsr1
 13386  0DBD  00F2               	movwf	??_updateLed
 13387  0DBE  3F41               	moviw [1]fsr1
 13388  0DBF  00F3               	movwf	??_updateLed+1
 13389  0DC0  3578               	lslf	updateLed@i,w
 13390  0DC1  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
 13391  0DC2  0086               	movwf	6
 13392  0DC3  0187               	clrf	7
 13393  0DC4  3F40               	moviw [0]fsr1
 13394  0DC5  00F4               	movwf	??_updateLed+2
 13395  0DC6  3F41               	moviw [1]fsr1
 13396  0DC7  00F5               	movwf	??_updateLed+3
 13397  0DC8  0874               	movf	??_updateLed+2,w
 13398  0DC9  3E04               	addlw	4
 13399  0DCA  00F6               	movwf	??_updateLed+4
 13400  0DCB  3000               	movlw	0
 13401  0DCC  3D75               	addwfc	??_updateLed+3,w
 13402  0DCD  00F7               	movwf	??_updateLed+5
 13403  0DCE  0873               	movf	??_updateLed+1,w
 13404  0DCF  0277               	subwf	??_updateLed+5,w
 13405  0DD0  1D03               	skipz
 13406  0DD1  2DD4               	goto	u348_25
 13407  0DD2  0872               	movf	??_updateLed,w
 13408  0DD3  0276               	subwf	??_updateLed+4,w
 13409  0DD4                     u348_25:	
 13410  0DD4  1803               	skipnc
 13411  0DD5  2DE1               	goto	i1l3636
 13412                           
 13413                           ;led.c: 30: {
 13414                           ;led.c: 31: gLedRunPara.nCurrentBrt[i] -= 4;
 13415  0DD6  3578               	lslf	updateLed@i,w
 13416  0DD7  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 13417  0DD8  0086               	movwf	6
 13418  0DD9  0187               	clrf	7
 13419  0DDA  3004               	movlw	4
 13420  0DDB  0281               	subwf	1,f
 13421  0DDC  3141               	addfsr 1,1
 13422  0DDD  3000               	movlw	0
 13423  0DDE  3B81               	subwfb	1,f
 13424  0DDF  317F               	addfsr 1,-1
 13425                           
 13426                           ;led.c: 32: }
 13427  0DE0  2DED               	goto	i1l3638
 13428  0DE1                     i1l3636:	
 13429                           
 13430                           ;led.c: 33: else
 13431                           ;led.c: 34: {
 13432                           ;led.c: 35: gLedRunPara.nCurrentBrt[i] = gLedRunPara.nTargetBrt[i];
 13433  0DE1  3578               	lslf	updateLed@i,w
 13434  0DE2  3ED4               	addlw	(low ((_gLedRunPara| 0+4)))& (0+255)
 13435  0DE3  0086               	movwf	6
 13436  0DE4  0187               	clrf	7
 13437  0DE5  3578               	lslf	updateLed@i,w
 13438  0DE6  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 13439  0DE7  0084               	movwf	4
 13440  0DE8  0185               	clrf	5
 13441  0DE9  3F40               	moviw [0]fsr1
 13442  0DEA  3F80               	movwi [0]fsr0
 13443  0DEB  3F41               	moviw [1]fsr1
 13444  0DEC  3F81               	movwi [1]fsr0
 13445  0DED                     i1l3638:	
 13446  0DED  3001               	movlw	1
 13447  0DEE  00F2               	movwf	??_updateLed
 13448  0DEF  0872               	movf	??_updateLed,w
 13449  0DF0  07F8               	addwf	updateLed@i,f
 13450  0DF1  3004               	movlw	4
 13451  0DF2  0278               	subwf	updateLed@i,w
 13452  0DF3  1C03               	skipc
 13453  0DF4  2D78               	goto	i1l3622
 13454  0DF5                     i1l3642:	
 13455                           
 13456                           ;led.c: 36: }
 13457                           ;led.c: 37: }
 13458                           ;led.c: 38: }
 13459                           ;led.c: 39: updatePWM();
 13460  0DF5  3197  27E0         	fcall	i1_updatePWM
 13461  0DF7  0008               	return
 13462  0DF8                     __end_of_updateLed:	
 13463                           
 13464                           	psect	text65
 13465  0A4B                     __ptext65:	
 13466 ;; *************** function _keyScan *****************
 13467 ;; Defined at:
 13468 ;;		line 21 in file "src/key.c"
 13469 ;; Parameters:    Size  Location     Type
 13470 ;;		None
 13471 ;; Auto vars:     Size  Location     Type
 13472 ;;  keyNum          1    3[COMMON] unsigned char 
 13473 ;; Return value:  Size  Location     Type
 13474 ;;                  1    wreg      void 
 13475 ;; Registers used:
 13476 ;;		wreg, status,2, status,0, pclath, cstack
 13477 ;; Tracked objects:
 13478 ;;		On entry : 0/0
 13479 ;;		On exit  : 0/0
 13480 ;;		Unchanged: 0/0
 13481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13486 ;;Total ram usage:        2 bytes
 13487 ;; Hardware stack levels used:    1
 13488 ;; Hardware stack levels required when called:    1
 13489 ;; This function calls:
 13490 ;;		_ReadKey
 13491 ;; This function is called by:
 13492 ;;		_TMR2_UserInterruptHandler
 13493 ;; This function uses a non-reentrant model
 13494 ;;
 13495                           
 13496                           
 13497                           ;psect for function _keyScan
 13498  0A4B                     _keyScan:	
 13499                           
 13500                           ;key.c: 23: static unsigned char lastKey = 0x00;
 13501                           ;key.c: 24: static unsigned char rptCount = 0;
 13502                           ;key.c: 26: unsigned char keyNum = ReadKey();
 13503                           
 13504                           ;incstack = 0
 13505                           ; Regs used in _keyScan: [wreg+status,2+status,0+pclath+cstack]
 13506  0A4B  3195  256E  318A   	fcall	_ReadKey
 13507  0A4E  00F2               	movwf	??_keyScan
 13508  0A4F  0872               	movf	??_keyScan,w
 13509  0A50  00F3               	movwf	keyScan@keyNum
 13510                           
 13511                           ;key.c: 27: if(keyNum != 0x00)
 13512  0A51  0873               	movf	keyScan@keyNum,w
 13513  0A52  1903               	btfsc	3,2
 13514  0A53  2A6B               	goto	i1l3512
 13515                           
 13516                           ;key.c: 28: {
 13517                           ;key.c: 29: if(keyNum == lastKey)
 13518  0A54  0873               	movf	keyScan@keyNum,w
 13519  0A55  067D               	xorwf	keyScan@lastKey,w
 13520  0A56  1D03               	skipz
 13521  0A57  2A7E               	goto	i1l3522
 13522                           
 13523                           ;key.c: 30: {
 13524                           ;key.c: 31: rptCount++;
 13525  0A58  3001               	movlw	1
 13526  0A59  00F2               	movwf	??_keyScan
 13527  0A5A  0872               	movf	??_keyScan,w
 13528  0A5B  0020               	movlb	0	; select bank0
 13529  0A5C  07EF               	addwf	keyScan@rptCount,f
 13530                           
 13531                           ;key.c: 32: if(rptCount >= 25 + 1)
 13532  0A5D  301A               	movlw	26
 13533  0A5E  026F               	subwf	keyScan@rptCount,w
 13534  0A5F  1C03               	skipc
 13535  0A60  2A80               	goto	i1l3524
 13536                           
 13537                           ;key.c: 33: {
 13538                           ;key.c: 34: rptCount = 25;
 13539  0A61  3019               	movlw	25
 13540  0A62  00F2               	movwf	??_keyScan
 13541  0A63  0872               	movf	??_keyScan,w
 13542  0A64  00EF               	movwf	keyScan@rptCount
 13543                           
 13544                           ;key.c: 35: keyValue = 0x40 | keyNum;
 13545  0A65  0873               	movf	keyScan@keyNum,w
 13546  0A66  3840               	iorlw	64
 13547  0A67  00F2               	movwf	??_keyScan
 13548  0A68  0872               	movf	??_keyScan,w
 13549  0A69  00FC               	movwf	_keyValue	;volatile
 13550                           
 13551                           ;key.c: 36: }
 13552                           ;key.c: 37: }
 13553  0A6A  2A80               	goto	i1l3524
 13554  0A6B                     i1l3512:	
 13555                           ;key.c: 41: }
 13556                           ;key.c: 42: }
 13557                           
 13558                           ;key.c: 38: else
 13559                           ;key.c: 39: {
 13560                           ;key.c: 40: rptCount = 0;
 13561                           
 13562                           
 13563                           ;key.c: 43: else
 13564                           ;key.c: 44: {
 13565                           ;key.c: 45: if(lastKey != 0x00)
 13566  0A6B  087D               	movf	keyScan@lastKey,w
 13567  0A6C  1903               	btfsc	3,2
 13568  0A6D  2A7E               	goto	i1l3522
 13569                           
 13570                           ;key.c: 46: {
 13571                           ;key.c: 47: if (rptCount >= 25)
 13572  0A6E  3019               	movlw	25
 13573  0A6F  0020               	movlb	0	; select bank0
 13574  0A70  026F               	subwf	keyScan@rptCount,w
 13575  0A71  1C03               	skipc
 13576  0A72  2A76               	goto	i1l3518
 13577                           
 13578                           ;key.c: 48: {
 13579                           ;key.c: 49: keyValue = 0x20 | lastKey;
 13580  0A73  087D               	movf	keyScan@lastKey,w
 13581  0A74  3820               	iorlw	32
 13582  0A75  2A7B               	goto	L11
 13583  0A76                     i1l3518:	
 13584                           ;key.c: 50: }
 13585                           
 13586                           
 13587                           ;key.c: 51: else if( rptCount > 2 )
 13588  0A76  3003               	movlw	3
 13589  0A77  026F               	subwf	keyScan@rptCount,w
 13590  0A78  1C03               	skipc
 13591  0A79  2A7E               	goto	i1l3522
 13592                           
 13593                           ;key.c: 52: {
 13594                           ;key.c: 53: keyValue = lastKey;
 13595  0A7A  087D               	movf	keyScan@lastKey,w
 13596  0A7B                     L11:	
 13597  0A7B  00F2               	movwf	??_keyScan
 13598  0A7C  0872               	movf	??_keyScan,w
 13599  0A7D  00FC               	movwf	_keyValue	;volatile
 13600  0A7E                     i1l3522:	
 13601                           
 13602                           ;key.c: 54: }
 13603                           ;key.c: 55: }
 13604                           ;key.c: 56: rptCount = 0;
 13605  0A7E  0020               	movlb	0	; select bank0
 13606  0A7F  01EF               	clrf	keyScan@rptCount
 13607  0A80                     i1l3524:	
 13608                           
 13609                           ;key.c: 57: }
 13610                           ;key.c: 58: lastKey = keyNum;
 13611  0A80  0873               	movf	keyScan@keyNum,w
 13612  0A81  00F2               	movwf	??_keyScan
 13613  0A82  0872               	movf	??_keyScan,w
 13614  0A83  00FD               	movwf	keyScan@lastKey
 13615  0A84  0008               	return
 13616  0A85                     __end_of_keyScan:	
 13617                           
 13618                           	psect	text66
 13619  156E                     __ptext66:	
 13620 ;; *************** function _ReadKey *****************
 13621 ;; Defined at:
 13622 ;;		line 11 in file "src/key.c"
 13623 ;; Parameters:    Size  Location     Type
 13624 ;;		None
 13625 ;; Auto vars:     Size  Location     Type
 13626 ;;  ReadData        1    1[COMMON] unsigned char 
 13627 ;; Return value:  Size  Location     Type
 13628 ;;                  1    wreg      unsigned char 
 13629 ;; Registers used:
 13630 ;;		wreg, status,2, status,0
 13631 ;; Tracked objects:
 13632 ;;		On entry : 0/0
 13633 ;;		On exit  : 0/0
 13634 ;;		Unchanged: 0/0
 13635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13637 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13638 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13639 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13640 ;;Total ram usage:        2 bytes
 13641 ;; Hardware stack levels used:    1
 13642 ;; This function calls:
 13643 ;;		Nothing
 13644 ;; This function is called by:
 13645 ;;		_keyScan
 13646 ;; This function uses a non-reentrant model
 13647 ;;
 13648                           
 13649                           
 13650                           ;psect for function _ReadKey
 13651  156E                     _ReadKey:	
 13652                           
 13653                           ;key.c: 13: static unsigned char Trg;
 13654                           ;key.c: 14: static unsigned char Cont;
 13655                           ;key.c: 15: unsigned char ReadData = (PORTC ^ 0xFF) & 0x01;
 13656                           
 13657                           ;incstack = 0
 13658                           ; Regs used in _ReadKey: [wreg+status,2+status,0]
 13659  156E  0020               	movlb	0	; select bank0
 13660  156F  090E               	comf	14,w	;volatile
 13661  1570  3901               	andlw	1
 13662  1571  00F0               	movwf	??_ReadKey
 13663  1572  0870               	movf	??_ReadKey,w
 13664  1573  00F1               	movwf	ReadKey@ReadData
 13665                           
 13666                           ;key.c: 16: Trg = ReadData & (ReadData ^ Cont);
 13667  1574  0871               	movf	ReadKey@ReadData,w
 13668  1575  066B               	xorwf	ReadKey@Cont,w
 13669  1576  0571               	andwf	ReadKey@ReadData,w
 13670  1577  00F0               	movwf	??_ReadKey
 13671  1578  0870               	movf	??_ReadKey,w
 13672  1579  00EC               	movwf	ReadKey@Trg
 13673                           
 13674                           ;key.c: 17: Cont = ReadData;
 13675  157A  0871               	movf	ReadKey@ReadData,w
 13676  157B  00F0               	movwf	??_ReadKey
 13677  157C  0870               	movf	??_ReadKey,w
 13678  157D  00EB               	movwf	ReadKey@Cont
 13679                           
 13680                           ;key.c: 18: return (Trg ^ Cont);
 13681  157E  086C               	movf	ReadKey@Trg,w
 13682  157F  066B               	xorwf	ReadKey@Cont,w
 13683  1580  0008               	return
 13684  1581                     __end_of_ReadKey:	
 13685                           
 13686                           	psect	text67
 13687  0EF0                     __ptext67:	
 13688 ;; *************** function _keyAction *****************
 13689 ;; Defined at:
 13690 ;;		line 61 in file "src/key.c"
 13691 ;; Parameters:    Size  Location     Type
 13692 ;;		None
 13693 ;; Auto vars:     Size  Location     Type
 13694 ;;  i               1    7[COMMON] unsigned char 
 13695 ;;  sta             1    6[COMMON] unsigned char 
 13696 ;; Return value:  Size  Location     Type
 13697 ;;                  1    wreg      void 
 13698 ;; Registers used:
 13699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13700 ;; Tracked objects:
 13701 ;;		On entry : 0/0
 13702 ;;		On exit  : 0/0
 13703 ;;		Unchanged: 0/0
 13704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13706 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13707 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13708 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13709 ;;Total ram usage:        4 bytes
 13710 ;; Hardware stack levels used:    1
 13711 ;; Hardware stack levels required when called:    3
 13712 ;; This function calls:
 13713 ;;		i1_indicateLedBle
 13714 ;;		i1_indicateLedDay
 13715 ;;		i1_indicateLedNight
 13716 ;;		i1_indicateLedOff
 13717 ;;		i1_updateDayBright
 13718 ;;		i1_updateDayRiseStatus
 13719 ;;		i1_updateNightBright
 13720 ;;		i1_updateNightRiseStatus
 13721 ;;		i1_updatePWM
 13722 ;; This function is called by:
 13723 ;;		_TMR2_UserInterruptHandler
 13724 ;; This function uses a non-reentrant model
 13725 ;;
 13726                           
 13727                           
 13728                           ;psect for function _keyAction
 13729  0EF0                     _keyAction:	
 13730                           
 13731                           ;key.c: 63: unsigned char sta;
 13732                           ;key.c: 64: if (keyValue == 0x01)
 13733                           
 13734                           ;incstack = 0
 13735                           ; Regs used in _keyAction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13736  0EF0  037C               	decf	_keyValue,w	;volatile
 13737  0EF1  1D03               	btfss	3,2
 13738  0EF2  2F51               	goto	i1l3566
 13739                           
 13740                           ;key.c: 65: {
 13741                           ;key.c: 66: gLedPara.fSta++;
 13742  0EF3  0022               	movlb	2	; select bank2
 13743  0EF4  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 13744  0EF5  3903               	andlw	3
 13745  0EF6  00F4               	movwf	??_keyAction
 13746  0EF7  0AF4               	incf	??_keyAction,f
 13747  0EF8  0DF4               	rlf	??_keyAction,f
 13748  0EF9  0820               	movf	_gLedPara^(0+256),w	;volatile
 13749  0EFA  0674               	xorwf	??_keyAction,w
 13750  0EFB  39F9               	andlw	-7
 13751  0EFC  0674               	xorwf	??_keyAction,w
 13752  0EFD  00A0               	movwf	_gLedPara^(0+256)	;volatile
 13753                           
 13754                           ;key.c: 67: sta = gLedPara.fSta;
 13755  0EFE  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 13756  0EFF  3903               	andlw	3
 13757  0F00  00F4               	movwf	??_keyAction
 13758  0F01  0874               	movf	??_keyAction,w
 13759  0F02  00F6               	movwf	keyAction@sta
 13760                           
 13761                           ;key.c: 68: switch(sta)
 13762  0F03  2F42               	goto	i1l3564
 13763  0F04                     i1l3530:	
 13764                           ;key.c: 69: {
 13765                           ;key.c: 70: case 0:
 13766                           
 13767                           
 13768                           ;key.c: 71: for (unsigned char i = 0; i < 4; i++)
 13769  0F04  01F7               	clrf	keyAction@i
 13770  0F05  3004               	movlw	4
 13771  0F06  0277               	subwf	keyAction@i,w
 13772  0F07  1803               	btfsc	3,0
 13773  0F08  2F21               	goto	i1l3542
 13774  0F09                     i1l3536:	
 13775                           
 13776                           ;key.c: 72: {
 13777                           ;key.c: 73: gLedPara.mPara.manualPara.nBrt[i] = 0;
 13778  0F09  3577               	lslf	keyAction@i,w
 13779  0F0A  3E02               	addlw	2
 13780  0F0B  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 13781  0F0C  0086               	movwf	6
 13782  0F0D  3001               	movlw	1	; select bank2/3
 13783  0F0E  0087               	movwf	7
 13784  0F0F  3000               	movlw	0
 13785  0F10  3FC0               	movwi [0]fsr1
 13786  0F11  3FC1               	movwi [1]fsr1
 13787                           
 13788                           ;key.c: 74: gLedRunPara.nCurrentBrt[i] = 0;
 13789  0F12  3577               	lslf	keyAction@i,w
 13790  0F13  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 13791  0F14  0086               	movwf	6
 13792  0F15  0187               	clrf	7
 13793  0F16  3000               	movlw	0
 13794  0F17  3FC0               	movwi [0]fsr1
 13795  0F18  3FC1               	movwi [1]fsr1
 13796  0F19  3001               	movlw	1
 13797  0F1A  00F4               	movwf	??_keyAction
 13798  0F1B  0874               	movf	??_keyAction,w
 13799  0F1C  07F7               	addwf	keyAction@i,f
 13800  0F1D  3004               	movlw	4
 13801  0F1E  0277               	subwf	keyAction@i,w
 13802  0F1F  1C03               	skipc
 13803  0F20  2F09               	goto	i1l3536
 13804  0F21                     i1l3542:	
 13805                           
 13806                           ;key.c: 75: }
 13807                           ;key.c: 76: updatePWM();
 13808  0F21  3197  27E0  318E   	fcall	i1_updatePWM
 13809                           
 13810                           ;key.c: 78: indicateLedOff();
 13811  0F24  3194  2486  318E   	fcall	i1_indicateLedOff
 13812                           
 13813                           ;key.c: 79: break;
 13814  0F27  2FF9               	goto	i1l380
 13815  0F28                     i1l3546:	
 13816                           ;key.c: 81: case 1:
 13817                           
 13818                           
 13819                           ;key.c: 82: updateDayBright();
 13820  0F28  3188  2090  318E   	fcall	i1_updateDayBright
 13821                           
 13822                           ;key.c: 88: indicateLedDay();
 13823  0F2B  3194  247C  318E   	fcall	i1_indicateLedDay
 13824                           
 13825                           ;key.c: 89: updateDayRiseStatus();
 13826  0F2E  3196  2600  318E   	fcall	i1_updateDayRiseStatus
 13827                           
 13828                           ;key.c: 90: break;
 13829  0F31  2FF9               	goto	i1l380
 13830  0F32                     i1l3552:	
 13831                           ;key.c: 92: case 2:
 13832                           
 13833                           
 13834                           ;key.c: 93: updateNightBright();
 13835  0F32  3187  27C8  318E   	fcall	i1_updateNightBright
 13836                           
 13837                           ;key.c: 99: indicateLedNight();
 13838  0F35  3194  2481  318E   	fcall	i1_indicateLedNight
 13839                           
 13840                           ;key.c: 100: updateNightRiseStatus();
 13841  0F38  3196  2616  318E   	fcall	i1_updateNightRiseStatus
 13842                           
 13843                           ;key.c: 101: break;
 13844  0F3B  2FF9               	goto	i1l380
 13845  0F3C                     i1l3558:	
 13846                           ;key.c: 103: case 3:
 13847                           
 13848                           
 13849                           ;key.c: 105: indicateLedBle();
 13850  0F3C  3194  2477  318E   	fcall	i1_indicateLedBle
 13851                           
 13852                           ;key.c: 106: gLedPara.fAuto = 1;
 13853  0F3F  0022               	movlb	2	; select bank2
 13854  0F40  1420               	bsf	_gLedPara^(0+256),0	;volatile
 13855                           
 13856                           ;key.c: 108: }
 13857                           
 13858                           ;key.c: 107: break;
 13859  0F41  2FF9               	goto	i1l380
 13860  0F42                     i1l3564:	
 13861  0F42  0876               	movf	keyAction@sta,w
 13862                           
 13863                           ; Switch size 1, requested type "space"
 13864                           ; Number of cases is 4, Range of values is 0 to 3
 13865                           ; switch strategies available:
 13866                           ; Name         Instructions Cycles
 13867                           ; simple_byte           13     7 (average)
 13868                           ; direct_byte           14     6 (fixed)
 13869                           ; jumptable            260     6 (fixed)
 13870                           ;	Chosen strategy is simple_byte
 13871  0F43  3A00               	xorlw	0	; case 0
 13872  0F44  1903               	skipnz
 13873  0F45  2F04               	goto	i1l3530
 13874  0F46  3A01               	xorlw	1	; case 1
 13875  0F47  1903               	skipnz
 13876  0F48  2F28               	goto	i1l3546
 13877  0F49  3A03               	xorlw	3	; case 2
 13878  0F4A  1903               	skipnz
 13879  0F4B  2F32               	goto	i1l3552
 13880  0F4C  3A01               	xorlw	1	; case 3
 13881  0F4D  1903               	skipnz
 13882  0F4E  2F3C               	goto	i1l3558
 13883  0F4F  2FF9               	goto	i1l380
 13884                           
 13885                           ;key.c: 109: }
 13886  0F50  2FF9               	goto	i1l380
 13887  0F51                     i1l3566:	
 13888                           
 13889                           ;key.c: 110: else if (keyValue == (0x20 | 0x01))
 13890  0F51  3021               	movlw	33
 13891  0F52  067C               	xorwf	_keyValue,w	;volatile
 13892  0F53  1D03               	btfss	3,2
 13893  0F54  2F6D               	goto	i1l3578
 13894                           
 13895                           ;key.c: 111: {
 13896                           ;key.c: 112: sta = gLedPara.fSta;
 13897  0F55  0022               	movlb	2	; select bank2
 13898  0F56  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 13899  0F57  3903               	andlw	3
 13900  0F58  00F4               	movwf	??_keyAction
 13901  0F59  0874               	movf	??_keyAction,w
 13902  0F5A  00F6               	movwf	keyAction@sta
 13903                           
 13904                           ;key.c: 113: switch(sta)
 13905  0F5B  2F64               	goto	i1l3576
 13906  0F5C                     i1l3570:	
 13907                           ;key.c: 114: {
 13908                           ;key.c: 115: case 1:
 13909                           
 13910                           
 13911                           ;key.c: 116: updateDayRiseStatus();
 13912  0F5C  3196  2600  318E   	fcall	i1_updateDayRiseStatus
 13913                           
 13914                           ;key.c: 117: break;
 13915  0F5F  2FF9               	goto	i1l380
 13916  0F60                     i1l3572:	
 13917                           ;key.c: 119: case 2:
 13918                           
 13919                           
 13920                           ;key.c: 120: updateNightRiseStatus();
 13921  0F60  3196  2616  318E   	fcall	i1_updateNightRiseStatus
 13922                           
 13923                           ;key.c: 125: }
 13924                           
 13925                           ;key.c: 124: break;
 13926                           
 13927                           ;key.c: 123: default:
 13928                           
 13929                           ;key.c: 121: break;
 13930  0F63  2FF9               	goto	i1l380
 13931  0F64                     i1l3576:	
 13932  0F64  0876               	movf	keyAction@sta,w
 13933                           
 13934                           ; Switch size 1, requested type "space"
 13935                           ; Number of cases is 2, Range of values is 1 to 2
 13936                           ; switch strategies available:
 13937                           ; Name         Instructions Cycles
 13938                           ; simple_byte            7     4 (average)
 13939                           ; direct_byte           13     9 (fixed)
 13940                           ; jumptable            263     9 (fixed)
 13941                           ;	Chosen strategy is simple_byte
 13942  0F65  3A01               	xorlw	1	; case 1
 13943  0F66  1903               	skipnz
 13944  0F67  2F5C               	goto	i1l3570
 13945  0F68  3A03               	xorlw	3	; case 2
 13946  0F69  1903               	skipnz
 13947  0F6A  2F60               	goto	i1l3572
 13948  0F6B  2FF9               	goto	i1l380
 13949                           
 13950                           ;key.c: 126: }
 13951  0F6C  2FF9               	goto	i1l380
 13952  0F6D                     i1l3578:	
 13953                           
 13954                           ;key.c: 127: else if ( keyValue == (0x40 | 0x01) )
 13955  0F6D  3041               	movlw	65
 13956  0F6E  067C               	xorwf	_keyValue,w	;volatile
 13957  0F6F  1D03               	btfss	3,2
 13958  0F70  2FF9               	goto	i1l380
 13959                           
 13960                           ;key.c: 128: {
 13961                           ;key.c: 129: sta = gLedPara.fSta;
 13962  0F71  0022               	movlb	2	; select bank2
 13963  0F72  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 13964  0F73  3903               	andlw	3
 13965  0F74  00F4               	movwf	??_keyAction
 13966  0F75  0874               	movf	??_keyAction,w
 13967  0F76  00F6               	movwf	keyAction@sta
 13968                           
 13969                           ;key.c: 130: switch(sta)
 13970  0F77  2FEE               	goto	i1l3612
 13971  0F78                     i1l390:	
 13972                           ;key.c: 131: {
 13973                           ;key.c: 132: case 0:
 13974                           
 13975                           
 13976                           ;key.c: 133: gLedPara.tPara.nDayBrt = 10;
 13977  0F78  3000               	movlw	0
 13978  0F79  0022               	movlb	2	; select bank2
 13979  0F7A  00CC               	movwf	((_gLedPara+1)^(0+256)+43)	;volatile
 13980  0F7B  300A               	movlw	10
 13981  0F7C  00CB               	movwf	(_gLedPara^(0+256)+43)	;volatile
 13982                           
 13983                           ;key.c: 134: gLedPara.fSta++;
 13984  0F7D  0C20               	rrf	_gLedPara^(0+256),w	;volatile
 13985  0F7E  3903               	andlw	3
 13986  0F7F  00F4               	movwf	??_keyAction
 13987  0F80  0AF4               	incf	??_keyAction,f
 13988  0F81  0DF4               	rlf	??_keyAction,f
 13989  0F82  0820               	movf	_gLedPara^(0+256),w	;volatile
 13990  0F83  0674               	xorwf	??_keyAction,w
 13991  0F84  39F9               	andlw	-7
 13992  0F85  0674               	xorwf	??_keyAction,w
 13993  0F86  00A0               	movwf	_gLedPara^(0+256)	;volatile
 13994                           
 13995                           ;key.c: 135: gLedRunPara.fDr = 1;
 13996  0F87  0021               	movlb	1	; select bank1
 13997  0F88  1650               	bsf	_gLedRunPara^(0+128),4	;volatile
 13998                           
 13999                           ;key.c: 137: updateDayBright();
 14000  0F89  3188  2090  318E   	fcall	i1_updateDayBright
 14001                           
 14002                           ;key.c: 138: indicateLedDay();
 14003  0F8C  3194  247C  318E   	fcall	i1_indicateLedDay
 14004                           
 14005                           ;key.c: 139: break;
 14006  0F8F  2FF9               	goto	i1l380
 14007  0F90                     i1l392:	
 14008                           ;key.c: 141: case 1:
 14009                           
 14010                           
 14011                           ;key.c: 142: if (gLedRunPara.fDr)
 14012  0F90  0021               	movlb	1	; select bank1
 14013  0F91  1E50               	btfss	_gLedRunPara^(0+128),4	;volatile
 14014  0F92  2FAA               	goto	i1l3594
 14015                           
 14016                           ;key.c: 143: {
 14017                           ;key.c: 144: if (gLedPara.tPara.nDayBrt + 10 < 1000)
 14018  0F93  0022               	movlb	2	; select bank2
 14019  0F94  084B               	movf	(_gLedPara^(0+256)+43),w	;volatile
 14020  0F95  3E0A               	addlw	10
 14021  0F96  00F4               	movwf	??_keyAction
 14022  0F97  3000               	movlw	0
 14023  0F98  3D4C               	addwfc	((_gLedPara+1)^(0+256)+43),w	;volatile
 14024  0F99  00F5               	movwf	??_keyAction+1
 14025  0F9A  3003               	movlw	3
 14026  0F9B  0275               	subwf	??_keyAction+1,w
 14027  0F9C  30E8               	movlw	232
 14028  0F9D  1903               	skipnz
 14029  0F9E  0274               	subwf	??_keyAction,w
 14030  0F9F  1803               	skipnc
 14031  0FA0  2FA6               	goto	i1l394
 14032                           
 14033                           ;key.c: 145: {
 14034                           ;key.c: 146: gLedPara.tPara.nDayBrt += 10;
 14035  0FA1  300A               	movlw	10
 14036  0FA2  07CB               	addwf	(_gLedPara^(0+256)+43),f	;volatile
 14037  0FA3  3000               	movlw	0
 14038  0FA4  3DCC               	addwfc	((_gLedPara+1)^(0+256)+43),f	;volatile
 14039                           
 14040                           ;key.c: 147: }
 14041  0FA5  2FBB               	goto	i1l3598
 14042  0FA6                     i1l394:	
 14043                           
 14044                           ;key.c: 148: else
 14045                           ;key.c: 149: {
 14046                           ;key.c: 150: gLedPara.tPara.nDayBrt = 1000;
 14047  0FA6  3003               	movlw	3
 14048  0FA7  00CC               	movwf	((_gLedPara+1)^(0+256)+43)	;volatile
 14049  0FA8  30E8               	movlw	232
 14050  0FA9  2FBA               	goto	L12
 14051  0FAA                     i1l3594:	
 14052                           ;key.c: 151: }
 14053                           ;key.c: 152: }
 14054                           
 14055                           
 14056                           ;key.c: 153: else
 14057                           ;key.c: 154: {
 14058                           ;key.c: 155: if (gLedPara.tPara.nDayBrt > 10 + 10)
 14059  0FAA  3000               	movlw	0
 14060  0FAB  0022               	movlb	2	; select bank2
 14061  0FAC  024C               	subwf	((_gLedPara+1)^(0+256)+43),w	;volatile
 14062  0FAD  3015               	movlw	21
 14063  0FAE  1903               	skipnz
 14064  0FAF  024B               	subwf	(_gLedPara^(0+256)+43),w	;volatile
 14065  0FB0  1C03               	skipc
 14066  0FB1  2FB7               	goto	i1l397
 14067                           
 14068                           ;key.c: 156: {
 14069                           ;key.c: 157: gLedPara.tPara.nDayBrt -= 10;
 14070  0FB2  300A               	movlw	10
 14071  0FB3  02CB               	subwf	(_gLedPara^(0+256)+43),f	;volatile
 14072  0FB4  3000               	movlw	0
 14073  0FB5  3BCC               	subwfb	((_gLedPara+1)^(0+256)+43),f	;volatile
 14074                           
 14075                           ;key.c: 158: }
 14076  0FB6  2FBB               	goto	i1l3598
 14077  0FB7                     i1l397:	
 14078                           
 14079                           ;key.c: 159: else
 14080                           ;key.c: 160: {
 14081                           ;key.c: 161: gLedPara.tPara.nDayBrt = 10;
 14082  0FB7  3000               	movlw	0
 14083  0FB8  00CC               	movwf	((_gLedPara+1)^(0+256)+43)	;volatile
 14084  0FB9  300A               	movlw	10
 14085  0FBA                     L12:	
 14086  0FBA  00CB               	movwf	(_gLedPara^(0+256)+43)	;volatile
 14087  0FBB                     i1l3598:	
 14088                           
 14089                           ;key.c: 162: }
 14090                           ;key.c: 163: }
 14091                           ;key.c: 164: updateDayBright();
 14092  0FBB  3188  2090  318E   	fcall	i1_updateDayBright
 14093                           
 14094                           ;key.c: 165: break;
 14095  0FBE  2FF9               	goto	i1l380
 14096  0FBF                     i1l399:	
 14097                           ;key.c: 167: case 2:
 14098                           
 14099                           
 14100                           ;key.c: 168: if (gLedRunPara.fNr)
 14101  0FBF  0021               	movlb	1	; select bank1
 14102  0FC0  1ED0               	btfss	_gLedRunPara^(0+128),5	;volatile
 14103  0FC1  2FD9               	goto	i1l3604
 14104                           
 14105                           ;key.c: 169: {
 14106                           ;key.c: 170: if (gLedPara.tPara.nNightBrt + 10 < 1000)
 14107  0FC2  0022               	movlb	2	; select bank2
 14108  0FC3  084D               	movf	(_gLedPara^(0+256)+45),w	;volatile
 14109  0FC4  3E0A               	addlw	10
 14110  0FC5  00F4               	movwf	??_keyAction
 14111  0FC6  3000               	movlw	0
 14112  0FC7  3D4E               	addwfc	((_gLedPara+1)^(0+256)+45),w	;volatile
 14113  0FC8  00F5               	movwf	??_keyAction+1
 14114  0FC9  3003               	movlw	3
 14115  0FCA  0275               	subwf	??_keyAction+1,w
 14116  0FCB  30E8               	movlw	232
 14117  0FCC  1903               	skipnz
 14118  0FCD  0274               	subwf	??_keyAction,w
 14119  0FCE  1803               	skipnc
 14120  0FCF  2FD5               	goto	i1l401
 14121                           
 14122                           ;key.c: 171: {
 14123                           ;key.c: 172: gLedPara.tPara.nNightBrt += 10;
 14124  0FD0  300A               	movlw	10
 14125  0FD1  07CD               	addwf	(_gLedPara^(0+256)+45),f	;volatile
 14126  0FD2  3000               	movlw	0
 14127  0FD3  3DCE               	addwfc	((_gLedPara+1)^(0+256)+45),f	;volatile
 14128                           
 14129                           ;key.c: 173: }
 14130  0FD4  2FEA               	goto	i1l3608
 14131  0FD5                     i1l401:	
 14132                           
 14133                           ;key.c: 174: else
 14134                           ;key.c: 175: {
 14135                           ;key.c: 176: gLedPara.tPara.nNightBrt = 1000;
 14136  0FD5  3003               	movlw	3
 14137  0FD6  00CE               	movwf	((_gLedPara+1)^(0+256)+45)	;volatile
 14138  0FD7  30E8               	movlw	232
 14139  0FD8  2FE9               	goto	L13
 14140  0FD9                     i1l3604:	
 14141                           ;key.c: 177: }
 14142                           ;key.c: 178: }
 14143                           
 14144                           
 14145                           ;key.c: 179: else
 14146                           ;key.c: 180: {
 14147                           ;key.c: 181: if (gLedPara.tPara.nNightBrt > 10 + 10)
 14148  0FD9  3000               	movlw	0
 14149  0FDA  0022               	movlb	2	; select bank2
 14150  0FDB  024E               	subwf	((_gLedPara+1)^(0+256)+45),w	;volatile
 14151  0FDC  3015               	movlw	21
 14152  0FDD  1903               	skipnz
 14153  0FDE  024D               	subwf	(_gLedPara^(0+256)+45),w	;volatile
 14154  0FDF  1C03               	skipc
 14155  0FE0  2FE6               	goto	i1l404
 14156                           
 14157                           ;key.c: 182: {
 14158                           ;key.c: 183: gLedPara.tPara.nNightBrt -= 10;
 14159  0FE1  300A               	movlw	10
 14160  0FE2  02CD               	subwf	(_gLedPara^(0+256)+45),f	;volatile
 14161  0FE3  3000               	movlw	0
 14162  0FE4  3BCE               	subwfb	((_gLedPara+1)^(0+256)+45),f	;volatile
 14163                           
 14164                           ;key.c: 184: }
 14165  0FE5  2FEA               	goto	i1l3608
 14166  0FE6                     i1l404:	
 14167                           
 14168                           ;key.c: 185: else
 14169                           ;key.c: 186: {
 14170                           ;key.c: 187: gLedPara.tPara.nNightBrt = 10;
 14171  0FE6  3000               	movlw	0
 14172  0FE7  00CE               	movwf	((_gLedPara+1)^(0+256)+45)	;volatile
 14173  0FE8  300A               	movlw	10
 14174  0FE9                     L13:	
 14175  0FE9  00CD               	movwf	(_gLedPara^(0+256)+45)	;volatile
 14176  0FEA                     i1l3608:	
 14177                           
 14178                           ;key.c: 188: }
 14179                           ;key.c: 189: }
 14180                           ;key.c: 190: updateNightBright();
 14181  0FEA  3187  27C8  318E   	fcall	i1_updateNightBright
 14182                           
 14183                           ;key.c: 192: }
 14184                           
 14185                           ;key.c: 191: break;
 14186  0FED  2FF9               	goto	i1l380
 14187  0FEE                     i1l3612:	
 14188  0FEE  0876               	movf	keyAction@sta,w
 14189                           
 14190                           ; Switch size 1, requested type "space"
 14191                           ; Number of cases is 3, Range of values is 0 to 2
 14192                           ; switch strategies available:
 14193                           ; Name         Instructions Cycles
 14194                           ; simple_byte           10     6 (average)
 14195                           ; direct_byte           12     6 (fixed)
 14196                           ; jumptable            260     6 (fixed)
 14197                           ;	Chosen strategy is simple_byte
 14198  0FEF  3A00               	xorlw	0	; case 0
 14199  0FF0  1903               	skipnz
 14200  0FF1  2F78               	goto	i1l390
 14201  0FF2  3A01               	xorlw	1	; case 1
 14202  0FF3  1903               	skipnz
 14203  0FF4  2F90               	goto	i1l392
 14204  0FF5  3A03               	xorlw	3	; case 2
 14205  0FF6  1903               	skipnz
 14206  0FF7  2FBF               	goto	i1l399
 14207  0FF8  2FF9               	goto	i1l380
 14208  0FF9                     i1l380:	
 14209                           
 14210                           ;key.c: 193: }
 14211                           ;key.c: 194: gLedRunPara.fSave = 1;
 14212  0FF9  0021               	movlb	1	; select bank1
 14213  0FFA  1550               	bsf	_gLedRunPara^(0+128),2	;volatile
 14214                           
 14215                           ;key.c: 195: gLedRunPara.nSaveDelayCount = 3;
 14216  0FFB  3003               	movlw	3
 14217  0FFC  00F4               	movwf	??_keyAction
 14218  0FFD  0874               	movf	??_keyAction,w
 14219  0FFE  00D3               	movwf	(_gLedRunPara^(0+128)+3)	;volatile
 14220  0FFF  0008               	return
 14221  1000                     __end_of_keyAction:	
 14222                           
 14223                           	psect	text68
 14224  1616                     __ptext68:	
 14225 ;; *************** function i1_updateNightRiseStatus *****************
 14226 ;; Defined at:
 14227 ;;		line 402 in file "src/led.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;		None
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;		None
 14232 ;; Return value:  Size  Location     Type
 14233 ;;                  1    wreg      void 
 14234 ;; Registers used:
 14235 ;;		wreg
 14236 ;; Tracked objects:
 14237 ;;		On entry : 0/0
 14238 ;;		On exit  : 0/0
 14239 ;;		Unchanged: 0/0
 14240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14245 ;;Total ram usage:        0 bytes
 14246 ;; Hardware stack levels used:    1
 14247 ;; This function calls:
 14248 ;;		Nothing
 14249 ;; This function is called by:
 14250 ;;		_keyAction
 14251 ;; This function uses a non-reentrant model
 14252 ;;
 14253                           
 14254                           
 14255                           ;psect for function i1_updateNightRiseStatus
 14256  1616                     i1_updateNightRiseStatus:	
 14257                           
 14258                           ;led.c: 404: if (gLedPara.tPara.nNightBrt > 1000 - 200)
 14259                           
 14260                           ;incstack = 0
 14261                           ; Regs used in i1_updateNightRiseStatus: [wreg]
 14262  1616  3003               	movlw	3
 14263  1617  0022               	movlb	2	; select bank2
 14264  1618  024E               	subwf	((_gLedPara+1)^(0+256)+45),w	;volatile
 14265  1619  3021               	movlw	33
 14266  161A  1903               	skipnz
 14267  161B  024D               	subwf	(_gLedPara^(0+256)+45),w	;volatile
 14268  161C  1C03               	skipc
 14269  161D  2E21               	goto	i1l3298
 14270                           
 14271                           ;led.c: 405: {
 14272                           ;led.c: 406: gLedRunPara.fNr = 0;
 14273  161E  0021               	movlb	1	; select bank1
 14274  161F  12D0               	bcf	_gLedRunPara^(0+128),5	;volatile
 14275                           
 14276                           ;led.c: 407: }
 14277  1620  0008               	return
 14278  1621                     i1l3298:	
 14279                           
 14280                           ;led.c: 408: else if (gLedPara.tPara.nNightBrt < 200)
 14281  1621  3000               	movlw	0
 14282  1622  0022               	movlb	2	; select bank2
 14283  1623  024E               	subwf	((_gLedPara+1)^(0+256)+45),w	;volatile
 14284  1624  30C8               	movlw	200
 14285  1625  1903               	skipnz
 14286  1626  024D               	subwf	(_gLedPara^(0+256)+45),w	;volatile
 14287  1627  1803               	skipnc
 14288  1628  0008               	return
 14289                           
 14290                           ;led.c: 409: {
 14291                           ;led.c: 410: gLedRunPara.fNr = 1;
 14292  1629  0021               	movlb	1	; select bank1
 14293  162A  16D0               	bsf	_gLedRunPara^(0+128),5	;volatile
 14294  162B  0008               	return
 14295  162C                     __end_ofi1_updateNightRiseStatus:	
 14296                           
 14297                           	psect	text69
 14298  07C8                     __ptext69:	
 14299 ;; *************** function i1_updateNightBright *****************
 14300 ;; Defined at:
 14301 ;;		line 384 in file "src/led.c"
 14302 ;; Parameters:    Size  Location     Type
 14303 ;;		None
 14304 ;; Auto vars:     Size  Location     Type
 14305 ;;  updateNightB    1    3[COMMON] unsigned char 
 14306 ;; Return value:  Size  Location     Type
 14307 ;;                  1    wreg      void 
 14308 ;; Registers used:
 14309 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14310 ;; Tracked objects:
 14311 ;;		On entry : 0/0
 14312 ;;		On exit  : 0/0
 14313 ;;		Unchanged: 0/0
 14314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14317 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;Total ram usage:        2 bytes
 14320 ;; Hardware stack levels used:    1
 14321 ;; Hardware stack levels required when called:    2
 14322 ;; This function calls:
 14323 ;;		i1_updatePWM
 14324 ;; This function is called by:
 14325 ;;		_keyAction
 14326 ;; This function uses a non-reentrant model
 14327 ;;
 14328                           
 14329                           
 14330                           ;psect for function i1_updateNightBright
 14331  07C8                     i1_updateNightBright:	
 14332                           
 14333                           ;led.c: 386: for (unsigned char i = 0; i < 4; i++)
 14334                           
 14335                           ;incstack = 0
 14336                           ; Regs used in i1_updateNightBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14337  07C8  01F3               	clrf	i1updateNightBright@i
 14338  07C9  3004               	movlw	4
 14339  07CA  0273               	subwf	i1updateNightBright@i,w
 14340  07CB  1803               	btfsc	3,0
 14341  07CC  2FFD               	goto	i1l3292
 14342  07CD                     i1l3282:	
 14343                           
 14344                           ;led.c: 387: {
 14345                           ;led.c: 388: if (i == 2)
 14346  07CD  3002               	movlw	2
 14347  07CE  0673               	xorwf	i1updateNightBright@i,w
 14348  07CF  1D03               	btfss	3,2
 14349  07D0  2FE5               	goto	i1l3286
 14350                           
 14351                           ;led.c: 389: {
 14352                           ;led.c: 390: gLedPara.mPara.manualPara.nBrt[i] = gLedPara.tPara.nNightBrt;
 14353  07D1  3573               	lslf	i1updateNightBright@i,w
 14354  07D2  3E02               	addlw	2
 14355  07D3  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 14356  07D4  0086               	movwf	6
 14357  07D5  3001               	movlw	1	; select bank2/3
 14358  07D6  0087               	movwf	7
 14359  07D7  0022               	movlb	2	; select bank2
 14360  07D8  084D               	movf	(_gLedPara^(0+256)+45),w	;volatile
 14361  07D9  3FC0               	movwi [0]fsr1
 14362  07DA  084E               	movf	((_gLedPara+1)^(0+256)+45),w	;volatile
 14363  07DB  3FC1               	movwi [1]fsr1
 14364                           
 14365                           ;led.c: 391: gLedRunPara.nCurrentBrt[i] = gLedPara.tPara.nNightBrt;
 14366  07DC  3573               	lslf	i1updateNightBright@i,w
 14367  07DD  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 14368  07DE  0086               	movwf	6
 14369  07DF  0187               	clrf	7
 14370  07E0  084D               	movf	(_gLedPara^(0+256)+45),w	;volatile
 14371  07E1  3FC0               	movwi [0]fsr1
 14372  07E2  084E               	movf	((_gLedPara+1)^(0+256)+45),w	;volatile
 14373  07E3  3FC1               	movwi [1]fsr1
 14374                           
 14375                           ;led.c: 392: }
 14376  07E4  2FF5               	goto	i1l3288
 14377  07E5                     i1l3286:	
 14378                           
 14379                           ;led.c: 393: else
 14380                           ;led.c: 394: {
 14381                           ;led.c: 395: gLedPara.mPara.manualPara.nBrt[i] = 0;
 14382  07E5  3573               	lslf	i1updateNightBright@i,w
 14383  07E6  3E02               	addlw	2
 14384  07E7  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 14385  07E8  0086               	movwf	6
 14386  07E9  3001               	movlw	1	; select bank2/3
 14387  07EA  0087               	movwf	7
 14388  07EB  3000               	movlw	0
 14389  07EC  3FC0               	movwi [0]fsr1
 14390  07ED  3FC1               	movwi [1]fsr1
 14391                           
 14392                           ;led.c: 396: gLedRunPara.nCurrentBrt[i] = 0;
 14393  07EE  3573               	lslf	i1updateNightBright@i,w
 14394  07EF  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 14395  07F0  0086               	movwf	6
 14396  07F1  0187               	clrf	7
 14397  07F2  3000               	movlw	0
 14398  07F3  3FC0               	movwi [0]fsr1
 14399  07F4  3FC1               	movwi [1]fsr1
 14400  07F5                     i1l3288:	
 14401  07F5  3001               	movlw	1
 14402  07F6  00F2               	movwf	??i1_updateNightBright
 14403  07F7  0872               	movf	??i1_updateNightBright,w
 14404  07F8  07F3               	addwf	i1updateNightBright@i,f
 14405  07F9  3004               	movlw	4
 14406  07FA  0273               	subwf	i1updateNightBright@i,w
 14407  07FB  1C03               	skipc
 14408  07FC  2FCD               	goto	i1l3282
 14409  07FD                     i1l3292:	
 14410                           
 14411                           ;led.c: 397: }
 14412                           ;led.c: 398: }
 14413                           ;led.c: 399: updatePWM();
 14414  07FD  3197  27E0         	fcall	i1_updatePWM
 14415  07FF  0008               	return
 14416  0800                     __end_ofi1_updateNightBright:	
 14417                           
 14418                           	psect	text70
 14419  1600                     __ptext70:	
 14420 ;; *************** function i1_updateDayRiseStatus *****************
 14421 ;; Defined at:
 14422 ;;		line 372 in file "src/led.c"
 14423 ;; Parameters:    Size  Location     Type
 14424 ;;		None
 14425 ;; Auto vars:     Size  Location     Type
 14426 ;;		None
 14427 ;; Return value:  Size  Location     Type
 14428 ;;                  1    wreg      void 
 14429 ;; Registers used:
 14430 ;;		wreg
 14431 ;; Tracked objects:
 14432 ;;		On entry : 0/0
 14433 ;;		On exit  : 0/0
 14434 ;;		Unchanged: 0/0
 14435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14440 ;;Total ram usage:        0 bytes
 14441 ;; Hardware stack levels used:    1
 14442 ;; This function calls:
 14443 ;;		Nothing
 14444 ;; This function is called by:
 14445 ;;		_keyAction
 14446 ;; This function uses a non-reentrant model
 14447 ;;
 14448                           
 14449                           
 14450                           ;psect for function i1_updateDayRiseStatus
 14451  1600                     i1_updateDayRiseStatus:	
 14452                           
 14453                           ;led.c: 374: if (gLedPara.tPara.nDayBrt > 1000 - 200)
 14454                           
 14455                           ;incstack = 0
 14456                           ; Regs used in i1_updateDayRiseStatus: [wreg]
 14457  1600  3003               	movlw	3
 14458  1601  0022               	movlb	2	; select bank2
 14459  1602  024C               	subwf	((_gLedPara+1)^(0+256)+43),w	;volatile
 14460  1603  3021               	movlw	33
 14461  1604  1903               	skipnz
 14462  1605  024B               	subwf	(_gLedPara^(0+256)+43),w	;volatile
 14463  1606  1C03               	skipc
 14464  1607  2E0B               	goto	i1l3272
 14465                           
 14466                           ;led.c: 375: {
 14467                           ;led.c: 376: gLedRunPara.fDr = 0;
 14468  1608  0021               	movlb	1	; select bank1
 14469  1609  1250               	bcf	_gLedRunPara^(0+128),4	;volatile
 14470                           
 14471                           ;led.c: 377: }
 14472  160A  0008               	return
 14473  160B                     i1l3272:	
 14474                           
 14475                           ;led.c: 378: else if (gLedPara.tPara.nDayBrt < 200)
 14476  160B  3000               	movlw	0
 14477  160C  0022               	movlb	2	; select bank2
 14478  160D  024C               	subwf	((_gLedPara+1)^(0+256)+43),w	;volatile
 14479  160E  30C8               	movlw	200
 14480  160F  1903               	skipnz
 14481  1610  024B               	subwf	(_gLedPara^(0+256)+43),w	;volatile
 14482  1611  1803               	skipnc
 14483  1612  0008               	return
 14484                           
 14485                           ;led.c: 379: {
 14486                           ;led.c: 380: gLedRunPara.fDr = 1;
 14487  1613  0021               	movlb	1	; select bank1
 14488  1614  1650               	bsf	_gLedRunPara^(0+128),4	;volatile
 14489  1615  0008               	return
 14490  1616                     __end_ofi1_updateDayRiseStatus:	
 14491                           
 14492                           	psect	text71
 14493  0890                     __ptext71:	
 14494 ;; *************** function i1_updateDayBright *****************
 14495 ;; Defined at:
 14496 ;;		line 362 in file "src/led.c"
 14497 ;; Parameters:    Size  Location     Type
 14498 ;;		None
 14499 ;; Auto vars:     Size  Location     Type
 14500 ;;  updateDayBri    1    3[COMMON] unsigned char 
 14501 ;; Return value:  Size  Location     Type
 14502 ;;                  1    wreg      void 
 14503 ;; Registers used:
 14504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14505 ;; Tracked objects:
 14506 ;;		On entry : 0/0
 14507 ;;		On exit  : 0/0
 14508 ;;		Unchanged: 0/0
 14509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14513 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14514 ;;Total ram usage:        2 bytes
 14515 ;; Hardware stack levels used:    1
 14516 ;; Hardware stack levels required when called:    2
 14517 ;; This function calls:
 14518 ;;		i1_updatePWM
 14519 ;; This function is called by:
 14520 ;;		_keyAction
 14521 ;; This function uses a non-reentrant model
 14522 ;;
 14523                           
 14524                           
 14525                           ;psect for function i1_updateDayBright
 14526  0890                     i1_updateDayBright:	
 14527                           
 14528                           ;led.c: 364: for (unsigned char i = 0; i < 4; i++)
 14529                           
 14530                           ;incstack = 0
 14531                           ; Regs used in i1_updateDayBright: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14532  0890  01F3               	clrf	i1updateDayBright@i
 14533  0891  3004               	movlw	4
 14534  0892  0273               	subwf	i1updateDayBright@i,w
 14535  0893  1803               	btfsc	3,0
 14536  0894  28B0               	goto	i1l3266
 14537  0895                     i1l3260:	
 14538                           
 14539                           ;led.c: 365: {
 14540                           ;led.c: 366: gLedPara.mPara.manualPara.nBrt[i] = gLedPara.tPara.nDayBrt;
 14541  0895  3573               	lslf	i1updateDayBright@i,w
 14542  0896  3E02               	addlw	2
 14543  0897  3E21               	addlw	(low ((_gLedPara| (0+256)+1)))& (0+255)
 14544  0898  0086               	movwf	6
 14545  0899  3001               	movlw	1	; select bank2/3
 14546  089A  0087               	movwf	7
 14547  089B  0022               	movlb	2	; select bank2
 14548  089C  084B               	movf	(_gLedPara^(0+256)+43),w	;volatile
 14549  089D  3FC0               	movwi [0]fsr1
 14550  089E  084C               	movf	((_gLedPara+1)^(0+256)+43),w	;volatile
 14551  089F  3FC1               	movwi [1]fsr1
 14552                           
 14553                           ;led.c: 367: gLedRunPara.nCurrentBrt[i] = gLedPara.tPara.nDayBrt;
 14554  08A0  3573               	lslf	i1updateDayBright@i,w
 14555  08A1  3EDC               	addlw	(low ((_gLedRunPara| 0+12)))& (0+255)
 14556  08A2  0086               	movwf	6
 14557  08A3  0187               	clrf	7
 14558  08A4  084B               	movf	(_gLedPara^(0+256)+43),w	;volatile
 14559  08A5  3FC0               	movwi [0]fsr1
 14560  08A6  084C               	movf	((_gLedPara+1)^(0+256)+43),w	;volatile
 14561  08A7  3FC1               	movwi [1]fsr1
 14562  08A8  3001               	movlw	1
 14563  08A9  00F2               	movwf	??i1_updateDayBright
 14564  08AA  0872               	movf	??i1_updateDayBright,w
 14565  08AB  07F3               	addwf	i1updateDayBright@i,f
 14566  08AC  3004               	movlw	4
 14567  08AD  0273               	subwf	i1updateDayBright@i,w
 14568  08AE  1C03               	skipc
 14569  08AF  2895               	goto	i1l3260
 14570  08B0                     i1l3266:	
 14571                           
 14572                           ;led.c: 368: }
 14573                           ;led.c: 369: updatePWM();
 14574  08B0  3197  27E0         	fcall	i1_updatePWM
 14575  08B2  0008               	return
 14576  08B3                     __end_ofi1_updateDayBright:	
 14577                           
 14578                           	psect	text72
 14579  17E0                     __ptext72:	
 14580 ;; *************** function i1_updatePWM *****************
 14581 ;; Defined at:
 14582 ;;		line 7 in file "src/led.c"
 14583 ;; Parameters:    Size  Location     Type
 14584 ;;		None
 14585 ;; Auto vars:     Size  Location     Type
 14586 ;;		None
 14587 ;; Return value:  Size  Location     Type
 14588 ;;                  1    wreg      void 
 14589 ;; Registers used:
 14590 ;;		wreg, status,2, status,0, pclath, cstack
 14591 ;; Tracked objects:
 14592 ;;		On entry : 0/0
 14593 ;;		On exit  : 0/0
 14594 ;;		Unchanged: 0/0
 14595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14600 ;;Total ram usage:        0 bytes
 14601 ;; Hardware stack levels used:    1
 14602 ;; Hardware stack levels required when called:    1
 14603 ;; This function calls:
 14604 ;;		i1_PWM1_LoadDutyValue
 14605 ;;		i1_PWM2_LoadDutyValue
 14606 ;;		i1_PWM3_LoadDutyValue
 14607 ;;		i1_PWM4_LoadDutyValue
 14608 ;; This function is called by:
 14609 ;;		_keyAction
 14610 ;;		_updateLed
 14611 ;;		i1_updateDayBright
 14612 ;;		i1_updateNightBright
 14613 ;; This function uses a non-reentrant model
 14614 ;;
 14615                           
 14616                           
 14617                           ;psect for function i1_updatePWM
 14618  17E0                     i1_updatePWM:	
 14619                           
 14620                           ;led.c: 9: PWM3_LoadDutyValue( gLedRunPara.nCurrentBrt[0] );
 14621                           
 14622                           ;incstack = 0
 14623                           ; Regs used in i1_updatePWM: [wreg+status,2+status,0+pclath+cstack]
 14624  17E0  0021               	movlb	1	; select bank1
 14625  17E1  085D               	movf	((_gLedRunPara+1)^(0+128)+12),w	;volatile
 14626  17E2  00F1               	movwf	i1PWM3_LoadDutyValue@dutyValue+1
 14627  17E3  085C               	movf	(_gLedRunPara^(0+128)+12),w	;volatile
 14628  17E4  00F0               	movwf	i1PWM3_LoadDutyValue@dutyValue
 14629  17E5  3195  25D4  3197   	fcall	i1_PWM3_LoadDutyValue
 14630                           
 14631                           ;led.c: 10: PWM2_LoadDutyValue( gLedRunPara.nCurrentBrt[1] );
 14632  17E8  0021               	movlb	1	; select bank1
 14633  17E9  085F               	movf	((_gLedRunPara+1)^(0+128)+14),w	;volatile
 14634  17EA  00F1               	movwf	i1PWM2_LoadDutyValue@dutyValue+1
 14635  17EB  085E               	movf	(_gLedRunPara^(0+128)+14),w	;volatile
 14636  17EC  00F0               	movwf	i1PWM2_LoadDutyValue@dutyValue
 14637  17ED  3195  25BE  3197   	fcall	i1_PWM2_LoadDutyValue
 14638                           
 14639                           ;led.c: 11: PWM4_LoadDutyValue( gLedRunPara.nCurrentBrt[2] );
 14640  17F0  0021               	movlb	1	; select bank1
 14641  17F1  0861               	movf	((_gLedRunPara+1)^(0+128)+16),w	;volatile
 14642  17F2  00F1               	movwf	i1PWM4_LoadDutyValue@dutyValue+1
 14643  17F3  0860               	movf	(_gLedRunPara^(0+128)+16),w	;volatile
 14644  17F4  00F0               	movwf	i1PWM4_LoadDutyValue@dutyValue
 14645  17F5  3195  25EA  3197   	fcall	i1_PWM4_LoadDutyValue
 14646                           
 14647                           ;led.c: 12: PWM1_LoadDutyValue( gLedRunPara.nCurrentBrt[3] );
 14648  17F8  0021               	movlb	1	; select bank1
 14649  17F9  0863               	movf	((_gLedRunPara+1)^(0+128)+18),w	;volatile
 14650  17FA  00F1               	movwf	i1PWM1_LoadDutyValue@dutyValue+1
 14651  17FB  0862               	movf	(_gLedRunPara^(0+128)+18),w	;volatile
 14652  17FC  00F0               	movwf	i1PWM1_LoadDutyValue@dutyValue
 14653  17FD  3195  25A8         	fcall	i1_PWM1_LoadDutyValue
 14654  17FF  0008               	return
 14655  1800                     __end_ofi1_updatePWM:	
 14656                           
 14657                           	psect	text73
 14658  15EA                     __ptext73:	
 14659 ;; *************** function i1_PWM4_LoadDutyValue *****************
 14660 ;; Defined at:
 14661 ;;		line 126 in file "src/pwm.c"
 14662 ;; Parameters:    Size  Location     Type
 14663 ;;  dutyValue       2    0[COMMON] unsigned int 
 14664 ;; Auto vars:     Size  Location     Type
 14665 ;;		None
 14666 ;; Return value:  Size  Location     Type
 14667 ;;                  1    wreg      void 
 14668 ;; Registers used:
 14669 ;;		wreg, status,2
 14670 ;; Tracked objects:
 14671 ;;		On entry : 0/0
 14672 ;;		On exit  : 0/0
 14673 ;;		Unchanged: 0/0
 14674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;Total ram usage:        2 bytes
 14680 ;; Hardware stack levels used:    1
 14681 ;; This function calls:
 14682 ;;		Nothing
 14683 ;; This function is called by:
 14684 ;;		i1_updatePWM
 14685 ;; This function uses a non-reentrant model
 14686 ;;
 14687                           
 14688                           
 14689                           ;psect for function i1_PWM4_LoadDutyValue
 14690  15EA                     i1_PWM4_LoadDutyValue:	
 14691                           
 14692                           ;pwm.c: 128: dutyValue &= 0x03FF;
 14693                           
 14694                           ;incstack = 0
 14695                           ; Regs used in i1_PWM4_LoadDutyValue: [wreg+status,2]
 14696  15EA  30FF               	movlw	255
 14697  15EB  05F0               	andwf	i1PWM4_LoadDutyValue@dutyValue,f
 14698  15EC  3003               	movlw	3
 14699  15ED  05F1               	andwf	i1PWM4_LoadDutyValue@dutyValue+1,f
 14700                           
 14701                           ;pwm.c: 131: if(CCP4CONbits.CCP4FMT)
 14702  15EE  0026               	movlb	6	; select bank6
 14703  15EF  1E17               	btfss	23,4	;volatile
 14704  15F0  2DFB               	goto	i1l3084
 14705                           
 14706                           ;pwm.c: 132: {
 14707                           ;pwm.c: 133: dutyValue <<= 6;
 14708  15F1  3006               	movlw	6
 14709  15F2                     u280_25:	
 14710  15F2  35F0               	lslf	i1PWM4_LoadDutyValue@dutyValue,f
 14711  15F3  0DF1               	rlf	i1PWM4_LoadDutyValue@dutyValue+1,f
 14712  15F4  0B89               	decfsz	9,f
 14713  15F5  2DF2               	goto	u280_25
 14714                           
 14715                           ;pwm.c: 134: CCPR4H = dutyValue >> 8;
 14716  15F6  0871               	movf	i1PWM4_LoadDutyValue@dutyValue+1,w
 14717  15F7  0096               	movwf	22	;volatile
 14718                           
 14719                           ;pwm.c: 135: CCPR4L = dutyValue;
 14720  15F8  0870               	movf	i1PWM4_LoadDutyValue@dutyValue,w
 14721  15F9  0095               	movwf	21	;volatile
 14722                           
 14723                           ;pwm.c: 136: }
 14724  15FA  0008               	return
 14725  15FB                     i1l3084:	
 14726                           
 14727                           ;pwm.c: 137: else
 14728                           ;pwm.c: 138: {
 14729                           ;pwm.c: 139: CCPR4H = dutyValue >> 8;
 14730  15FB  0871               	movf	i1PWM4_LoadDutyValue@dutyValue+1,w
 14731  15FC  0096               	movwf	22	;volatile
 14732                           
 14733                           ;pwm.c: 140: CCPR4L = dutyValue;
 14734  15FD  0870               	movf	i1PWM4_LoadDutyValue@dutyValue,w
 14735  15FE  0095               	movwf	21	;volatile
 14736  15FF  0008               	return
 14737  1600                     __end_ofi1_PWM4_LoadDutyValue:	
 14738                           
 14739                           	psect	text74
 14740  15D4                     __ptext74:	
 14741 ;; *************** function i1_PWM3_LoadDutyValue *****************
 14742 ;; Defined at:
 14743 ;;		line 91 in file "src/pwm.c"
 14744 ;; Parameters:    Size  Location     Type
 14745 ;;  dutyValue       2    0[COMMON] unsigned int 
 14746 ;; Auto vars:     Size  Location     Type
 14747 ;;		None
 14748 ;; Return value:  Size  Location     Type
 14749 ;;                  1    wreg      void 
 14750 ;; Registers used:
 14751 ;;		wreg, status,2
 14752 ;; Tracked objects:
 14753 ;;		On entry : 0/0
 14754 ;;		On exit  : 0/0
 14755 ;;		Unchanged: 0/0
 14756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14757 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14760 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14761 ;;Total ram usage:        2 bytes
 14762 ;; Hardware stack levels used:    1
 14763 ;; This function calls:
 14764 ;;		Nothing
 14765 ;; This function is called by:
 14766 ;;		i1_updatePWM
 14767 ;; This function uses a non-reentrant model
 14768 ;;
 14769                           
 14770                           
 14771                           ;psect for function i1_PWM3_LoadDutyValue
 14772  15D4                     i1_PWM3_LoadDutyValue:	
 14773                           
 14774                           ;pwm.c: 93: dutyValue &= 0x03FF;
 14775                           
 14776                           ;incstack = 0
 14777                           ; Regs used in i1_PWM3_LoadDutyValue: [wreg+status,2]
 14778  15D4  30FF               	movlw	255
 14779  15D5  05F0               	andwf	i1PWM3_LoadDutyValue@dutyValue,f
 14780  15D6  3003               	movlw	3
 14781  15D7  05F1               	andwf	i1PWM3_LoadDutyValue@dutyValue+1,f
 14782                           
 14783                           ;pwm.c: 96: if(CCP3CONbits.CCP3FMT)
 14784  15D8  0026               	movlb	6	; select bank6
 14785  15D9  1E13               	btfss	19,4	;volatile
 14786  15DA  2DE5               	goto	i1l3070
 14787                           
 14788                           ;pwm.c: 97: {
 14789                           ;pwm.c: 98: dutyValue <<= 6;
 14790  15DB  3006               	movlw	6
 14791  15DC                     u278_25:	
 14792  15DC  35F0               	lslf	i1PWM3_LoadDutyValue@dutyValue,f
 14793  15DD  0DF1               	rlf	i1PWM3_LoadDutyValue@dutyValue+1,f
 14794  15DE  0B89               	decfsz	9,f
 14795  15DF  2DDC               	goto	u278_25
 14796                           
 14797                           ;pwm.c: 99: CCPR3H = dutyValue >> 8;
 14798  15E0  0871               	movf	i1PWM3_LoadDutyValue@dutyValue+1,w
 14799  15E1  0092               	movwf	18	;volatile
 14800                           
 14801                           ;pwm.c: 100: CCPR3L = dutyValue;
 14802  15E2  0870               	movf	i1PWM3_LoadDutyValue@dutyValue,w
 14803  15E3  0091               	movwf	17	;volatile
 14804                           
 14805                           ;pwm.c: 101: }
 14806  15E4  0008               	return
 14807  15E5                     i1l3070:	
 14808                           
 14809                           ;pwm.c: 102: else
 14810                           ;pwm.c: 103: {
 14811                           ;pwm.c: 104: CCPR3H = dutyValue >> 8;
 14812  15E5  0871               	movf	i1PWM3_LoadDutyValue@dutyValue+1,w
 14813  15E6  0092               	movwf	18	;volatile
 14814                           
 14815                           ;pwm.c: 105: CCPR3L = dutyValue;
 14816  15E7  0870               	movf	i1PWM3_LoadDutyValue@dutyValue,w
 14817  15E8  0091               	movwf	17	;volatile
 14818  15E9  0008               	return
 14819  15EA                     __end_ofi1_PWM3_LoadDutyValue:	
 14820                           
 14821                           	psect	text75
 14822  15BE                     __ptext75:	
 14823 ;; *************** function i1_PWM2_LoadDutyValue *****************
 14824 ;; Defined at:
 14825 ;;		line 56 in file "src/pwm.c"
 14826 ;; Parameters:    Size  Location     Type
 14827 ;;  dutyValue       2    0[COMMON] unsigned int 
 14828 ;; Auto vars:     Size  Location     Type
 14829 ;;		None
 14830 ;; Return value:  Size  Location     Type
 14831 ;;                  1    wreg      void 
 14832 ;; Registers used:
 14833 ;;		wreg, status,2
 14834 ;; Tracked objects:
 14835 ;;		On entry : 0/0
 14836 ;;		On exit  : 0/0
 14837 ;;		Unchanged: 0/0
 14838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;Total ram usage:        2 bytes
 14844 ;; Hardware stack levels used:    1
 14845 ;; This function calls:
 14846 ;;		Nothing
 14847 ;; This function is called by:
 14848 ;;		i1_updatePWM
 14849 ;; This function uses a non-reentrant model
 14850 ;;
 14851                           
 14852                           
 14853                           ;psect for function i1_PWM2_LoadDutyValue
 14854  15BE                     i1_PWM2_LoadDutyValue:	
 14855                           
 14856                           ;pwm.c: 58: dutyValue &= 0x03FF;
 14857                           
 14858                           ;incstack = 0
 14859                           ; Regs used in i1_PWM2_LoadDutyValue: [wreg+status,2]
 14860  15BE  30FF               	movlw	255
 14861  15BF  05F0               	andwf	i1PWM2_LoadDutyValue@dutyValue,f
 14862  15C0  3003               	movlw	3
 14863  15C1  05F1               	andwf	i1PWM2_LoadDutyValue@dutyValue+1,f
 14864                           
 14865                           ;pwm.c: 61: if(CCP2CONbits.CCP2FMT)
 14866  15C2  0025               	movlb	5	; select bank5
 14867  15C3  1E17               	btfss	23,4	;volatile
 14868  15C4  2DCF               	goto	i1l3056
 14869                           
 14870                           ;pwm.c: 62: {
 14871                           ;pwm.c: 63: dutyValue <<= 6;
 14872  15C5  3006               	movlw	6
 14873  15C6                     u276_25:	
 14874  15C6  35F0               	lslf	i1PWM2_LoadDutyValue@dutyValue,f
 14875  15C7  0DF1               	rlf	i1PWM2_LoadDutyValue@dutyValue+1,f
 14876  15C8  0B89               	decfsz	9,f
 14877  15C9  2DC6               	goto	u276_25
 14878                           
 14879                           ;pwm.c: 64: CCPR2H = dutyValue >> 8;
 14880  15CA  0871               	movf	i1PWM2_LoadDutyValue@dutyValue+1,w
 14881  15CB  0096               	movwf	22	;volatile
 14882                           
 14883                           ;pwm.c: 65: CCPR2L = dutyValue;
 14884  15CC  0870               	movf	i1PWM2_LoadDutyValue@dutyValue,w
 14885  15CD  0095               	movwf	21	;volatile
 14886                           
 14887                           ;pwm.c: 66: }
 14888  15CE  0008               	return
 14889  15CF                     i1l3056:	
 14890                           
 14891                           ;pwm.c: 67: else
 14892                           ;pwm.c: 68: {
 14893                           ;pwm.c: 69: CCPR2H = dutyValue >> 8;
 14894  15CF  0871               	movf	i1PWM2_LoadDutyValue@dutyValue+1,w
 14895  15D0  0096               	movwf	22	;volatile
 14896                           
 14897                           ;pwm.c: 70: CCPR2L = dutyValue;
 14898  15D1  0870               	movf	i1PWM2_LoadDutyValue@dutyValue,w
 14899  15D2  0095               	movwf	21	;volatile
 14900  15D3  0008               	return
 14901  15D4                     __end_ofi1_PWM2_LoadDutyValue:	
 14902                           
 14903                           	psect	text76
 14904  15A8                     __ptext76:	
 14905 ;; *************** function i1_PWM1_LoadDutyValue *****************
 14906 ;; Defined at:
 14907 ;;		line 21 in file "src/pwm.c"
 14908 ;; Parameters:    Size  Location     Type
 14909 ;;  dutyValue       2    0[COMMON] unsigned int 
 14910 ;; Auto vars:     Size  Location     Type
 14911 ;;		None
 14912 ;; Return value:  Size  Location     Type
 14913 ;;                  1    wreg      void 
 14914 ;; Registers used:
 14915 ;;		wreg, status,2
 14916 ;; Tracked objects:
 14917 ;;		On entry : 0/0
 14918 ;;		On exit  : 0/0
 14919 ;;		Unchanged: 0/0
 14920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14921 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14924 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;Total ram usage:        2 bytes
 14926 ;; Hardware stack levels used:    1
 14927 ;; This function calls:
 14928 ;;		Nothing
 14929 ;; This function is called by:
 14930 ;;		i1_updatePWM
 14931 ;; This function uses a non-reentrant model
 14932 ;;
 14933                           
 14934                           
 14935                           ;psect for function i1_PWM1_LoadDutyValue
 14936  15A8                     i1_PWM1_LoadDutyValue:	
 14937                           
 14938                           ;pwm.c: 23: dutyValue &= 0x03FF;
 14939                           
 14940                           ;incstack = 0
 14941                           ; Regs used in i1_PWM1_LoadDutyValue: [wreg+status,2]
 14942  15A8  30FF               	movlw	255
 14943  15A9  05F0               	andwf	i1PWM1_LoadDutyValue@dutyValue,f
 14944  15AA  3003               	movlw	3
 14945  15AB  05F1               	andwf	i1PWM1_LoadDutyValue@dutyValue+1,f
 14946                           
 14947                           ;pwm.c: 26: if(CCP1CONbits.CCP1FMT)
 14948  15AC  0025               	movlb	5	; select bank5
 14949  15AD  1E13               	btfss	19,4	;volatile
 14950  15AE  2DB9               	goto	i1l3042
 14951                           
 14952                           ;pwm.c: 27: {
 14953                           ;pwm.c: 28: dutyValue <<= 6;
 14954  15AF  3006               	movlw	6
 14955  15B0                     u274_25:	
 14956  15B0  35F0               	lslf	i1PWM1_LoadDutyValue@dutyValue,f
 14957  15B1  0DF1               	rlf	i1PWM1_LoadDutyValue@dutyValue+1,f
 14958  15B2  0B89               	decfsz	9,f
 14959  15B3  2DB0               	goto	u274_25
 14960                           
 14961                           ;pwm.c: 29: CCPR1H = dutyValue >> 8;
 14962  15B4  0871               	movf	i1PWM1_LoadDutyValue@dutyValue+1,w
 14963  15B5  0092               	movwf	18	;volatile
 14964                           
 14965                           ;pwm.c: 30: CCPR1L = dutyValue;
 14966  15B6  0870               	movf	i1PWM1_LoadDutyValue@dutyValue,w
 14967  15B7  0091               	movwf	17	;volatile
 14968                           
 14969                           ;pwm.c: 31: }
 14970  15B8  0008               	return
 14971  15B9                     i1l3042:	
 14972                           
 14973                           ;pwm.c: 32: else
 14974                           ;pwm.c: 33: {
 14975                           ;pwm.c: 34: CCPR1H = dutyValue >> 8;
 14976  15B9  0871               	movf	i1PWM1_LoadDutyValue@dutyValue+1,w
 14977  15BA  0092               	movwf	18	;volatile
 14978                           
 14979                           ;pwm.c: 35: CCPR1L = dutyValue;
 14980  15BB  0870               	movf	i1PWM1_LoadDutyValue@dutyValue,w
 14981  15BC  0091               	movwf	17	;volatile
 14982  15BD  0008               	return
 14983  15BE                     __end_ofi1_PWM1_LoadDutyValue:	
 14984                           
 14985                           	psect	text77
 14986  1486                     __ptext77:	
 14987 ;; *************** function i1_indicateLedOff *****************
 14988 ;; Defined at:
 14989 ;;		line 331 in file "src/led.c"
 14990 ;; Parameters:    Size  Location     Type
 14991 ;;		None
 14992 ;; Auto vars:     Size  Location     Type
 14993 ;;		None
 14994 ;; Return value:  Size  Location     Type
 14995 ;;                  1    wreg      void 
 14996 ;; Registers used:
 14997 ;;		None
 14998 ;; Tracked objects:
 14999 ;;		On entry : 0/0
 15000 ;;		On exit  : 0/0
 15001 ;;		Unchanged: 0/0
 15002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15007 ;;Total ram usage:        0 bytes
 15008 ;; Hardware stack levels used:    1
 15009 ;; This function calls:
 15010 ;;		Nothing
 15011 ;; This function is called by:
 15012 ;;		_keyAction
 15013 ;; This function uses a non-reentrant model
 15014 ;;
 15015                           
 15016                           
 15017                           ;psect for function i1_indicateLedOff
 15018  1486                     i1_indicateLedOff:	
 15019                           
 15020                           ;incstack = 0
 15021                           ; Regs used in i1_indicateLedOff: []
 15022                           ;led.c: 333: do { LATBbits.LATB6 = 0; } while(0);
 15023  1486  0022               	movlb	2	; select bank2
 15024  1487  130D               	bcf	13,6	;volatile
 15025                           
 15026                           ;led.c: 334: do { LATCbits.LATC7 = 1; } while(0);
 15027  1488  178E               	bsf	14,7	;volatile
 15028                           
 15029                           ;led.c: 335: do { LATBbits.LATB7 = 1; } while(0);
 15030  1489  178D               	bsf	13,7	;volatile
 15031  148A  0008               	return
 15032  148B                     __end_ofi1_indicateLedOff:	
 15033                           
 15034                           	psect	text78
 15035  1481                     __ptext78:	
 15036 ;; *************** function i1_indicateLedNight *****************
 15037 ;; Defined at:
 15038 ;;		line 347 in file "src/led.c"
 15039 ;; Parameters:    Size  Location     Type
 15040 ;;		None
 15041 ;; Auto vars:     Size  Location     Type
 15042 ;;		None
 15043 ;; Return value:  Size  Location     Type
 15044 ;;                  1    wreg      void 
 15045 ;; Registers used:
 15046 ;;		None
 15047 ;; Tracked objects:
 15048 ;;		On entry : 0/0
 15049 ;;		On exit  : 0/0
 15050 ;;		Unchanged: 0/0
 15051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15056 ;;Total ram usage:        0 bytes
 15057 ;; Hardware stack levels used:    1
 15058 ;; This function calls:
 15059 ;;		Nothing
 15060 ;; This function is called by:
 15061 ;;		_keyAction
 15062 ;; This function uses a non-reentrant model
 15063 ;;
 15064                           
 15065                           
 15066                           ;psect for function i1_indicateLedNight
 15067  1481                     i1_indicateLedNight:	
 15068                           
 15069                           ;incstack = 0
 15070                           ; Regs used in i1_indicateLedNight: []
 15071                           ;led.c: 349: do { LATBbits.LATB6 = 1; } while(0);
 15072  1481  0022               	movlb	2	; select bank2
 15073  1482  170D               	bsf	13,6	;volatile
 15074                           
 15075                           ;led.c: 350: do { LATCbits.LATC7 = 1; } while(0);
 15076  1483  178E               	bsf	14,7	;volatile
 15077                           
 15078                           ;led.c: 351: do { LATBbits.LATB7 = 0; } while(0);
 15079  1484  138D               	bcf	13,7	;volatile
 15080  1485  0008               	return
 15081  1486                     __end_ofi1_indicateLedNight:	
 15082                           
 15083                           	psect	text79
 15084  147C                     __ptext79:	
 15085 ;; *************** function i1_indicateLedDay *****************
 15086 ;; Defined at:
 15087 ;;		line 339 in file "src/led.c"
 15088 ;; Parameters:    Size  Location     Type
 15089 ;;		None
 15090 ;; Auto vars:     Size  Location     Type
 15091 ;;		None
 15092 ;; Return value:  Size  Location     Type
 15093 ;;                  1    wreg      void 
 15094 ;; Registers used:
 15095 ;;		None
 15096 ;; Tracked objects:
 15097 ;;		On entry : 0/0
 15098 ;;		On exit  : 0/0
 15099 ;;		Unchanged: 0/0
 15100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15105 ;;Total ram usage:        0 bytes
 15106 ;; Hardware stack levels used:    1
 15107 ;; This function calls:
 15108 ;;		Nothing
 15109 ;; This function is called by:
 15110 ;;		_keyAction
 15111 ;; This function uses a non-reentrant model
 15112 ;;
 15113                           
 15114                           
 15115                           ;psect for function i1_indicateLedDay
 15116  147C                     i1_indicateLedDay:	
 15117                           
 15118                           ;incstack = 0
 15119                           ; Regs used in i1_indicateLedDay: []
 15120                           ;led.c: 341: do { LATBbits.LATB6 = 0; } while(0);
 15121  147C  0022               	movlb	2	; select bank2
 15122  147D  130D               	bcf	13,6	;volatile
 15123                           
 15124                           ;led.c: 342: do { LATCbits.LATC7 = 0; } while(0);
 15125  147E  138E               	bcf	14,7	;volatile
 15126                           
 15127                           ;led.c: 343: do { LATBbits.LATB7 = 0; } while(0);
 15128  147F  138D               	bcf	13,7	;volatile
 15129  1480  0008               	return
 15130  1481                     __end_ofi1_indicateLedDay:	
 15131                           
 15132                           	psect	text80
 15133  1477                     __ptext80:	
 15134 ;; *************** function i1_indicateLedBle *****************
 15135 ;; Defined at:
 15136 ;;		line 355 in file "src/led.c"
 15137 ;; Parameters:    Size  Location     Type
 15138 ;;		None
 15139 ;; Auto vars:     Size  Location     Type
 15140 ;;		None
 15141 ;; Return value:  Size  Location     Type
 15142 ;;                  1    wreg      void 
 15143 ;; Registers used:
 15144 ;;		None
 15145 ;; Tracked objects:
 15146 ;;		On entry : 0/0
 15147 ;;		On exit  : 0/0
 15148 ;;		Unchanged: 0/0
 15149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;Total ram usage:        0 bytes
 15155 ;; Hardware stack levels used:    1
 15156 ;; This function calls:
 15157 ;;		Nothing
 15158 ;; This function is called by:
 15159 ;;		_keyAction
 15160 ;; This function uses a non-reentrant model
 15161 ;;
 15162                           
 15163                           
 15164                           ;psect for function i1_indicateLedBle
 15165  1477                     i1_indicateLedBle:	
 15166                           
 15167                           ;incstack = 0
 15168                           ; Regs used in i1_indicateLedBle: []
 15169                           ;led.c: 357: do { LATBbits.LATB6 = 1; } while(0);
 15170  1477  0022               	movlb	2	; select bank2
 15171  1478  170D               	bsf	13,6	;volatile
 15172                           
 15173                           ;led.c: 358: do { LATCbits.LATC7 = 0; } while(0);
 15174  1479  138E               	bcf	14,7	;volatile
 15175                           
 15176                           ;led.c: 359: do { LATBbits.LATB7 = 1; } while(0);
 15177  147A  178D               	bsf	13,7	;volatile
 15178  147B  0008               	return
 15179  147C                     __end_ofi1_indicateLedBle:	
 15180                           
 15181                           	psect	text81
 15182  1594                     __ptext81:	
 15183 ;; *************** function _EUSART_RCV_ISR *****************
 15184 ;; Defined at:
 15185 ;;		line 33 in file "src/eusart.c"
 15186 ;; Parameters:    Size  Location     Type
 15187 ;;		None
 15188 ;; Auto vars:     Size  Location     Type
 15189 ;;		None
 15190 ;; Return value:  Size  Location     Type
 15191 ;;                  1    wreg      void 
 15192 ;; Registers used:
 15193 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15194 ;; Tracked objects:
 15195 ;;		On entry : 0/0
 15196 ;;		On exit  : 0/0
 15197 ;;		Unchanged: 0/0
 15198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15201 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15202 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15203 ;;Total ram usage:        1 bytes
 15204 ;; Hardware stack levels used:    1
 15205 ;; This function calls:
 15206 ;;		Nothing
 15207 ;; This function is called by:
 15208 ;;		_INTERRUPT_InterruptManager
 15209 ;; This function uses a non-reentrant model
 15210 ;;
 15211                           
 15212                           
 15213                           ;psect for function _EUSART_RCV_ISR
 15214  1594                     _EUSART_RCV_ISR:	
 15215                           
 15216                           ;eusart.c: 35: if(1 == RC1STAbits.OERR == 1)
 15217                           
 15218                           ;incstack = 0
 15219                           ; Regs used in _EUSART_RCV_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 15220  1594  0023               	movlb	3	; select bank3
 15221  1595  1C9D               	btfss	29,1	;volatile
 15222  1596  2D99               	goto	i1l4206
 15223                           
 15224                           ;eusart.c: 36: {
 15225                           ;eusart.c: 38: RC1STAbits.CREN = 0;
 15226  1597  121D               	bcf	29,4	;volatile
 15227                           
 15228                           ;eusart.c: 39: RC1STAbits.CREN = 1;
 15229  1598  161D               	bsf	29,4	;volatile
 15230  1599                     i1l4206:	
 15231                           
 15232                           ;eusart.c: 40: }
 15233                           ;eusart.c: 41: rxBuf[eusartRunPara.nRcvIdx++] = RCREG;
 15234  1599  0819               	movf	25,w	;volatile
 15235  159A  00F0               	movwf	??_EUSART_RCV_ISR
 15236  159B  0020               	movlb	0	; select bank0
 15237  159C  0868               	movf	_eusartRunPara+4,w	;volatile
 15238  159D  3E4F               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 15239  159E  0086               	movwf	6
 15240  159F  3001               	movlw	1	; select bank2/3
 15241  15A0  0087               	movwf	7
 15242  15A1  0870               	movf	??_EUSART_RCV_ISR,w
 15243  15A2  0081               	movwf	1
 15244  15A3  3001               	movlw	1
 15245  15A4  00F0               	movwf	??_EUSART_RCV_ISR
 15246  15A5  0870               	movf	??_EUSART_RCV_ISR,w
 15247  15A6  07E8               	addwf	_eusartRunPara+4,f	;volatile
 15248  15A7  0008               	return
 15249  15A8                     __end_of_EUSART_RCV_ISR:	
 15250                           
 15251                           	psect	text82
 15252  0728                     __ptext82:	
 15253 ;; *************** function _DecodeCMD *****************
 15254 ;; Defined at:
 15255 ;;		line 127 in file "src/ble.c"
 15256 ;; Parameters:    Size  Location     Type
 15257 ;;		None
 15258 ;; Auto vars:     Size  Location     Type
 15259 ;;		None
 15260 ;; Return value:  Size  Location     Type
 15261 ;;                  1    wreg      void 
 15262 ;; Registers used:
 15263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15264 ;; Tracked objects:
 15265 ;;		On entry : 0/0
 15266 ;;		On exit  : 0/0
 15267 ;;		Unchanged: 0/0
 15268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15272 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15273 ;;Total ram usage:        1 bytes
 15274 ;; Hardware stack levels used:    1
 15275 ;; Hardware stack levels required when called:    1
 15276 ;; This function calls:
 15277 ;;		_strCmp
 15278 ;; This function is called by:
 15279 ;;		_INTERRUPT_InterruptManager
 15280 ;; This function uses a non-reentrant model
 15281 ;;
 15282                           
 15283                           
 15284                           ;psect for function _DecodeCMD
 15285  0728                     _DecodeCMD:	
 15286                           
 15287                           ;ble.c: 129: if(eusartRunPara.nCmd == 0)
 15288                           
 15289                           ;incstack = 0
 15290                           ; Regs used in _DecodeCMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15291  0728  0020               	movlb	0	; select bank0
 15292  0729  0867               	movf	_eusartRunPara+3,w	;volatile
 15293  072A  1D03               	btfss	3,2
 15294  072B  2F2E               	goto	i1l3882
 15295                           
 15296                           ;ble.c: 130: {
 15297                           ;ble.c: 131: eusartRunPara.nRcvIdx = 0;
 15298  072C  01E8               	clrf	_eusartRunPara+4	;volatile
 15299                           
 15300                           ;ble.c: 132: return;
 15301  072D  0008               	return
 15302  072E                     i1l3882:	
 15303                           
 15304                           ;ble.c: 133: }
 15305                           ;ble.c: 134: if(eusartRunPara.nRcvIdx <= 2)
 15306  072E  3003               	movlw	3
 15307  072F  0268               	subwf	_eusartRunPara+4,w	;volatile
 15308  0730  1C03               	btfss	3,0
 15309  0731  0008               	return
 15310                           
 15311                           ;ble.c: 137: }
 15312                           ;ble.c: 138: if(rxBuf[eusartRunPara.nRcvIdx-2] == '\r' && rxBuf[eusartRunPara.nRcvIdx-1]
      +                           == '\n')
 15313                           
 15314                           ;ble.c: 135: {
 15315                           ;ble.c: 136: return;
 15316  0732  0868               	movf	_eusartRunPara+4,w	;volatile
 15317  0733  3EFE               	addlw	254
 15318  0734  3E4F               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 15319  0735  0086               	movwf	6
 15320  0736  3001               	movlw	1	; select bank2/3
 15321  0737  0087               	movwf	7
 15322  0738  300D               	movlw	13
 15323  0739  0601               	xorwf	1,w
 15324  073A  1D03               	btfss	3,2
 15325  073B  0008               	return
 15326  073C  0868               	movf	_eusartRunPara+4,w	;volatile
 15327  073D  3EFF               	addlw	255
 15328  073E  3E4F               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 15329  073F  0086               	movwf	6
 15330  0740  3001               	movlw	1	; select bank2/3
 15331  0741  0087               	movwf	7
 15332  0742  300A               	movlw	10
 15333  0743  0601               	xorwf	1,w
 15334  0744  1D03               	btfss	3,2
 15335  0745  0008               	return
 15336                           
 15337                           ;ble.c: 139: {
 15338                           ;ble.c: 140: rxBuf[eusartRunPara.nRcvIdx] = '\0';
 15339  0746  0868               	movf	_eusartRunPara+4,w	;volatile
 15340  0747  3E4F               	addlw	(low (_rxBuf| (0+256)))& (0+255)
 15341  0748  0086               	movwf	6
 15342  0749  3001               	movlw	1	; select bank2/3
 15343  074A  0087               	movwf	7
 15344  074B  0181               	clrf	1
 15345                           
 15346                           ;ble.c: 141: eusartRunPara.nRcvIdx = 0;
 15347  074C  01E8               	clrf	_eusartRunPara+4	;volatile
 15348                           
 15349                           ;ble.c: 142: switch(eusartRunPara.nRcvState)
 15350  074D  2FBB               	goto	i1l3932
 15351  074E                     i1l3894:	
 15352                           ;ble.c: 143: {
 15353                           ;ble.c: 144: case 0:
 15354                           
 15355                           
 15356                           ;ble.c: 145: if(strCmp(rxBuf, "AT+OK\r\n") == 0)
 15357  074E  3060               	movlw	low (STR_1| (0+32768))
 15358  074F  00F0               	movwf	strCmp@s2
 15359  0750  3090               	movlw	high (STR_1| (0+32768))
 15360  0751  00F1               	movwf	strCmp@s2+1
 15361  0752  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 15362  0753  3188  204C  3187   	fcall	_strCmp
 15363  0756  3A00               	xorlw	0
 15364  0757  1D03               	skipz
 15365  0758  0008               	return
 15366  0759  2F62               	goto	i1l3902
 15367  075A                     i1l88:	
 15368                           ;ble.c: 148: {
 15369                           ;ble.c: 149: case 1:
 15370                           
 15371                           ;ble.c: 146: {
 15372                           ;ble.c: 147: switch(eusartRunPara.nCmd)
 15373                           
 15374                           
 15375                           ;ble.c: 150: case 3:
 15376                           ;ble.c: 151: case 4:
 15377                           ;ble.c: 152: case 8:
 15378                           ;ble.c: 153: eusartRunPara.fAck = 1;
 15379  075A  0020               	movlb	0	; select bank0
 15380  075B  1564               	bsf	_eusartRunPara,2	;volatile
 15381                           
 15382                           ;ble.c: 154: break;
 15383  075C  0008               	return
 15384  075D                     i1l3898:	
 15385                           ;ble.c: 155: case 2:
 15386                           
 15387                           
 15388                           ;ble.c: 156: case 5:
 15389                           ;ble.c: 157: case 6:
 15390                           ;ble.c: 158: case 9:
 15391                           ;ble.c: 159: eusartRunPara.nRcvState = 1;
 15392  075D  3001               	movlw	1
 15393  075E  00F4               	movwf	??_DecodeCMD
 15394  075F  0874               	movf	??_DecodeCMD,w
 15395  0760  00EA               	movwf	_eusartRunPara+6	;volatile
 15396                           
 15397                           ;ble.c: 163: }
 15398                           
 15399                           ;ble.c: 162: break;
 15400                           
 15401                           ;ble.c: 161: default:
 15402                           
 15403                           ;ble.c: 160: break;
 15404  0761  0008               	return
 15405  0762                     i1l3902:	
 15406  0762  0020               	movlb	0	; select bank0
 15407  0763  0867               	movf	_eusartRunPara+3,w	;volatile
 15408                           
 15409                           ; Switch size 1, requested type "space"
 15410                           ; Number of cases is 8, Range of values is 1 to 9
 15411                           ; switch strategies available:
 15412                           ; Name         Instructions Cycles
 15413                           ; simple_byte           25    13 (average)
 15414                           ; direct_byte           27     9 (fixed)
 15415                           ; jumptable            263     9 (fixed)
 15416                           ;	Chosen strategy is simple_byte
 15417  0764  3A01               	xorlw	1	; case 1
 15418  0765  1903               	skipnz
 15419  0766  2F5A               	goto	i1l88
 15420  0767  3A03               	xorlw	3	; case 2
 15421  0768  1903               	skipnz
 15422  0769  2F5D               	goto	i1l3898
 15423  076A  3A01               	xorlw	1	; case 3
 15424  076B  1903               	skipnz
 15425  076C  2F5A               	goto	i1l88
 15426  076D  3A07               	xorlw	7	; case 4
 15427  076E  1903               	skipnz
 15428  076F  2F5A               	goto	i1l88
 15429  0770  3A01               	xorlw	1	; case 5
 15430  0771  1903               	skipnz
 15431  0772  2F5D               	goto	i1l3898
 15432  0773  3A03               	xorlw	3	; case 6
 15433  0774  1903               	skipnz
 15434  0775  2F5D               	goto	i1l3898
 15435  0776  3A0E               	xorlw	14	; case 8
 15436  0777  1903               	skipnz
 15437  0778  2F5A               	goto	i1l88
 15438  0779  3A01               	xorlw	1	; case 9
 15439  077A  1903               	skipnz
 15440  077B  2F5D               	goto	i1l3898
 15441  077C  2FC7               	goto	i1l78
 15442                           
 15443                           ;ble.c: 164: }
 15444                           ;ble.c: 165: break;
 15445  077D  0008               	return
 15446  077E                     i1l3904:	
 15447                           ;ble.c: 168: {
 15448                           ;ble.c: 169: case 2:
 15449                           
 15450                           ;ble.c: 167: switch(eusartRunPara.nCmd)
 15451                           
 15452                           ;ble.c: 166: case 1:
 15453                           
 15454                           
 15455                           ;ble.c: 170: if(strCmp(rxBuf, "AT+OK\r\n") == 0)
 15456  077E  3060               	movlw	low (STR_1| (0+32768))
 15457  077F  00F0               	movwf	strCmp@s2
 15458  0780  3090               	movlw	high (STR_1| (0+32768))
 15459  0781  00F1               	movwf	strCmp@s2+1
 15460  0782  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 15461  0783  3188  204C  3187   	fcall	_strCmp
 15462  0786  3A00               	xorlw	0
 15463  0787  1D03               	skipz
 15464  0788  0008               	return
 15465                           
 15466                           ;ble.c: 171: {
 15467                           ;ble.c: 172: eusartRunPara.fAck = 1;
 15468  0789  0020               	movlb	0	; select bank0
 15469  078A  1564               	bsf	_eusartRunPara,2	;volatile
 15470                           
 15471                           ;ble.c: 173: eusartRunPara.nRcvState = 0;
 15472  078B  01EA               	clrf	_eusartRunPara+6	;volatile
 15473                           
 15474                           ;ble.c: 174: }
 15475                           ;ble.c: 175: break;
 15476  078C  0008               	return
 15477  078D                     i1l101:	
 15478                           ;ble.c: 176: case 5:
 15479                           
 15480                           
 15481                           ;ble.c: 177: eusartRunPara.fAck = 1;
 15482  078D  1564               	bsf	_eusartRunPara,2	;volatile
 15483                           
 15484                           ;ble.c: 178: eusartRunPara.nRcvState = 0;
 15485  078E  01EA               	clrf	_eusartRunPara+6	;volatile
 15486                           
 15487                           ;ble.c: 179: break;
 15488  078F  0008               	return
 15489  0790                     i1l3912:	
 15490                           ;ble.c: 180: case 6:
 15491                           
 15492                           
 15493                           ;ble.c: 181: eusartRunPara.nRcvState = 2;
 15494  0790  3002               	movlw	2
 15495  0791  00F4               	movwf	??_DecodeCMD
 15496  0792  0874               	movf	??_DecodeCMD,w
 15497  0793  00EA               	movwf	_eusartRunPara+6	;volatile
 15498                           
 15499                           ;ble.c: 182: break;
 15500  0794  0008               	return
 15501  0795                     i1l103:	
 15502                           ;ble.c: 183: case 9:
 15503                           
 15504                           
 15505                           ;ble.c: 184: eusartRunPara.fAck = 1;
 15506  0795  1564               	bsf	_eusartRunPara,2	;volatile
 15507                           
 15508                           ;ble.c: 185: eusartRunPara.nRcvState = 0;
 15509  0796  01EA               	clrf	_eusartRunPara+6	;volatile
 15510                           
 15511                           ;ble.c: 186: if (strCmp(rxBuf, "3031313130313031") == 0)
 15512  0797  3035               	movlw	low (STR_3| (0+32768))
 15513  0798  00F0               	movwf	strCmp@s2
 15514  0799  3090               	movlw	high (STR_3| (0+32768))
 15515  079A  00F1               	movwf	strCmp@s2+1
 15516  079B  304F               	movlw	(low (_rxBuf| (0+256)))& (0+255)
 15517  079C  3188  204C  3187   	fcall	_strCmp
 15518  079F  3A00               	xorlw	0
 15519  07A0  1D03               	skipz
 15520  07A1  0008               	return
 15521                           
 15522                           ;ble.c: 187: {
 15523                           ;ble.c: 188: eusartRunPara.fDev = 1;
 15524  07A2  0020               	movlb	0	; select bank0
 15525  07A3  1764               	bsf	_eusartRunPara,6	;volatile
 15526                           
 15527                           ;ble.c: 193: }
 15528                           
 15529                           ;ble.c: 192: break;
 15530                           
 15531                           ;ble.c: 191: default:
 15532                           
 15533                           ;ble.c: 189: }
 15534                           ;ble.c: 190: break;
 15535  07A4  0008               	return
 15536  07A5                     i1l3922:	
 15537  07A5  0867               	movf	_eusartRunPara+3,w	;volatile
 15538                           
 15539                           ; Switch size 1, requested type "space"
 15540                           ; Number of cases is 4, Range of values is 2 to 9
 15541                           ; switch strategies available:
 15542                           ; Name         Instructions Cycles
 15543                           ; simple_byte           13     7 (average)
 15544                           ; direct_byte           25     9 (fixed)
 15545                           ; jumptable            263     9 (fixed)
 15546                           ;	Chosen strategy is simple_byte
 15547  07A6  3A02               	xorlw	2	; case 2
 15548  07A7  1903               	skipnz
 15549  07A8  2F7E               	goto	i1l3904
 15550  07A9  3A07               	xorlw	7	; case 5
 15551  07AA  1903               	skipnz
 15552  07AB  2F8D               	goto	i1l101
 15553  07AC  3A03               	xorlw	3	; case 6
 15554  07AD  1903               	skipnz
 15555  07AE  2F90               	goto	i1l3912
 15556  07AF  3A0F               	xorlw	15	; case 9
 15557  07B0  1903               	skipnz
 15558  07B1  2F95               	goto	i1l103
 15559  07B2  2FC7               	goto	i1l78
 15560                           
 15561                           ;ble.c: 194: break;
 15562  07B3  0008               	return
 15563  07B4                     i1l3924:	
 15564                           ;ble.c: 195: case 2:
 15565                           
 15566                           
 15567                           ;ble.c: 196: if(eusartRunPara.nCmd == 6)
 15568  07B4  3006               	movlw	6
 15569  07B5  0667               	xorwf	_eusartRunPara+3,w	;volatile
 15570  07B6  1D03               	btfss	3,2
 15571  07B7  0008               	return
 15572                           
 15573                           ;ble.c: 197: {
 15574                           ;ble.c: 198: eusartRunPara.fAck = 1;
 15575  07B8  1564               	bsf	_eusartRunPara,2	;volatile
 15576                           
 15577                           ;ble.c: 199: eusartRunPara.nRcvState = 0;
 15578  07B9  01EA               	clrf	_eusartRunPara+6	;volatile
 15579                           
 15580                           ;ble.c: 204: }
 15581                           
 15582                           ;ble.c: 203: break;
 15583                           
 15584                           ;ble.c: 202: default:
 15585                           
 15586                           ;ble.c: 200: }
 15587                           ;ble.c: 201: break;
 15588  07BA  0008               	return
 15589  07BB                     i1l3932:	
 15590  07BB  086A               	movf	_eusartRunPara+6,w	;volatile
 15591                           
 15592                           ; Switch size 1, requested type "space"
 15593                           ; Number of cases is 3, Range of values is 0 to 2
 15594                           ; switch strategies available:
 15595                           ; Name         Instructions Cycles
 15596                           ; simple_byte           10     6 (average)
 15597                           ; direct_byte           12     6 (fixed)
 15598                           ; jumptable            260     6 (fixed)
 15599                           ;	Chosen strategy is simple_byte
 15600  07BC  3A00               	xorlw	0	; case 0
 15601  07BD  1903               	skipnz
 15602  07BE  2F4E               	goto	i1l3894
 15603  07BF  3A01               	xorlw	1	; case 1
 15604  07C0  1903               	skipnz
 15605  07C1  2FA5               	goto	i1l3922
 15606  07C2  3A03               	xorlw	3	; case 2
 15607  07C3  1903               	skipnz
 15608  07C4  2FB4               	goto	i1l3924
 15609  07C5  2FC7               	goto	i1l78
 15610  07C6  0008               	return
 15611  07C7                     i1l78:	
 15612  07C7  0008               	return
 15613  07C8                     __end_of_DecodeCMD:	
 15614                           
 15615                           	psect	text83
 15616  084C                     __ptext83:	
 15617 ;; *************** function _strCmp *****************
 15618 ;; Defined at:
 15619 ;;		line 133 in file "src/comman.c"
 15620 ;; Parameters:    Size  Location     Type
 15621 ;;  s1              1    wreg     PTR const unsigned char 
 15622 ;;		 -> rxBuf(32), 
 15623 ;;  s2              2    0[COMMON] PTR const unsigned char 
 15624 ;;		 -> STR_3(17), STR_2(8), STR_1(8), 
 15625 ;; Auto vars:     Size  Location     Type
 15626 ;;  s1              1    3[COMMON] PTR const unsigned char 
 15627 ;;		 -> rxBuf(32), 
 15628 ;; Return value:  Size  Location     Type
 15629 ;;                  1    wreg      unsigned char 
 15630 ;; Registers used:
 15631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 15632 ;; Tracked objects:
 15633 ;;		On entry : 0/0
 15634 ;;		On exit  : 0/0
 15635 ;;		Unchanged: 0/0
 15636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15637 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15638 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15639 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15640 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15641 ;;Total ram usage:        4 bytes
 15642 ;; Hardware stack levels used:    1
 15643 ;; This function calls:
 15644 ;;		Nothing
 15645 ;; This function is called by:
 15646 ;;		_DecodeCMD
 15647 ;; This function uses a non-reentrant model
 15648 ;;
 15649                           
 15650                           
 15651                           ;psect for function _strCmp
 15652  084C                     _strCmp:	
 15653                           
 15654                           ;incstack = 0
 15655                           ; Regs used in _strCmp: [wreg-fsr1h+status,2+status,0+pclath]
 15656                           ;strCmp@s1 stored from wreg
 15657  084C  00F3               	movwf	strCmp@s1
 15658  084D                     i1l3376:	
 15659                           ;comman.c: 135: while(*s1 == *s2)
 15660                           
 15661  084D  0870               	movf	strCmp@s2,w
 15662  084E  0084               	movwf	4
 15663  084F  0871               	movf	strCmp@s2+1,w
 15664  0850  0085               	movwf	5
 15665  0851  0800               	movf	0,w	;code access
 15666  0852  00F2               	movwf	??_strCmp
 15667  0853  0873               	movf	strCmp@s1,w
 15668  0854  0086               	movwf	6
 15669  0855  3001               	movlw	1	; select bank2/3
 15670  0856  0087               	movwf	7
 15671  0857  0801               	movf	1,w
 15672  0858  0672               	xorwf	??_strCmp,w
 15673  0859  1D03               	btfss	3,2
 15674  085A  286C               	goto	i1l3378
 15675                           
 15676                           ;comman.c: 136: {
 15677                           ;comman.c: 137: s1++;
 15678  085B  3001               	movlw	1
 15679  085C  00F2               	movwf	??_strCmp
 15680  085D  0872               	movf	??_strCmp,w
 15681  085E  07F3               	addwf	strCmp@s1,f
 15682                           
 15683                           ;comman.c: 138: s2++;
 15684  085F  3001               	movlw	1
 15685  0860  07F0               	addwf	strCmp@s2,f
 15686  0861  3000               	movlw	0
 15687  0862  3DF1               	addwfc	strCmp@s2+1,f
 15688                           
 15689                           ;comman.c: 139: if(*s2 == '\0')
 15690  0863  0870               	movf	strCmp@s2,w
 15691  0864  0084               	movwf	4
 15692  0865  0871               	movf	strCmp@s2+1,w
 15693  0866  0085               	movwf	5
 15694  0867  0012               	moviw fsr0++
 15695  0868  1D03               	btfss	3,2
 15696  0869  284D               	goto	i1l3376
 15697                           
 15698                           ;comman.c: 140: return 0;
 15699  086A  3000               	movlw	0
 15700  086B  0008               	return
 15701  086C                     i1l3378:	
 15702                           
 15703                           ;comman.c: 141: }
 15704                           ;comman.c: 142: return 1;
 15705  086C  3001               	movlw	1
 15706  086D  0008               	return
 15707  086E                     __end_of_strCmp:	
 15708  007E                     btemp	set	126	;btemp
 15709  007E                     int$flags	set	126
 15710  007E                     wtemp	set	126
 15711  007E                     wtemp0	set	126
 15712  0080                     wtemp1	set	128
 15713  0082                     wtemp2	set	130
 15714  0084                     wtemp3	set	132
 15715  0086                     wtemp4	set	134
 15716  0088                     wtemp5	set	136
 15717  007F                     wtemp6	set	127
 15718  007E                     ttemp	set	126
 15719  007E                     ttemp0	set	126
 15720  0081                     ttemp1	set	129
 15721  0084                     ttemp2	set	132
 15722  0087                     ttemp3	set	135
 15723  007F                     ttemp4	set	127
 15724  007E                     ltemp	set	126
 15725  007E                     ltemp0	set	126
 15726  0082                     ltemp1	set	130
 15727  0086                     ltemp2	set	134
 15728  0080                     ltemp3	set	128


Data Sizes:
    Strings     109
    Constant    0
    Data        12
    BSS         153
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     68      80
    BANK1            80     48      76
    BANK2            80      0      79
    BANK3            80      0      44
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    eusartSendBuffer@buf	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_8(CODE[15]), STR_7(CODE[11]), STR_6(CODE[34]), STR_5(CODE[19]), 
		 -> STR_4(CODE[5]), 

    readBuffer@buf	PTR unsigned char  size(1) Largest target is 47
		 -> readLedPara@para(BANK1[47]), 

    writeBuffer@buf	PTR unsigned char  size(1) Largest target is 47
		 -> writeLedPara@para(BANK0[47]), 

    strCmp@s2	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[17]), STR_2(CODE[8]), STR_1(CODE[8]), 

    strCmp@s1	PTR const unsigned char  size(1) Largest target is 32
		 -> rxBuf(BANK2[32]), 

    bleSendData@frame	PTR const unsigned char  size(1) Largest target is 32
		 -> txBuf(BANK3[32]), 

    bleSendCMD@pBuf	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_8(CODE[15]), STR_7(CODE[11]), STR_6(CODE[34]), STR_5(CODE[19]), 
		 -> STR_4(CODE[5]), 

    getCRC@pbuf	PTR unsigned char  size(1) Largest target is 32
		 -> rxBuf(BANK2[32]), txBuf(BANK3[32]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_runRTC
    _runRTC->_checkIsYearLeap
    _checkIsYearLeap->___lwmod
    _TMR2_UserInterruptHandler->_updateLed
    _keyScan->_ReadKey
    _keyAction->i1_updateDayBright
    _keyAction->i1_updateNightBright
    i1_updatePWM->i1_PWM1_LoadDutyValue
    i1_updatePWM->i1_PWM2_LoadDutyValue
    i1_updatePWM->i1_PWM3_LoadDutyValue
    i1_updatePWM->i1_PWM4_LoadDutyValue
    _DecodeCMD->_strCmp

Critical Paths under _main in BANK0

    _saveLedPara->_writeLedPara
    _writeLedPara->_writeBuffer
    _writeBuffer->_writeByte
    _writeByte->_DATAEE_WriteByte
    _initLed->_initLedPara
    _initLedPara->_readLedPara
    _readLedPara->_readBuffer
    _readBuffer->_readByte
    _readByte->_DATAEE_ReadByte
    _initBLE->_bleSendCMD
    _bleSendCMD->_eusartSendBuffer
    _eusartSendBuffer->_eusartSendByte
    _findDeviceFlash->_initLedStatus
    _turnOffLed->_PWM1_LoadDutyValue
    _turnOffLed->_PWM2_LoadDutyValue
    _turnOffLed->_PWM3_LoadDutyValue
    _turnOffLed->_PWM4_LoadDutyValue
    _turnMaxLed->_PWM1_LoadDutyValue
    _turnMaxLed->_PWM2_LoadDutyValue
    _turnMaxLed->_PWM3_LoadDutyValue
    _turnMaxLed->_PWM4_LoadDutyValue
    _initLedStatus->_updateDayBright
    _initLedStatus->_updateNightBright
    _autoRun->___lldiv
    ___lldiv->___lmul
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _DecodeDATA->_bleSendDeviceData
    _DecodeDATA->_bleSendDeviceTime
    _updatePWM->_PWM1_LoadDutyValue
    _updatePWM->_PWM2_LoadDutyValue
    _updatePWM->_PWM3_LoadDutyValue
    _updatePWM->_PWM4_LoadDutyValue
    _bleSendDeviceTime->_getCRC
    _bleSendDeviceData->_getCRC
    _bleSendData->_eusartSendByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _initLedPara->_readLedPara

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   29567
                                             66 BANK0      2     2      0
                         _DecodeDATA
                  _SYSTEM_Initialize
                    _TMR0_StartTimer
                    _TMR2_StartTimer
                            _autoRun
                    _findDeviceFlash
                            _initBLE
                            _initLed
                            _initRTC
                            _preview
                        _saveLedPara
 ---------------------------------------------------------------------------------
 (1) _saveLedPara                                          1     1      0     930
                                             63 BANK0      1     1      0
                       _writeLedPara
 ---------------------------------------------------------------------------------
 (2) _writeLedPara                                        50     3     47     930
                                             13 BANK0     50     3     47
                        _writeBuffer
 ---------------------------------------------------------------------------------
 (3) _writeBuffer                                          6     4      2     782
                                              7 BANK0      6     4      2
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            3     2      1     442
                                              4 BANK0      3     2      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     4     1      3     295
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _preview                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLed                                              0     0      0    4621
                        _initLedPara
                      _initLedStatus
 ---------------------------------------------------------------------------------
 (2) _initLedPara                                          6     6      0     912
                                             60 BANK0      6     6      0
                        _readLedPara
                _updateDayRiseStatus
              _updateNightRiseStatus
 ---------------------------------------------------------------------------------
 (3) _updateNightRiseStatus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _updateDayRiseStatus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readLedPara                                         97    50     47     600
                                             11 BANK0     49     2     47
                                              0 BANK1     48    48      0
                         _readBuffer
 ---------------------------------------------------------------------------------
 (4) _readBuffer                                           6     4      2     532
                                              5 BANK0      6     4      2
                           _readByte
 ---------------------------------------------------------------------------------
 (5) _readByte                                             3     3      0     192
                                              2 BANK0      3     3      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      2     0      2     147
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initBLE                                              3     3      0     832
                                              7 BANK0      3     3      0
                         _bleSendCMD
 ---------------------------------------------------------------------------------
 (2) _bleSendCMD                                           3     1      2     832
                                              4 BANK0      3     1      2
                   _eusartSendBuffer
 ---------------------------------------------------------------------------------
 (3) _eusartSendBuffer                                     3     1      2     273
                                              1 BANK0      3     1      2
                     _eusartSendByte
 ---------------------------------------------------------------------------------
 (1) _findDeviceFlash                                      0     0      0    6901
                      _initLedStatus
                         _turnMaxLed
                         _turnOffLed
 ---------------------------------------------------------------------------------
 (2) _turnOffLed                                           0     0      0    1596
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (2) _turnMaxLed                                           0     0      0    1596
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (2) _initLedStatus                                        3     3      0    3709
                                              4 BANK0      3     3      0
                     _indicateLedBle
                     _indicateLedDay
                   _indicateLedNight
                     _indicateLedOff
                     _turnOffLedRamp
                      _turnOnLedRamp
                    _updateDayBright
                  _updateNightBright
 ---------------------------------------------------------------------------------
 (3) _updateNightBright                                    2     2      0    1752
                                              2 BANK0      2     2      0
                          _updatePWM
 ---------------------------------------------------------------------------------
 (3) _updateDayBright                                      2     2      0    1686
                                              2 BANK0      2     2      0
                          _updatePWM
 ---------------------------------------------------------------------------------
 (3) _indicateLedOff                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _indicateLedNight                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _indicateLedDay                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _autoRun                                             58    58      0    7107
                                             26 BANK0     17    17      0
                                              0 BANK1     41    41      0
                            ___lldiv
                             ___lmul
                             ___wmul
                          _updatePWM
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    2564
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     504
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     574
                                             12 BANK0     14     6      8
                             ___lmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DecodeDATA                                          19    19      0    9153
                                             10 BANK0     19    19      0
                            ___lwdiv
                  _bleSendDeviceData
                  _bleSendDeviceTime
                             _getCRC
                     _indicateLedBle
                     _turnOffLedRamp
                      _turnOnLedRamp
                          _updatePWM
 ---------------------------------------------------------------------------------
 (4) _updatePWM                                            0     0      0    1596
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (5) _PWM4_LoadDutyValue                                   2     0      2     399
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _PWM3_LoadDutyValue                                   2     0      2     399
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _PWM2_LoadDutyValue                                   2     0      2     399
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _PWM1_LoadDutyValue                                   2     0      2     399
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _turnOnLedRamp                                        2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _turnOffLedRamp                                       2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _indicateLedBle                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _bleSendDeviceTime                                    4     4      0    2162
                                              6 BANK0      4     4      0
                        _bleSendData
                             _getCRC
 ---------------------------------------------------------------------------------
 (2) _bleSendDeviceData                                    4     4      0    2275
                                              6 BANK0      4     4      0
                        _bleSendData
                             _getCRC
 ---------------------------------------------------------------------------------
 (2) _getCRC                                               6     5      1    1676
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (3) _bleSendData                                          4     3      1     351
                                              1 BANK0      4     3      1
                     _eusartSendByte
 ---------------------------------------------------------------------------------
 (4) _eusartSendByte                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     368
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0    3917
                                             11 COMMON     1     1      0
                          _DecodeCMD
                     _EUSART_RCV_ISR
          _TMR2_UserInterruptHandler
                             _runRTC
 ---------------------------------------------------------------------------------
 (8) _runRTC                                               1     1      0     740
                                             10 COMMON     1     1      0
                    _checkIsYearLeap
 ---------------------------------------------------------------------------------
 (9) _checkIsYearLeap                                      4     2      2     740
                                              6 COMMON     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             6     2      4     571
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) _TMR2_UserInterruptHandler                            1     1      0    2683
                                              9 COMMON     1     1      0
                          _keyAction
                            _keyScan
                          _updateLed
 ---------------------------------------------------------------------------------
 (9) _updateLed                                            7     7      0     730
                                              2 COMMON     7     7      0
                        i1_updatePWM
 ---------------------------------------------------------------------------------
 (9) _keyScan                                              2     2      0     156
                                              2 COMMON     2     2      0
                            _ReadKey
 ---------------------------------------------------------------------------------
 (10) _ReadKey                                             2     2      0      67
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _keyAction                                            4     4      0    1797
                                              4 COMMON     4     4      0
                   i1_indicateLedBle
                   i1_indicateLedDay
                 i1_indicateLedNight
                   i1_indicateLedOff
                  i1_updateDayBright
              i1_updateDayRiseStatus
                i1_updateNightBright
            i1_updateNightRiseStatus
                        i1_updatePWM
 ---------------------------------------------------------------------------------
 (10) i1_updateNightRiseStatus                             0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_updateNightBright                                 2     2      0     620
                                              2 COMMON     2     2      0
                        i1_updatePWM
 ---------------------------------------------------------------------------------
 (10) i1_updateDayRiseStatus                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_updateDayBright                                   2     2      0     554
                                              2 COMMON     2     2      0
                        i1_updatePWM
 ---------------------------------------------------------------------------------
 (10) i1_updatePWM                                         0     0      0     464
               i1_PWM1_LoadDutyValue
               i1_PWM2_LoadDutyValue
               i1_PWM3_LoadDutyValue
               i1_PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (11) i1_PWM4_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (11) i1_PWM3_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (11) i1_PWM2_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (11) i1_PWM1_LoadDutyValue                                2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) i1_indicateLedOff                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_indicateLedNight                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_indicateLedDay                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_indicateLedBle                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_RCV_ISR                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _DecodeCMD                                            1     1      0     494
                                              4 COMMON     1     1      0
                             _strCmp
 ---------------------------------------------------------------------------------
 (9) _strCmp                                               4     2      2     494
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DecodeDATA
     ___lwdiv
     _bleSendDeviceData
       _bleSendData
         _eusartSendByte
       _getCRC
     _bleSendDeviceTime
       _bleSendData
         _eusartSendByte
       _getCRC
     _getCRC
     _indicateLedBle
     _turnOffLedRamp
     _turnOnLedRamp
     _updatePWM
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _TMR0_Initialize
     _TMR2_Initialize
   _TMR0_StartTimer
   _TMR2_StartTimer
   _autoRun
     ___lldiv
       ___lmul (ARG)
       ___wmul (ARG)
     ___lmul
     ___wmul
     _updatePWM
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
   _findDeviceFlash
     _initLedStatus
       _indicateLedBle
       _indicateLedDay
       _indicateLedNight
       _indicateLedOff
       _turnOffLedRamp
       _turnOnLedRamp
       _updateDayBright
         _updatePWM
           _PWM1_LoadDutyValue
           _PWM2_LoadDutyValue
           _PWM3_LoadDutyValue
           _PWM4_LoadDutyValue
       _updateNightBright
         _updatePWM
           _PWM1_LoadDutyValue
           _PWM2_LoadDutyValue
           _PWM3_LoadDutyValue
           _PWM4_LoadDutyValue
     _turnMaxLed
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
     _turnOffLed
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
   _initBLE
     _bleSendCMD
       _eusartSendBuffer
         _eusartSendByte
   _initLed
     _initLedPara
       _readLedPara
         _readBuffer
           _readByte
             _DATAEE_ReadByte
       _updateDayRiseStatus
       _updateNightRiseStatus
     _initLedStatus
       _indicateLedBle
       _indicateLedDay
       _indicateLedNight
       _indicateLedOff
       _turnOffLedRamp
       _turnOnLedRamp
       _updateDayBright
         _updatePWM
           _PWM1_LoadDutyValue
           _PWM2_LoadDutyValue
           _PWM3_LoadDutyValue
           _PWM4_LoadDutyValue
       _updateNightBright
         _updatePWM
           _PWM1_LoadDutyValue
           _PWM2_LoadDutyValue
           _PWM3_LoadDutyValue
           _PWM4_LoadDutyValue
   _initRTC
   _preview
   _saveLedPara
     _writeLedPara
       _writeBuffer
         _writeByte
           _DATAEE_WriteByte

 _INTERRUPT_InterruptManager (ROOT)
   _DecodeCMD
     _strCmp
   _EUSART_RCV_ISR
   _TMR2_UserInterruptHandler
     _keyAction
       i1_indicateLedBle
       i1_indicateLedDay
       i1_indicateLedNight
       i1_indicateLedOff
       i1_updateDayBright
         i1_updatePWM
           i1_PWM1_LoadDutyValue
           i1_PWM2_LoadDutyValue
           i1_PWM3_LoadDutyValue
           i1_PWM4_LoadDutyValue
       i1_updateDayRiseStatus
       i1_updateNightBright
         i1_updatePWM
           i1_PWM1_LoadDutyValue
           i1_PWM2_LoadDutyValue
           i1_PWM3_LoadDutyValue
           i1_PWM4_LoadDutyValue
       i1_updateNightRiseStatus
       i1_updatePWM
         i1_PWM1_LoadDutyValue
         i1_PWM2_LoadDutyValue
         i1_PWM3_LoadDutyValue
         i1_PWM4_LoadDutyValue
     _keyScan
       _ReadKey
     _updateLed
       i1_updatePWM
         i1_PWM1_LoadDutyValue
         i1_PWM2_LoadDutyValue
         i1_PWM3_LoadDutyValue
         i1_PWM4_LoadDutyValue
   _runRTC
     _checkIsYearLeap
       ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     44      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     30      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2C      11       55.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     125      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     125      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Jan  7 16:00:49 2017

                                  pc 0002                          __CFG_CP$OFF 0000  
                                 l54 0925                                   l47 0900  
               i1_PWM1_LoadDutyValue 15A8                     _indicateLedNight 1495  
              i1_updateDayRiseStatus 1600                  ___wmul@multiplicand 0022  
                __end_ofi1_updatePWM 1800               ??i1_PWM4_LoadDutyValue 0072  
         __size_of_bleSendDeviceData 006D              __end_of_updateDayBright 08DA  
                        __CFG_LVP$ON 0000           __size_of_bleSendDeviceTime 0041  
                                l121 0414                                  l130 0449  
                                l114 0727                                  l124 041F  
                                l141 0510                                  l134 04A5  
                                l151 05C2                                  l146 0546  
                                l155 0627                                  l147 0551  
                                l317 174C                                  l504 0E80  
                                l284 0886                                  l533 0B9A  
                                l541 16B7                                  l542 16B0  
                                l548 1508                                  l726 14B3  
                                l649 0C02                                  l972 16FB  
                                _GIE 005F                                  _RA2 0062  
                                _PR2 001E                         __CFG_CPD$OFF 0000  
         __size_of_updateNightBright 003D                      _TMR2_Initialize 14D7  
                    _PWM4_Initialize 14EC                                  wreg 0009  
                         _DecodeDATA 03EC                                 S4492 106D  
  __end_of_TMR2_UserInterruptHandler 0A16                                 l3000 1799  
                               l3014 17D7                                 l3102 16DA  
                               l3112 168C                                 l3114 16A0  
                               l4002 04AE                                 l3202 1637  
                               l3028 177A                                 l4100 0676  
                               l3212 0A8B                                 l3124 1658  
                               l3134 0910                                 l4006 04C7  
                               l3222 0ABF                                 l4112 069B  
                               l3216 0AA5                                 l4106 0681  
                               l4018 04E3                                 l3218 0AB6  
                               l3322 08E6                                 l3340 0D21  
                               l4116 06B4                                 l4028 051B  
                               l3324 08ED                                 l3228 164D  
                               l3350 0D3F                                 l3342 0D39  
                               l4126 06FA                                 l4038 052E  
                               l4134 0719                                 l3190 08B9  
                               l3166 172D                                 l3352 0D57  
                               l4056 059F                                 l4312 01C4  
                               l3362 0AD4                                 l4090 0644  
                               l4074 060E                                 l4058 05B9  
                               l4330 0249                                 l4322 0212  
                               l4154 0C85                                 l3364 0AEB  
                               l4076 061E                                 l4340 03D6  
                               l4316 01D4                                 l3196 08D7  
                               l4096 066E                                 l3800 16F5  
                               l4336 0322                                 l4344 03DF  
                               l4290 0179                                 l3730 0ED3  
                               l4442 0C18                                 l4348 03E9  
                               l4284 0126                                 l3740 0EED  
                               l4452 0C24                                 l3814 09BA  
                               l3726 0EC8                                 l3662 0E16  
                               l3832 0BAC                                 l4296 017E  
                               l3760 0B6D                                 l3744 0B55  
                               l3736 0EE2                                 l3680 0E6C  
                               l3672 0E3A                                 l3842 0BDA  
                               l3834 0BBA                                 l3818 09C4  
                               l3754 0B64                                 l3666 0E35  
                               l3690 0E9C                                 l4466 0C3C  
                               l4458 0C2E                                 l3860 0A1F  
                               l3748 0B5B                                 l3676 0E64  
                               l4468 0C3F                                 l3862 0A2B  
                               l3846 0BE5                                 l3686 0E94  
                               l3872 0A46                                 l2986 17B8  
                               l3970 043E                                 l3946 040C  
                               l3938 03F5                                 l3778 0B8C  
                               l3868 0A3D                                 l3964 0436  
                               l3948 0410                                 l3990 0469  
                               l3996 049D                                 STR_1 1060  
                       __CFG_WDTE$ON 0000                                 STR_2 1060  
                               STR_3 1035                                 STR_4 1068  
                               STR_5 1022                                 STR_6 1000  
                               STR_7 1055                                 STR_8 1046  
            __end_of_PWM1_Initialize 14CD                                 _LATA 010C  
                               _LATB 010D                                 _LATC 010E  
                               u3260 0B4B                                 u3500 0E07  
                               u2705 17CB                                 u4250 04B5  
                               u4315 04F8                                 u4260 04B6  
                               u2725 176E                                 u4510 06A2  
                               u4520 06A3                                 u2920 0847  
                               u2665 17AC                                 u4425 05EF  
                               u3545 0E3D                                 u5307 090B  
                               u2685 178D                                 u3805 16FC  
                               u3565 0E54                                 u4550 0701  
                               u3815 1701                                 u4560 0702  
                               u4480 0688                                 u4800 175A  
                               u3905 0BBB                                 u4490 0689  
                               u3915 0BCF                                 u3925 0BDB  
                               u3845 09C5                                 u5277 0C11  
                               u3855 09CC                                 u5287 0C4B  
                               u5297 0C59                                 u3955 0A22  
                               u4915 024D                                 u3885 0BAF  
                               u4925 0260                                 u4845 019C  
                               i1l78 07C7                                 u3975 0A2C  
                               u4855 01A4                                 i1l88 075A  
                               u3985 0A36                                 u4945 0277  
                               u4865 01AC                                 u3995 0A3E  
                               u4955 028A                                 u4875 01CA  
                               u4965 02A3                                 u4885 01D2  
                               u4975 0327                                 u4895 01F7  
                               u4985 033A                                 u4995 03A9  
                               _TMR2 001D                                 _TRMT 0CF1  
                               _TXIF 008C                                 _WPUA 020C  
                               _WPUB 020D                                 _WPUC 020E  
                       __CFG_WRT$OFF 0000                           ReadKey@Trg 006C  
                  ?i1_indicateLedBle 0070                    ?i1_indicateLedDay 0070  
                  ?i1_indicateLedOff 0070                                 _main 0BEE  
                    _TMR0_StartTimer 1471                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006              __size_of_indicateLedBle 0005  
            __size_of_indicateLedDay 0005                                 btemp 007E  
            __size_of_indicateLedOff 0005                                 ltemp 007E  
                               start 0039                                 ttemp 007E  
                 ??i1_indicateLedBle 0070                   ??i1_indicateLedDay 0070  
                               wtemp 007E                   ??i1_indicateLedOff 0070  
                       ?_initLedPara 0070                        __CFG_CSWEN$ON 0000  
                      __CFG_MCLRE$ON 0000                      _findDeviceFlash 16A2  
                    __end_of_ReadKey 1581                         ?_readLedPara 002B  
              ?i1_PWM1_LoadDutyValue 0070            __size_of_DATAEE_WriteByte 0022  
           __end_of_eusartSendBuffer 166F              __end_of_PWM2_Initialize 14D7  
            __end_of_TMR0_Initialize 1502                 __size_of_bleSendData 0029  
     __size_of_OSCILLATOR_Initialize 000A        __end_of_OSCILLATOR_Initialize 14C3  
                        _writeBuffer 172A                                ?_main 0070  
      __size_ofi1_PWM3_LoadDutyValue 0016                      __end_of___lldiv 0BEE  
                              _T2CON 001F                                _LATC1 0871  
                              _LATB5 086D                     ??_eusartSendByte 0020  
                     __CFG_DEBUG$OFF 0000                      __end_of___lwdiv 0A4B  
                              i1l101 078D                                i1l103 0795  
                              i1l401 0FD5                                i1l250 001E  
                              i1l404 0FE6                                i1l253 0029  
                              i1l256 0034                      __end_of___lwmod 0957  
                              i1l380 0FF9                                i1l390 0F78  
                              i1l392 0F90                                i1l394 0FA6  
                              i1l397 0FB7                                i1l399 0FBF  
                              _RCREG 0199                                _OSCEN 091D  
                 _PWM4_LoadDutyValue 17C1                                _TMR0H 0016  
                              _TMR0L 0015                                _PORTC 000E  
                              _TRISA 008C                                _TRISB 008D  
                              _TRISC 008E                                _TXREG 019A  
                ___lmul@multiplicand 0024                        __CFG_PWRTE$ON 0000  
                     __CFG_FCMEN$OFF 0000                          ReadKey@Cont 006B  
             __size_of_initLedStatus 004E                      __end_of_initBLE 0CA2  
                    _DATAEE_ReadByte 151B                      __end_of_autoRun 03EC  
                    __end_of_keyScan 0A85                      __end_of_initRTC 1594  
                    __end_of_initLed 14A5                                _rxBuf 014F  
                ?_PWM4_LoadDutyValue 0020                                _txBuf 01A0  
       __end_ofi1_PWM2_LoadDutyValue 15D4              __end_of_PWM3_Initialize 14EC  
                     __CFG_BOREN$OFF 0000                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                       __CFG_BORV$HIGH 0000  
                   ?_checkIsYearLeap 0076                          autoRun@dbrt 00BE  
                    __end_of_preview 150D                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
              __size_of_writeLedPara 000E                                status 0003  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      _TMR2_StartTimer 1474  
                        i1_updatePWM 17E0                      __initialization 003B  
     __size_of_updateNightRiseStatus 0016        __end_of_updateNightRiseStatus 1658  
                 __size_of_DecodeCMD 00A0                         __end_of_main 0C46  
               ??_PWM4_LoadDutyValue 0022               ?i1_updateDayRiseStatus 0070  
   __size_ofi1_updateNightRiseStatus 0016              __end_of_PWM4_Initialize 14F7  
            __end_of_TMR2_Initialize 14E1          ?_INTERRUPT_InterruptManager 0070  
                       ?_saveLedPara 0070                         keyAction@sta 0076  
                             ??_main 0062                     ?_updateDayBright 0070  
                     _EUSART_RCV_ISR 1594                         _writeLedPara 150D  
                        ?_DecodeDATA 0070              __end_of_TMR0_StartTimer 1474  
                             _CCPR1H 0292                               _CCPR2H 0296  
                             _CCPR3H 0312                               _CCPR1L 0291  
                             _CCPR4H 0316                               _CCPR2L 0295  
                             _CCPR3L 0311                               _CCPR4L 0315  
                             _ANSELA 018C                               _ANSELB 018D  
                             _ANSELC 018E                   __CFG_RSTOSC$HFINT1 0000  
                             _T0CON0 0017                               _T0CON1 0018  
                             _RC1STA 019D                     ?_PWM1_Initialize 0070  
                             _ODCONA 028C                               i1l3042 15B9  
                             _ODCONB 028D                               _ODCONC 028E  
                             i1l3070 15E5                               i1l3056 15CF  
                             i1l3240 0931                               i1l3242 093D  
                             i1l3250 0952                               i1l3084 15FB  
                             i1l3260 0895                               i1l4206 1599  
                             i1l3246 0949                               i1l3272 160B  
                             i1l3512 0A6B                               i1l4240 0CD9  
                             i1l3266 08B0                               i1l3282 07CD  
                             i1l3530 0F04                               i1l3522 0A7E  
                             i1l4170 09E8                               i1l3292 07FD  
                             i1l3604 0FD9                               i1l3612 0FEE  
                             i1l3524 0A80                               i1l4180 09F5  
                             i1l3286 07E5                               i1l3542 0F21  
                             i1l3518 0A76                               i1l3622 0D78  
                             i1l3376 084D                               i1l3288 07F5  
                             i1l3608 0FEA                               i1l3552 0F32  
                             i1l3536 0F09                               i1l3632 0DB8  
                             i1l4256 0D04                               i1l3378 086C  
                             i1l3298 1621                               i1l3570 0F5C  
                             i1l3546 0F28                               i1l3642 0DF5  
                             i1l4194 0A08                               i1l3572 0F60  
                             i1l3564 0F42                               i1l3636 0DE1  
                             i1l3902 0762                               i1l3558 0F3C  
                             i1l3566 0F51                               i1l3638 0DED  
                             i1l3912 0790                               i1l3904 077E  
                             i1l3576 0F64                               i1l3922 07A5  
                             i1l3594 0FAA                               i1l3578 0F6D  
                             i1l3924 07B4                               i1l3932 07BB  
                             i1l3598 0FBB                               i1l3790 09AD  
                             i1l3882 072E                               i1l3794 09AF  
                             i1l3894 074E                               i1l3898 075D  
                             u303_25 0934                               u305_25 0943  
                             u306_25 094A                               u280_25 15F2  
                             u274_25 15B0                               u346_25 0D8E  
                             u347_25 0DAC                               u276_25 15C6  
                             u348_25 0DD4                               u278_25 15DC  
                     bleSendCMD@pBuf 0024                               _OSCFRQ 091F  
                        readBuffer@i 002A                               _TX1STA 019E  
            __end_of_findDeviceFlash 16BC                            ??_ReadKey 0070  
             __size_of_turnOnLedRamp 0019                   i1_indicateLedNight 1481  
                      _initLedStatus 0B4D                  i1_updateNightBright 07C8  
             ??i1_PWM1_LoadDutyValue 0072                               ___lmul 09B1  
        __size_of_PWM3_LoadDutyValue 001F                               ___wmul 16F2  
                             _getCRC 1688                       __CFG_STVREN$ON 0000  
                          ??___lldiv 0034                            ??___lwdiv 0024  
                          ??___lwmod 0074                  ?i1_indicateLedNight 0070  
                   __end_of_readByte 155C                     ?_TMR0_Initialize 0070  
                   ?_PWM2_Initialize 0070               __end_of_EUSART_RCV_ISR 15A8  
                             _runRTC 0CA2                               _strCmp 084C  
            __end_of_DATAEE_ReadByte 152A                            ??_initBLE 0027  
                          ??_autoRun 003A                            ??_keyScan 0072  
                          ??_initRTC 0020                            ??_initLed 0062  
               ?i1_updateNightBright 0070                            ??_preview 0020  
                     bleSendData@len 0021          ??_TMR2_UserInterruptHandler 0079  
            __end_of_TMR2_StartTimer 1477                    __end_of_DecodeCMD 07C8  
               ??i1_indicateLedNight 0070             __end_of_indicateLedNight 149A  
                   ?_PWM3_Initialize 0070                    _SYSTEM_Initialize 16BC  
            __end_of__initialization 0068                       _indicateLedBle 148B  
                     _indicateLedDay 1490                       _indicateLedOff 149A  
                 ?_SYSTEM_Initialize 0070           __end_of_PWM2_LoadDutyValue 17A2  
        PWM1_LoadDutyValue@dutyValue 0020                       ?_initLedStatus 0070  
                     __pcstackCOMMON 0070                         __pidataBANK3 0800  
                ??_SYSTEM_Initialize 0021                  __size_of_DecodeDATA 033C  
               __size_of_initLedPara 00F8                     _DATAEE_WriteByte 086E  
                 _PWM1_LoadDutyValue 1764                     ?_TMR2_Initialize 0070  
                   ?_PWM4_Initialize 0070                 __size_of_readLedPara 0020  
               i1_PWM2_LoadDutyValue 15BE                      ?_EUSART_RCV_ISR 0070  
        PWM4_LoadDutyValue@dutyValue 0020                        _turnOnLedRamp 166F  
                ?_PWM1_LoadDutyValue 0020                ??i1_updateNightBright 0072  
                         _bleSendCMD 08DA                     ?_TMR0_StartTimer 0070  
          __end_of_SYSTEM_Initialize 16D7                   __size_of_keyAction 0110  
             __end_of_indicateLedBle 1490               __end_of_indicateLedDay 1495  
             __end_of_indicateLedOff 149F                           __pbssBANK0 0064  
                         __pbssBANK1 00D0                           __pbssBANK2 0120  
                         __pbssBANK3 01A0         __size_of_updateDayRiseStatus 0016  
                   ?_findDeviceFlash 0070                 ??_PWM1_LoadDutyValue 0022  
                       initLedPara@i 0061                         initLedPara@j 0060  
                         __pmaintext 0BEE        i1PWM3_LoadDutyValue@dutyValue 0070  
          _TMR2_UserInterruptHandler 09E1              i1_updateNightRiseStatus 1616  
                            ?___lmul 0020                              ?___wmul 0020  
                            ?_getCRC 0020                      __CFG_PPS1WAY$ON 0000  
                         __pintentry 0004                       initLedStatus@i 0026  
                            _CCP1CON 0293                              _CCP2CON 0297  
                            _CCP3CON 0313                              _CCP4CON 0317  
              ?i1_PWM2_LoadDutyValue 0070                       ___lmul@product 0028  
                  ?_eusartSendBuffer 0021            __size_ofi1_indicateLedBle 0005  
          __size_ofi1_indicateLedDay 0005            __size_ofi1_indicateLedOff 0005  
                            ?_runRTC 0070                         ?_writeBuffer 0027  
                            ?_strCmp 0070                     ?_DATAEE_ReadByte 0020  
                 ??_eusartSendBuffer 0023                       ?_turnOnLedRamp 0070  
               __size_of_saveLedPara 001E        __size_ofi1_PWM4_LoadDutyValue 0016  
                      _eusartRunPara 0064                              _SP1BRGH 019C  
                            _SP1BRGL 019B                              _OSCCON1 0919  
                            _OSCCON3 091B                   __size_of_updatePWM 002C  
                 __size_of_updateLed 0085                              _NVMADRH 0892  
                            _NVMADRL 0891                              _OSCTUNE 091E  
                            _NVMDATL 0893                              _NVMCON2 0896  
                            _PPSLOCK 0E0F                     ?_TMR2_StartTimer 0070  
                    ?_indicateLedBle 0070                      ?_indicateLedDay 0070  
                    ?_indicateLedOff 0070                     initLedStatus@sta 0025  
                       readByte@addr 0023         __end_ofi1_PWM3_LoadDutyValue 15EA  
               DATAEE_WriteByte@bAdd 0020                            ?_readByte 0070  
            __size_of_turnOffLedRamp 0012                      DecodeDATA@i_242 0038  
                    DecodeDATA@i_244 0037                      DecodeDATA@i_248 0039  
                    ??_initLedStatus 0024                   __size_of_writeByte 0010  
                            _ReadKey 156E              ??i1_updateDayRiseStatus 0070  
                       ?i1_updatePWM 0070                           getCRC@pbuf 0025  
                      ??_bleSendData 0022                           _readBuffer 16D7  
                 eusartSendByte@byte 0020                      __size_of___lmul 0030  
                            ___lldiv 0B9B                      __size_of___wmul 001C  
                  __end_of_keyAction 1000                      __size_of_getCRC 001A  
                            ___lwdiv 0A16                              ___lwmod 092B  
                    turnOffLedRamp@i 0021                              __ptext1 1746  
                            __ptext2 150D                              __ptext3 172A  
                            __ptext4 152A                              __ptext5 086E  
                            __ptext6 1502                              __ptext7 1581  
                            __ptext8 149F                              __ptext9 0DF8  
                    __size_of_runRTC 0064                      __size_of_strCmp 0022  
                            _initBLE 0C46                              _autoRun 006C  
                            _keyScan 0A4B                              _initRTC 1581  
                            getCRC@i 0024                              _initLed 149F  
              _OSCILLATOR_Initialize 14B9                            _T2CONbits 001F  
           ??_PIN_MANAGER_Initialize 0020                          ?_bleSendCMD 0024  
                       ??_DecodeDATA 002A                              _preview 1502  
         __size_of_SYSTEM_Initialize 001B                              clrloop0 14A6  
               end_of_initialization 0068                          _gLedRunPara 00D0  
                         ??_readByte 0022                              init_ram 14AB  
                            initloop 14AC                    _EUSART_Initialize 153A  
          ??i1_updateNightRiseStatus 0070                      ___lldiv@divisor 002C  
                    ___lldiv@counter 0039                            _MONTH_DAY 01C0  
                 ?_EUSART_Initialize 0070             __size_of_checkIsYearLeap 002E  
                  __end_of_updatePWM 0983                    __end_of_updateLed 0DF8  
                     readBuffer@addr 0029                         writeBuffer@i 002C  
             ??i1_PWM2_LoadDutyValue 0072          __size_of_PWM4_LoadDutyValue 001F  
                       __pstringtext 1000                   __end_of_DecodeDATA 0728  
              _updateNightRiseStatus 1642                      ??_turnOnLedRamp 0020  
                ??_EUSART_Initialize 0020                  __end_of_bleSendData 092B  
                      keyScan@keyNum 0073                    __end_of_writeByte 153A  
                  i1_updateDayBright 0890                   ?i1_updateDayBright 0070  
           __size_of_updateDayBright 0027                     __CFG_FEXTOSC$OFF 0000  
           __end_of_DATAEE_WriteByte 0890                            _RXPPSbits 0E24  
            __size_of_eusartSendByte 0008                    ?_indicateLedNight 0070  
          __end_of_EUSART_Initialize 154B                  ??i1_updateDayBright 0072  
                          _DecodeCMD 0728                          _CCP1CONbits 0293  
                        _CCP2CONbits 0297                   ??_indicateLedNight 0020  
                        _CCP3CONbits 0313                          _CCP4CONbits 0317  
         __end_of_PWM3_LoadDutyValue 17C1             __size_of_PWM1_Initialize 000A  
                   ??_EUSART_RCV_ISR 0070                           _turnOffLed 170E  
                         _turnMaxLed 080C                           keyAction@i 0077  
                        ?_readBuffer 0025                       readByte@result 0024  
                __size_of_bleSendCMD 0028                       __end_of___lmul 09E1  
      __size_ofi1_PWM1_LoadDutyValue 0016                     writeLedPara@addr 005E  
                     __end_of___wmul 170E                       __end_of_getCRC 16A2  
                   i1_indicateLedBle 1477                     writeLedPara@para 002D  
                   i1_indicateLedDay 147C                  _updateDayRiseStatus 162C  
                   i1_indicateLedOff 1486                   _PWM2_LoadDutyValue 1783  
          __end_ofi1_updateDayBright 08B3               ?_OSCILLATOR_Initialize 0070  
               i1_PWM3_LoadDutyValue 15D4                       __end_of_runRTC 0D06  
                         autoRun@sec 00BF                           autoRun@val 00A0  
                     __end_of_strCmp 086E                 __size_of_writeBuffer 001C  
                start_initialization 003B             __size_of_PWM2_Initialize 000A  
           __size_of_TMR0_Initialize 000B                  ?_PWM2_LoadDutyValue 0020  
    __size_of_PIN_MANAGER_Initialize 004A                    DecodeDATA@idx_245 003A  
                  DecodeDATA@idx_246 003B                    DecodeDATA@len_243 0030  
                  DecodeDATA@len_247 0034                    DecodeDATA@val_249 0031  
        __size_ofi1_indicateLedNight 0005                 ?_updateDayRiseStatus 0070  
                     _turnOffLedRamp 155C                           ?_DecodeCMD 0070  
                DATAEE_ReadByte@bAdd 0020                        ??_initLedPara 005C  
                       getCRC@result 0023                     __CFG_LPBOREN$OFF 0000  
               ??_PWM2_LoadDutyValue 0022             __size_of_PWM3_Initialize 000B  
        PWM2_LoadDutyValue@dutyValue 0020                      ReadKey@ReadData 0071  
                      ??_readLedPara 005A                             ??___lmul 0028  
             ?_updateNightRiseStatus 0070                             ??___wmul 0024  
                        _bleSendData 0902                             ??_getCRC 0021  
                        _CCPTMRSbits 029F                 __size_ofi1_updatePWM 0020  
                        __pdataBANK3 01C0          __end_ofi1_updateNightBright 0800  
                           ??_runRTC 007A                ?i1_PWM3_LoadDutyValue 0070  
                           ??_strCmp 0072                    ??_checkIsYearLeap 0078  
                        __pbssCOMMON 007C                     ??_indicateLedBle 0020  
                   ??_indicateLedDay 0020                            ___latbits 0002  
                   ??_indicateLedOff 0020                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0             __size_of_PWM4_Initialize 000B  
           __size_of_TMR2_Initialize 000A               __end_of_turnOffLedRamp 156E  
                __size_of_readBuffer 001B                ??_updateDayRiseStatus 0020  
          __size_of_eusartSendBuffer 0017           __size_of_EUSART_Initialize 0011  
      i1PWM1_LoadDutyValue@dutyValue 0070         __end_ofi1_PWM4_LoadDutyValue 1600  
                  ??_updateDayBright 0022                             ?_ReadKey 0070  
           __size_of_TMR0_StartTimer 0003                    __size_of_readByte 0011  
        __size_of_PWM1_LoadDutyValue 001F                     ___lwdiv@dividend 0022  
             _PIN_MANAGER_Initialize 0B03       __size_ofi1_updateDayRiseStatus 0016  
                        ?_turnOffLed 0070                          ?_turnMaxLed 0070  
      __end_ofi1_updateDayRiseStatus 1616                             ?___lldiv 002C  
      i1PWM4_LoadDutyValue@dutyValue 0070             __size_of_findDeviceFlash 001A  
                           ?___lwdiv 0020                             ?___lwmod 0070  
                      ??_saveLedPara 005F                  __end_of_initLedPara 0EF0  
                  ??_PWM1_Initialize 0020         ??_INTERRUPT_InterruptManager 007B  
         __size_ofi1_updateDayBright 0023                            __pswtext1 106D  
                          _keyAction 0EF0                  __end_of_readLedPara 084C  
                           ?_initBLE 0070                             _BAUD1CON 019F  
                           ?_autoRun 0070                             ?_keyScan 0070  
                           ?_initRTC 0070                             ?_initLed 0070  
                          getCRC@len 0020                        ?_writeLedPara 002D  
                       ??_bleSendCMD 0026                             ?_preview 0070  
                   ___lwdiv@quotient 0025             __size_of_DATAEE_ReadByte 000F  
                    ?_turnOffLedRamp 0070                       turnOnLedRamp@i 0021  
                     _eusartSendByte 14B1                          DecodeDATA@i 003C  
               i1updateNightBright@i 0073                    ??_TMR0_Initialize 0020  
                  ??_PWM2_Initialize 0020                          ??_DecodeCMD 0074  
                     ___wmul@product 0024                             _LATBbits 010D  
                           _LATCbits 010E                            clear_ram0 14A5  
                           _PIE0bits 0090                             _PIE1bits 0091  
           __size_of_TMR2_StartTimer 0003                __end_of_initLedStatus 0B9B  
__size_of_INTERRUPT_InterruptManager 0035                             _PIR0bits 0010  
                           _PIR1bits 0011                        readBuffer@buf 0025  
                      readBuffer@len 0026                   __end_of_bleSendCMD 0902  
             ??i1_PWM3_LoadDutyValue 0072                            _updatePWM 0957  
                          _updateLed 0D73                    ??_PWM3_Initialize 0020  
                  ___wmul@multiplier 0020                           ?_keyAction 0070  
                     ??_writeLedPara 005C                  __end_of_saveLedPara 1764  
                 findDeviceFlash@tog 006E                DATAEE_WriteByte@bData 0022  
                   updateDayBright@i 0023               __end_of_eusartSendByte 14B9  
                          _writeByte 152A                  __size_of_turnMaxLed 0020  
                __size_of_turnOffLed 001C                    ___lmul@multiplier 0020  
                         updateLed@i 0078                            autoRun@ct 00C3  
                          autoRun@dt 00BA                            autoRun@et 00C1  
                          autoRun@st 00C5                            autoRun@tr 00B0  
                  ?_DATAEE_WriteByte 0020             __end_ofi1_indicateLedBle 147C  
                eusartSendBuffer@buf 0021             __end_ofi1_indicateLedDay 1481  
           __end_ofi1_indicateLedOff 148B                    ??_TMR2_Initialize 0020  
                  ??_PWM4_Initialize 0020                   ??_DATAEE_WriteByte 0023  
               bleSendDeviceData@len 0028                      writeBuffer@addr 002B  
                   __size_of_ReadKey 0013                          _initLedPara 0DF8  
         __end_of_PWM4_LoadDutyValue 17E0                         ??_readBuffer 0027  
                           _gLedPara 0120                          _readLedPara 082C  
            ??_OSCILLATOR_Initialize 0020                    ??_TMR0_StartTimer 0020  
          __size_of_indicateLedNight 0005                     __size_of___lldiv 0053  
                   __size_of___lwdiv 0035                           ?_updatePWM 0070  
                   __size_of___lwmod 002C                           ?_updateLed 0070  
      __size_ofi1_PWM2_LoadDutyValue 0016                   _PWM3_LoadDutyValue 17A2  
              __end_of_turnOnLedRamp 1688                 i1_PWM4_LoadDutyValue 15EA  
       TMR2_UserInterruptHandler@cnt 006D                    ??_findDeviceFlash 0027  
                  _bleSendDeviceData 0D06                     __size_of_initBLE 005C  
                   __size_of_autoRun 0380                     __size_of_keyScan 003A  
                         _T0CON0bits 0017                     __size_of_initRTC 0013  
                  _bleSendDeviceTime 0AC2                     __size_of_initLed 0006  
               bleSendDeviceTime@len 0028                      ___lwdiv@divisor 0020  
                 ?_bleSendDeviceData 0070                    _updateNightBright 0A85  
                    ___lwdiv@counter 0027                   ?_bleSendDeviceTime 0070  
                           __ptext10 1642                             __ptext11 162C  
                           __ptext20 170E                             __ptext12 082C  
                           __ptext21 080C                             __ptext13 16D7  
                           __ptext30 09B1                             __ptext22 0B4D  
                           __ptext14 154B                             __ptext31 0B9B  
                           __ptext23 0A85                             __ptext15 151B  
                           __ptext40 14C3                             __ptext32 1474  
                           __ptext24 08B3                             __ptext16 0C46  
                           __ptext41 0B03                             __ptext33 1471  
                           __ptext25 149A                             __ptext17 08DA  
                           __ptext50 166F                             __ptext42 14B9  
                           __ptext34 16BC                             __ptext26 1495  
                           __ptext18 1658                             __ptext51 155C  
                           __ptext43 153A                             __ptext35 14D7  
                           __ptext27 1490                             __ptext19 16A2  
                           __ptext60 0CA2                             __ptext52 148B  
                           __ptext44 03EC                             __ptext36 14F7  
                           __ptext28 006C                             __ptext61 0983  
                           __ptext53 0AC2                             __ptext45 0957  
                           __ptext37 14EC                             __ptext29 16F2  
                           __ptext70 1600                             __ptext62 092B  
                           __ptext54 0D06                             __ptext46 17C1  
                           __ptext38 14E1                             __ptext71 0890  
                           __ptext63 09E1                             __ptext55 1688  
                           __ptext47 17A2                             __ptext39 14CD  
                           __ptext80 1477                             __ptext72 17E0  
                           __ptext64 0D73                             __ptext56 0902  
                           __ptext48 1783                             __ptext81 1594  
                           __ptext73 15EA                             __ptext65 0A4B  
                           __ptext57 14B1                             __ptext49 1764  
                           __ptext82 0728                             __ptext74 15D4  
                           __ptext66 156E                             __ptext58 0A16  
                ?_PWM3_LoadDutyValue 0020                             __ptext83 084C  
                           __ptext75 15BE                             __ptext67 0EF0  
                           __ptext76 15A8                             __ptext68 1616  
                           __ptext77 1486                             __ptext69 07C8  
                           __ptext78 1481                             __ptext79 147C  
                    ?_eusartSendByte 0070                           ?_writeByte 0024  
                   __size_of_preview 000B         __end_ofi1_PWM1_LoadDutyValue 15BE  
                 ?_updateNightBright 0070                     _eusartSendBuffer 1658  
                 __end_of_readBuffer 16F2          DATAEE_WriteByte@GIEBitValue 0023  
           ?i1_updateNightRiseStatus 0070                        DecodeDATA@idx 002F  
                      DecodeDATA@len 0033                        DecodeDATA@val 0035  
                           _keyValue 007C                  ??_bleSendDeviceData 0026  
                           _readByte 154B                  ??_bleSendDeviceTime 0026  
                      __size_of_main 0058                  ??_updateNightBright 0022  
                  ??_DATAEE_ReadByte 0022              ??_updateNightRiseStatus 0020  
                    _checkIsYearLeap 0983                      autoRun@duration 00B8  
                         _RC1STAbits 019D                           _RB4PPSbits 0E9C  
               ??_PWM3_LoadDutyValue 0022                           _RC3PPSbits 0EA3  
                         _RC4PPSbits 0EA4                         ?_bleSendData 0021  
                           int$flags 007E                           _RC5PPSbits 0EA5  
                         _RC6PPSbits 0EA6                    ??_TMR2_StartTimer 0020  
 __end_of_INTERRUPT_InterruptManager 0039           _INTERRUPT_InterruptManager 0004  
                        _saveLedPara 1746                        ??_writeBuffer 0029  
          __end_of_bleSendDeviceData 0D73          PIN_MANAGER_Initialize@state 0020  
          __end_of_bleSendDeviceTime 0B03                          ??_keyAction 0074  
              ?i1_PWM4_LoadDutyValue 0070                             autoRun@i 00C8  
                           autoRun@j 00C0                             autoRun@k 00C7  
          __end_of_updateNightBright 0AC2                           _INTCONbits 000B  
                        _NVMCON1bits 0895                       writeBuffer@buf 0027  
                     writeBuffer@len 0028                  checkIsYearLeap@year 0076  
                    readLedPara@addr 00A0           __end_ofi1_indicateLedNight 1486  
                    _updateDayBright 08B3                      readLedPara@para 00A1  
                           intlevel1 0000                     ___lwmod@dividend 0072  
                   ___lldiv@dividend 0030              ?_PIN_MANAGER_Initialize 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E0F  
                    _PWM1_Initialize 14C3                        ??i1_updatePWM 0072  
               __end_of_writeLedPara 151B          __size_of_PWM2_LoadDutyValue 001F  
                       ??_turnOffLed 0022                         ??_turnMaxLed 0022  
                           strCmp@s1 0073                             strCmp@s2 0070  
        PWM3_LoadDutyValue@dutyValue 0020                     bleSendData@frame 0024  
                        ??_updatePWM 0022                   bleSendDeviceData@i 0029  
                        ??_updateLed 0072                   i1updateDayBright@i 0073  
                 bleSendDeviceTime@i 0029                     ___lldiv@quotient 0035  
                    ___lwmod@divisor 0070              __size_of_EUSART_RCV_ISR 0014  
                   ??_turnOffLedRamp 0020                      _TMR0_Initialize 14F7  
                    _PWM2_Initialize 14CD                        writeByte@addr 0026  
        __end_of_updateDayRiseStatus 1642                      ___lwmod@counter 0075  
                      writeByte@byte 0024   __size_of_TMR2_UserInterruptHandler 0035  
    __end_ofi1_updateNightRiseStatus 162C                  __end_of_writeBuffer 1746  
       __size_ofi1_updateNightBright 0038           ?_TMR2_UserInterruptHandler 0070  
                        ??_writeByte 0025                   __end_of_turnMaxLed 082C  
                 __end_of_turnOffLed 172A       __end_of_PIN_MANAGER_Initialize 0B4D  
            __end_of_checkIsYearLeap 09B1                       keyScan@lastKey 007D  
                 updateNightBright@i 0023                      keyScan@rptCount 006F  
         __end_of_PWM1_LoadDutyValue 1783                         _gCurrentTime 00E5  
      i1PWM2_LoadDutyValue@dutyValue 0070                      _PWM3_Initialize 14E1  
